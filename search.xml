<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024杭电多校第三场</title>
      <link href="/2024/07/30/2024%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>/2024/07/30/2024%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="游走"><a href="#游走" class="headerlink" title="游走"></a>游走</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>一个街道上有$n$个路灯，编号$1,2,\dots, n$，酒鬼时刻$0$时在点$1$，从某个时间$t_0$开始游走，$t_0$时间之后，每隔一个单位时间会移动到相邻的路灯旁，不能不走，不能超过街道的边界。</p><p>$m$次操作，操作有三种类型：</p><p>1.告诉你信息，路人在时间$p$看到$q$。</p><p>2.询问$t_0$的最小值。</p><p>3.询问$t_0$的最大值。</p><p>如果路人给的信息有问题，后面的询问输出”bad”，如果最大值可以无限大，输出”inf”。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，当有多个路人在同一时间看到酒鬼在不同的路灯位置，说明信息有误，接下来都输出”bad”。</p><p>这里位置$1$很特殊，我们知道从$t_0$当酒鬼开始游走后，路人看到的酒鬼相邻两次时间差与位置差的奇偶性必须一致，否则信息有误。这题的关键一点就是对于位置$1$出现了奇偶性不同的时间，应该按照第一次酒鬼不在位置$1$的最早时间来确定是否出现bad。</p><p>这里分类讨论以下，如果路人给的信息没有出现位置非$1$的情况，显然我的$t_0$可以取到无穷大，而$t_0$最小值应该对位置$1$的所有时间进行讨论，如果没有位置$1$，$t_0$最小取$0$，因为没有任何限制。而位置$1$的所有时间如果只有奇数，$t_0$最小可以取$1$，原因同样还是路人看到的酒鬼相邻两次时间差与位置差的奇偶性必须一致；偶数情况同理。如果位置$1$的所有时间既有奇数又有偶数，$t_0$取$min(最大的奇数,最大的偶数)+1$，这样开始游走后路人看到的位置$1$的所有时间一定是相同的奇偶性。</p><p>当路人给定信息出现位置非$1$的情况，那么$t_0$的最大值根据出现位置非$1$的最早时间决定，$t_0$最大情况一定是从$t_0$出发后向这个最早时刻的非$1$位置走，最小情况类似上一段分析。这里还有一种bad的情况要考虑从最大$t_0$开始的相邻两点位置差会不会大于时间差。</p><p>对于位置的维护可以用<code>set&lt;pair&lt;int, int&gt;&gt;</code>，维护路人给出的时间和位置。第一次出现位置非$1$对应的最早时间以前出现的位置$1$可以按照奇偶性用<code>set&lt;int&gt;</code>独立维护，这样前面的部分插入到<code>set&lt;pair&lt;int, int&gt;&gt;</code>需要满足相邻位置之差小于等于相邻时间之差并且奇偶性相同，前者用来找$t_0$的最值。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; st;</span><br><span class="line"><span class="type">int</span> mx = <span class="number">2e9</span>, pos = <span class="number">2e9</span>, last = <span class="number">-1</span>;</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="type">int</span> op, p, q;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="built_in">puts</span>(<span class="string">&quot;bad&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (last != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> ptr = st.<span class="built_in">lower_bound</span>(&#123;last, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">prev</span>(ptr) -&gt; first) == (ptr -&gt; first) - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (ptr -&gt; first));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="built_in">prev</span>(ptr) -&gt; first) + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> ptr = *st.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (ptr.first + ptr.second + <span class="number">1</span>) % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="built_in">puts</span>(<span class="string">&quot;bad&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mx == <span class="number">2e9</span>) <span class="built_in">puts</span>(<span class="string">&quot;inf&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mx);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(p - <span class="number">1</span>) &gt; q) &#123;ok = <span class="literal">false</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (p &gt; <span class="number">1</span>) pos = <span class="built_in">min</span>(pos, q);</span><br><span class="line"><span class="keyword">if</span> (p &gt; <span class="number">1</span>) mx = <span class="built_in">min</span>(mx, q - <span class="built_in">abs</span>(p - <span class="number">1</span>));</span><br><span class="line">st.<span class="built_in">insert</span>(&#123;q, p&#125;);</span><br><span class="line"><span class="keyword">auto</span> ptr = st.<span class="built_in">find</span>(&#123;q, p&#125;);</span><br><span class="line"><span class="keyword">if</span> (ptr != st.<span class="built_in">begin</span>() &amp;&amp; <span class="built_in">next</span>(ptr) != st.<span class="built_in">end</span>() &amp;&amp; last == (<span class="built_in">next</span>(ptr) -&gt; first)) last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr != st.<span class="built_in">begin</span>()) &#123;</span><br><span class="line"><span class="keyword">auto</span> pre = *<span class="built_in">prev</span>(ptr);</span><br><span class="line"><span class="keyword">if</span> ((pre.first + pre.second) % <span class="number">2</span> != (p + q) % <span class="number">2</span>) last = <span class="built_in">max</span>(last, q);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(pre.second - p) &gt; <span class="built_in">abs</span>(pre.first - q)) &#123;ok = <span class="literal">false</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">next</span>(ptr) != st.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="keyword">auto</span> nxt = *<span class="built_in">next</span>(ptr);</span><br><span class="line"><span class="keyword">if</span> ((nxt.first + nxt.second) % <span class="number">2</span> != (p + q) % <span class="number">2</span>) last = <span class="built_in">max</span>(last, nxt.first);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(nxt.second - p) &gt; <span class="built_in">abs</span>(nxt.first - q)) &#123;ok = <span class="literal">false</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (last &gt; pos) &#123;ok = <span class="literal">false</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) <span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024牛客多校第三场</title>
      <link href="/2024/07/24/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>/2024/07/24/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bridging-the-Gap-2"><a href="#Bridging-the-Gap-2" class="headerlink" title="Bridging the Gap 2"></a>Bridging the Gap 2</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有$n$个步行者，第$i$个步行者对应一个体力值$h_i$，如果这个步行者坐上船，那么这个步行者的体力值会减$1$，体力值为$0$的步行者不能上船。起初所有步行者都在左岸，船在左岸，船上只能容纳$[L,R]$区间的人数，问这$n$个步行者能否全部到右岸。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>贪心。</p><p>基本思路即船从左岸到右岸载的人应尽量的多，因为会消耗每次船从右岸开回左岸的体力值，所以船从左岸到右岸一定选择$min(左岸剩余人数，R)$。同理，船从右岸开回左岸的人数一定越少越好，因为最终的目的是将所有人运到右边，这样一定不优，选择$L$人从右岸开回左岸最好。</p><p>以上确定了两种情况选多少人，接下来思考选怎么样的人（选最大的若干个?）。</p><p>我们右岸的人划到左岸的目的是送船，让左边的人可以回来。从左岸划到右岸的选人的根本目的是在这些方案中，船划到右岸后(左岸此时还有人)，右岸还能有$L$个人还能再划回左岸并且这$L$人能有体力再回来。</p><p>而这里，左岸划到右岸的所有方案一定要保证右岸划到左岸的选择一定是当前局面体力最大的$L$个人，否则可能回出现小体力和小体力组队从右往左划船，剩下大体力没有组队划船的。</p><p>因此一种直观且最优的想法就是每次选择左岸最大的$R$个，右岸最大的$L$个划船。</p><p>赛时思路以为左岸应该是最大的$L$个带着最小的$R-L$个最优，其实并无区别，根本目的是从右向左划船的需要是当前局面最大的$L$个。</p><p>想到这，我们就可以这样思考，求出船从右岸到左岸需要多少趟，总共$n$个人，去掉刚开始往右岸走的$R$个人，还剩下$n-R$人留在左岸，此时船在右岸，每次相当于右岸的$L$个人去左岸接$R-L$个人，等同于每次左岸少掉$R-L$个人，因此船从右岸到左岸需要的趟数$S=\lceil \frac{n-R}{R-l}\rceil$，而对于每个人，他到达右岸后能去左岸接人的趟数$a_i=\frac{h_i-1}2$，若右岸每次选$L$个能到左岸$S$趟就说明可以把左岸所有人运到右岸。</p><p>考虑如何计算右岸每次选$L$个能到左岸的趟数$V$，这里考虑每个人的对趟数的贡献，每次船上要有$L$个人。考虑第$i$ 个人可以走$a_i$趟，如果趟数大于$S$多余的部分显然无效，因为总共只有$S$趟，我最多参与$S$趟。</p><p>这里记$T=\sum_{i=1}^n min(a_i, S)$，证明若$T\ge L\times S$则说明可以把左岸所有人运到右岸。把$L\times S$想象成一块二维矩形，内部每一个纵向矩形表示每一趟船有哪些人，如果这$n$个人的贡献能把这个二维矩形填满即可。想象纵坐标是$L$，横坐标是$S$，每个人的贡献想象成宽为$1$，长为$a_i$的矩形，第一个人的贡献从左下角填起，如果一行填不下将矩形拆到下一行的开头填，因为矩形长$a_i$已经和$S$取最小，因此这样操作纵向一定不会出现同一个人。这样填满则证明这$S$趟从右岸到左岸的船都有不同的人可以上船，证毕。</p><p>时间复杂度$O(n)$</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, L, R;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">h</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; h[i];</span><br><span class="line">    <span class="built_in">sort</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= L &amp;&amp; n &lt;= R) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> S = (n - R) / (R - L);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">min</span>(S, (h[i] - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (sum &gt;= L * S ? <span class="string">&quot;Yes\n&quot;</span> : <span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rigged-Games"><a href="#Rigged-Games" class="headerlink" title="Rigged Games"></a>Rigged Games</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定只包含’0’或‘1’的长度为$n$的字符串，‘0’和‘1’分别表示队伍A和队伍B获胜，给定$a,b$表示两个队伍有一个队伍小分先赢$a$场，大分加$1$，大分先赢$b$场的队伍获胜。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>为方便表述，这里定义小局得分为小分，大局得分为大分，队伍0为队伍A，队伍1为队伍B。</p><p>令$val[i][j][k]$表示队伍$i$从$j$开始进行$2^k$场大局赢的局数，$nev[i][j][k]$表示队伍$i$从$j$开始进行$2^k$场大局会到哪个位置。</p><p>这样通过$nev[i][j][k]=nev[i][nev[i][j][k-1]][k-1],val[i][j][k]=val[i][j][k-1]+val[i][nev[i][j][k-1]][k-1]$就可以倍增出这两个数组。</p><p>我们需要的信息是$nev[i][j][0],val[i][j][0]$，即考虑进行一场大局会到哪个位置以及能赢多少局。这个问题可以通过双指针或前缀和+二分或题解做法再用一次倍增得到。我这里用的是前缀和+二分，需要$O(nlogn)$时间复杂度。做法就是把所有前缀和对应的下标放在前缀和数组中，对于每一个位置$j$二分队伍$i$最早赢得$presum[i][j-1]+a$场($presum[i][j]$表示从队伍$i$从第$0$场打到第$i$场赢了多少小局)第一个大于等于$i$的下标取最小，注意这里有一个坑点就是它所到的位置应该是这个点的下一个位置。</p><p>看最终谁获胜只需要进行$2\times b-1$轮大局哪个队伍赢得小局多，直接通过$nev,val$这两个倍增数组求得。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a, b;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() &lt; (<span class="type">int</span>)<span class="number">3e5</span>) &#123;</span><br><span class="line">        s += s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((<span class="type">int</span>)s.<span class="built_in">size</span>() &gt; (<span class="type">int</span>)<span class="number">3e5</span> + <span class="number">5</span>) &#123;</span><br><span class="line">        s.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pre</span>(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(s.<span class="built_in">size</span>()));</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">pos</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">3e5</span> + <span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;()));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            pre[j][i] = (i - <span class="number">1</span> &gt;= <span class="number">0</span> ? pre[j][i - <span class="number">1</span>] : <span class="number">0</span>) + ((s[i] - <span class="string">&#x27;0&#x27;</span>) == j);</span><br><span class="line">            pos[j][pre[j][i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">val</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">30</span>, <span class="number">-1</span>)));</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">nev</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">30</span>, <span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> who = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mn = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> presum = (i - <span class="number">1</span> &gt;= <span class="number">0</span> ? pre[j][i - <span class="number">1</span>] : <span class="number">0</span>) + a;</span><br><span class="line">            <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(pos[j][presum].<span class="built_in">begin</span>(), pos[j][presum].<span class="built_in">end</span>(), i);</span><br><span class="line">            <span class="keyword">if</span>(it == pos[j][presum].<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> p = *it;</span><br><span class="line">            <span class="keyword">if</span>(mn &gt; p) &#123;</span><br><span class="line">                mn = p;</span><br><span class="line">                who = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">assert</span>(mn != INF);</span><br><span class="line">        nev[!who][i][<span class="number">0</span>] = (mn + <span class="number">1</span>) % n;</span><br><span class="line">        nev[who][i][<span class="number">0</span>] = (mn + <span class="number">1</span>) % n;</span><br><span class="line">        val[who][i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        val[!who][i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">30</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nev[i][j][k - <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; nev[i][nev[i][j][k - <span class="number">1</span>]][k - <span class="number">1</span>] != <span class="number">-1</span>) nev[i][j][k] = nev[i][nev[i][j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">30</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nev[i][j][k - <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; val[i][j][k - <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; val[i][nev[i][j][k - <span class="number">1</span>]][k - <span class="number">1</span>] != <span class="number">-1</span>) val[i][j][k] = val[i][j][k - <span class="number">1</span>] + val[i][nev[i][j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> tb = b * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> now = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">29</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(tb &gt;= (<span class="number">1LL</span> &lt;&lt; k)) &#123;</span><br><span class="line">                    tb -= (<span class="number">1LL</span> &lt;&lt; k);</span><br><span class="line">                    <span class="keyword">if</span>(val[j][now][k] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        cur = <span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur += val[j][now][k];</span><br><span class="line">                    now = nev[j][now][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mx &lt; cur) &#123;</span><br><span class="line">                mx = cur;</span><br><span class="line">                ans = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“偷懒”笔记</title>
      <link href="/2024/07/21/%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/21/%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快捷打开常用应用"><a href="#快捷打开常用应用" class="headerlink" title="快捷打开常用应用"></a>快捷打开常用应用</h1><p>可以在桌面添加一个文件夹，并将该文件夹路径放入环境变量中，就可以通过$win+R$组合键弹出运行然后直接输入该文件夹中的文件名即可。</p><p>通过尝试得到的经验：</p><p>1.对于快捷方式，不能有格式后缀。</p><p>2.对于非快捷方式，若该文件名除去后缀格式只有一个，那么可以直接输入不带后缀的文件名，否则必须完整输入带后缀的文件名。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客笔记</title>
      <link href="/2024/07/21/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/21/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一键本地测试或部署"><a href="#一键本地测试或部署" class="headerlink" title="一键本地测试或部署"></a>一键本地测试或部署</h1><p>新建一个.bat后缀文件，输入相应文本内容</p><p>一键本地测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start cmd /k &quot;cd /d 博客目录绝对路径 &amp;&amp; hexo cl &amp;&amp; hexo s&quot;</span><br></pre></td></tr></table></figure><p>一键部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start cmd /k &quot;cd /d 博客目录绝对路径 &amp;&amp; hexo cl &amp;&amp; hexo d -g&quot;</span><br></pre></td></tr></table></figure><h1 id="markdown显示异常"><a href="#markdown显示异常" class="headerlink" title="markdown显示异常"></a>markdown显示异常</h1><p>问题如两个”_”符号被当作em加粗符号，参考文章：<a href="https://blog.luzy.top/posts/2968289947/">https://blog.luzy.top/posts/2968289947/</a></p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p>推荐博客：<a href="https://www.cnblogs.com/hugochen1024/p/12570656.html">https://www.cnblogs.com/hugochen1024/p/12570656.html</a></p><p>推荐使用图床，避免每次上传处理图片太慢，链接：<a href="sm.ms">sm.ms</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024杭电多校第一场</title>
      <link href="/2024/07/20/2024%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
      <url>/2024/07/20/2024%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="并"><a href="#并" class="headerlink" title="并"></a>并</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定$n$个矩形，对于每个$k\in [1,n]$，求解选$k$个不同矩形形成的面积并的期望。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过离散化+二位前缀和，求出被覆盖$i$次的面积记作$res[i]$。对于所有$k$，考虑求出被覆盖$i$次的面积的概率，总的情况是$C_n^k$，直接求出选到覆盖$i$次的这块面积的情况数量需要平方的复杂度，考虑正难则反（容斥），没选到这块面积的情况数就是我选的$k$次都是没有覆盖这块面积的矩形，即$C_{n-i}^k$，所以选到这块面积的情况数量就是$C_n^k-C_{n-i}^k$，概率就是$\frac{C_n^k-C_{n-i}^k}{C_n^j}$，期望即$\frac{C_n^k-C_{n-i}^k}{C_n^j}\times res[i]$。</p><p>时间复杂度$O(n^2)$</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 4010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> s[maxn][maxn], C[maxn][maxn], wk[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> x1_[maxn], y1_[maxn], x2_[maxn], y2_[maxn];</span><br><span class="line"><span class="type">int</span> res[maxn];</span><br><span class="line"><span class="type">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> nx[maxn], ny[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;  a %= m;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)  res = res * a % m;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;xs, ys;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; numx, numy;</span><br><span class="line">    <span class="type">int</span> n;  cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; x1_[i] &gt;&gt; y1_[i] &gt;&gt; x2_[i] &gt;&gt; y2_[i];</span><br><span class="line">        numx.<span class="built_in">insert</span>(x1_[i]);  numy.<span class="built_in">insert</span>(y1_[i]);</span><br><span class="line">        numx.<span class="built_in">insert</span>(x2_[i]);  numy.<span class="built_in">insert</span>(y2_[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> curx = <span class="number">0</span>, cury = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : numx)  &#123;</span><br><span class="line">        xs[u] = ++curx;</span><br><span class="line">        nx[curx] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : numy) &#123;</span><br><span class="line">        ys[u] = ++cury;</span><br><span class="line">        ny[cury] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        s[xs[x1_[i]]][ys[y1_[i]]]++;</span><br><span class="line">        s[xs[x2_[i]]][ys[y1_[i]]]--;</span><br><span class="line">        s[xs[x1_[i]]][ys[y2_[i]]]--;</span><br><span class="line">        s[xs[x2_[i]]][ys[y2_[i]]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= curx; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cury; ++j) &#123;</span><br><span class="line">            s[i][j] = s[i][j] + s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; curx; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; cury; j++) &#123;</span><br><span class="line">            <span class="type">int</span> dx = nx[i + <span class="number">1</span>] - nx[i];</span><br><span class="line">            <span class="type">int</span> dy = ny[j + <span class="number">1</span>] - ny[j];</span><br><span class="line">            res[s[i][j]] = (res[s[i][j]] + dx * dy % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> tt = <span class="built_in">qmi</span>(C[n][i], mod - <span class="number">2</span>, mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            ans = (ans + res[j] * (C[n][i] - C[n - j][i] + mod) % mod * tt) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);  cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span> || j == i)  C[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>  C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024牛客多校第二场</title>
      <link href="/2024/07/20/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
      <url>/2024/07/20/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Floor-Tiles"><a href="#Floor-Tiles" class="headerlink" title="Floor Tiles"></a>Floor Tiles</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><img src="https://s2.loli.net/2024/07/21/sSGRf4zHykgXVAl.png" alt="img"></p><p>让你构造一个$n\times m$的只包含”A”或”B”的字符，”A””B”含义如上图，将其按照构造的位置拼接，需要你恰好有$K$条曲线，并且会限定某个位置为”A”或”B”。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察性质发现，从外部的曲线进入一定会从外围曲线出去，剩下的线条一定是内部的环。而每种类型的字符对应的图四条边都有线条，易得进出外围的曲线一定是$\frac {2(n+m)}2=n+m$个。又观察到全”A”或全”B”一定没有环，而$2\times 2$字符对应第一行”AB”，第二行”BA”，能得到一个单位圆，故一定多构造出一个线条的最优策略。考虑根据输入给定位置的限定字符全赋值成该字符。然后根据该位置的横纵坐标关系与该位置具体限定字符模拟构造“ABAB”交错或”BABA”交错。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">char</span> z;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">ans</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">    k -= n + m;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                cout &lt;&lt; z;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            ans[i][j] = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x + y) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; z == <span class="string">&#x27;A&#x27;</span> || (x + y) % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; z == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = (i % <span class="number">2</span> == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>); j &lt; m; j += <span class="number">2</span>) &#123;</span><br><span class="line">                ans[i][j] = ans[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                ans[i + <span class="number">1</span>][j] = ans[i][j + <span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(--k == <span class="number">0</span>) &#123;</span><br><span class="line">                    i = n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = (i % <span class="number">2</span> == <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>); j &lt; m; j += <span class="number">2</span>) &#123;</span><br><span class="line">                ans[i][j] = ans[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                ans[i + <span class="number">1</span>][j] = ans[i][j + <span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(--k == <span class="number">0</span>) &#123;</span><br><span class="line">                    i = n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                cout &lt;&lt; ans[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MST"><a href="#MST" class="headerlink" title="MST"></a>MST</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个图，多次询问若干个结点构成的最小生成树的权值之和。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑根号分治，由于询问总结点个数不超过$10^5$，对于单次询问结点个数多的，直接做$kruskal$最小生成树跑给定的所有边；对于单次询问结点个数少的，先用$map$存入所有边，再暴力循环枚举询问的结点找到所有这些结点之间的边，然后做一遍$kruskal$。</p><p>考虑两种情况分治的界限$V$，对于询问结点个数多的时间复杂度为$O(qlogm)$即$O(\frac</p>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024牛客多校第一场</title>
      <link href="/2024/07/20/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
      <url>/2024/07/20/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="A-Bit-Common"><a href="#A-Bit-Common" class="headerlink" title="A Bit Common"></a>A Bit Common</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定序列的长度$n$，每个数的二进制位数$m$，模数$q$，问你有多少个序列满足这个序列（至少）存在一个子序列使得它们的按位与的结果为$1$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>显然，要找到一个序列满足至少存在一个子序列按位与为$1$，那么对于二进制最低位为$0$的一定不选，最低位为$1$的选一定更容易得到$1$。枚举有$i$个数($n$个数中选$i$个，$C_n^i$)二进制位最低位为$1$，考虑用这$i$个数能按位与得到$1$，则对于每一个除了最低位的二进制位都需要满足在这$i$个数中至少有一个数该位为$0$(考虑每一个二进制位，总共$2^i$种情况，减去全$1$情况，即$2^i -1$，共$m-1$位，结合起来即$(2^i-1)^{m-1}$)。对于二进制位最低位为$0$的情况，由于题意所求子序列一定不会包含这个数，所以非最低位任意填不会对结果造成影响($2^{(n-i)(m-1)}$)。</p><p>所以最终式子为$C_n^i(2^i-1)^{m-1}2^{(n-i)(m-1)}$，$i$从$1$到$n$求和。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n, m, mod;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    a%=p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = (ans + c[n][i] * <span class="built_in">qpow</span>((<span class="built_in">qpow</span>(<span class="number">2</span>, i, mod) - <span class="number">1</span> + mod) % mod, m - <span class="number">1</span>, mod) % mod * <span class="built_in">qpow</span>(<span class="number">2</span>, (n - i) * (m - <span class="number">1</span>), mod) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="A-Bit-More-Common"><a href="#A-Bit-More-Common" class="headerlink" title="A Bit More Common"></a>A Bit More Common</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定序列的长度$n$，每个数的二进制位数$m$，模数$q$，问你有多少个序列满足这个序列（至少）存在两个不同的子序列使得它们的按位与的结果为$1$。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>对比上一题，本题求的要求两个不同的子序列按位与为$1$，考虑容斥，用上题答案减去仅存在一个子序列它们的按位与结果为$1$。</p><p>如何计算仅存在一个子序列他们按位与结果为$1$的方案数？</p><p>思考需要满足这个条件的性质，记每个最低位为$1$的数构成的集合为$S$，对于$S$中每个元素都必须满足，至少存在一个非最低位在$S$中只有该数为$0$，这样就保证了不选这个数那么按位与的结果一定会有非最低位为$1$，因为只有这个数能让某个非最低位为$0$，这里我们记这样的位叫做特殊位。</p><p>令$dp[i][j]$表示$i$个数总共有$j$个特殊位的方案数，考虑转移，考虑当前情况下最新加进来的特殊位有$i$个数可以对应，即有$i$种情况，如果删掉这个特殊位，可能仍有$i$个数即每个数仍还有特殊位，也可能剩下$i-1$个数删掉的哪个特殊位为对应数唯一的特殊位，状态转移方程$dp[i][j]=i\times (dp[i][j-1],dp[i-1][j-1])$。</p><p>记选了$k$个二进制最低位为$1$的数，对应了$t$个特殊位。对于最低位为$1$的数非特殊位，需要保证该位至少有一个$0$且不是特殊位，共有$m-1-t$个非特殊位且非最低位，而最低位为$0$的数非最低位同样任意选，方案数$C_n^k 2^{(n-k)(m-1)} C_{m-1}^t dp[k][t] {(2^k-k-1)}^{m-1-t}$，$k$从$2$到$n$求和，$t$从$k$到$m-1$求和，对于$k=1$的情况单独考虑，</p><p>对于最低位为$1$的数其它位必须都为$0$，其它数的非最低位任意选。</p><p>由于这题比较卡常，循环内的快速幂可以通过循环顺序优化掉，时间复杂度$O(n^2)$</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n, m, mod;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    a%=p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    a += b;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= mod) a -= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans1 = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tt2</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">p2</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tt2[i] = <span class="built_in">qpow</span>(<span class="number">2</span>, (n - i) * (m - <span class="number">1</span>), mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        p2[i] = p2[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans1 = (ans1 + c[n][i] * <span class="built_in">qpow</span>((p2[i] - <span class="number">1</span> + mod) % mod, m - <span class="number">1</span>, mod) % mod * tt2[i] % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans2 = c[n][<span class="number">1</span>] * <span class="built_in">qpow</span>(<span class="number">2</span>, (n - <span class="number">1</span>) * (m - <span class="number">1</span>), mod) % mod;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; ans2 &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5000</span>; j++) &#123;</span><br><span class="line">            dp[i][j] = i * (dp[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;DWJAIO:&quot; &lt;&lt; dp[2][2] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">2</span>; k &lt;= n; k++) &#123;</span><br><span class="line">        <span class="type">int</span> t1 = c[n][k];</span><br><span class="line">        <span class="type">int</span> t2 = tt2[k];</span><br><span class="line">        <span class="type">int</span> t5 = (p2[k] - k - <span class="number">1</span> + mod) % mod;</span><br><span class="line">        <span class="type">int</span> t6 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t = m - <span class="number">1</span>; t &gt;= k; t--) &#123;</span><br><span class="line">            <span class="type">int</span> t3 = c[m - <span class="number">1</span>][t];</span><br><span class="line">            <span class="type">int</span> t4 = dp[k][t];</span><br><span class="line">            <span class="type">int</span> add = t1 * t2 % mod * t3 % mod * t4 % mod * t6 % mod;</span><br><span class="line">            t6 = t6 * t5 % mod;</span><br><span class="line">            ans2 += add;</span><br><span class="line">            <span class="keyword">if</span>(ans2 &gt; mod) ans2 -= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for(int k = 2; k &lt;= n; k++) &#123;</span></span><br><span class="line">    <span class="comment">//     int t1 = c[n][k];</span></span><br><span class="line">    <span class="comment">//     int t2 = tt2[k];</span></span><br><span class="line">    <span class="comment">//     int t5 = ((p2[k] - k - 1) % mod + mod) % mod;</span></span><br><span class="line">    <span class="comment">//     int t6 = 1;</span></span><br><span class="line">    <span class="comment">//     for(int t = m - 1; t &gt;= k; t--) &#123;</span></span><br><span class="line">    <span class="comment">//         int t3 = c[m - 1][t];</span></span><br><span class="line">    <span class="comment">//         int t4 = dp[k][t];</span></span><br><span class="line">    <span class="comment">//         t6 = t6 * t5 % mod;</span></span><br><span class="line">    <span class="comment">//         int add = t1 * t2 % mod * t3 % mod * t4 % mod * t6 % mod;</span></span><br><span class="line">    <span class="comment">//         ans2 += add;</span></span><br><span class="line">    <span class="comment">//         if(ans2 &gt;= mod) ans2 -= mod;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; ans1 &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    cout &lt;&lt; (ans1 - ans2 + mod) % mod &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sum-of-Suffix-Sums"><a href="#Sum-of-Suffix-Sums" class="headerlink" title="Sum of Suffix Sums"></a>Sum of Suffix Sums</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定$q$次操作，每次操作给你两个数$t,v$，表示先删掉序列中的$t$个数再在最后插入大小为$v$的数的操作，每次操作询问你此时序列的所有后缀和的和。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>令序列为$\lbrace a_1,a_2,\dots,a_k \rbrace$，那么所有后缀和的和即$a_1+a_2\times 2+\dots+a_k\times k$，考虑维护当前答案，每次删除最后一个元素答案减去删去元素与删前元素个数的积，添加一个元素答案加上加入的元素与加入后元素个数的积，模拟即可。</p><p>注意size_t类型类似unsigned int没有负数，用int减去size_t或用size_t减去int要注意出现小于0的情况，此时值会变成正无穷，再取模答案已经不正确了，可以用(int)vector.size()来避免int与size_t运算出现错误。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pll;</span><br><span class="line">string yes = <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">string no = <span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">    <span class="comment">// s.push_back(1);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; (1LL - s.size() * 10LL) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t, x;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; x;</span><br><span class="line">        <span class="keyword">while</span>(t--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> xx = s.<span class="built_in">back</span>();</span><br><span class="line">            ans = ((ans - (<span class="type">int</span>)s.<span class="built_in">size</span>() * xx) % mod + mod) % mod;</span><br><span class="line">            s.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push_back</span>(x);</span><br><span class="line">        ans = (ans + (<span class="type">int</span>)s.<span class="built_in">size</span>() * s.<span class="built_in">back</span>() % mod) % mod;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="World-Finals"><a href="#World-Finals" class="headerlink" title="World Finals"></a>World Finals</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>以46届和47届的world finals为背景，由于这两场world final同时进行，两个队都可以参加的队伍只能选择一队参加。题中给出两场world final各队伍的预测做题情况，问你如果同时能参加两场比赛的队伍可以由你任意分配，问“lzr010506”这个队的可以达到的最好的排名。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>签到题，分别模拟lzr010506参加46届，能参加两场比赛的队伍选择参加47届，或lzr010506参加47届能参加两场比赛的队伍选择参加46届这两种情况。</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> p, t;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node&amp; w) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p != w.p) <span class="keyword">return</span> p &gt; w.p;</span><br><span class="line">        <span class="keyword">return</span> t &lt; w.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; cnt;</span><br><span class="line">    vector&lt;Node&gt; v1, v2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> p, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; p &gt;&gt; t;</span><br><span class="line">        cnt[s]++;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(&#123;s, p, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> p, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; p &gt;&gt; t;</span><br><span class="line">        cnt[s]++;</span><br><span class="line">        v2.<span class="built_in">push_back</span>(&#123;s, p, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = INF;</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;Node&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x: v1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x.s == <span class="string">&quot;lzr010506&quot;</span> || cnt[x.s] != <span class="number">2</span>) &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i].s == <span class="string">&quot;lzr010506&quot;</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;Node&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x: v2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x.s == <span class="string">&quot;lzr010506&quot;</span> || cnt[x.s] != <span class="number">2</span>) &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i].s == <span class="string">&quot;lzr010506&quot;</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mirror-Maze"><a href="#Mirror-Maze" class="headerlink" title="Mirror Maze"></a>Mirror Maze</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定$n\times m$的镜子迷宫，每个位置都有一个镜子，共有四种镜子‘-’、’|’、’/‘、’\\’，分别可以反射从一定方向的来的光，给你$q$次询问，每次问你从该点出发向上下左右某个方向射出的光会反射多少面镜子，注意过程中遇到的同一个镜子只算一次。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>容易发现，只有两种情况。一种情况是这个光反射有限次数后会出去，另一种情况会形成环。考虑预处理每个位置向四周发射光的答案，对于前者，我们可以枚举所有从外面射向最外围一圈的情况，如左边一列的点分别枚举从外面向右射向这些点，上边一行的点分别枚举从外面向下射入这些点。每次记录过程中经过的镜子数量，并根据光路可逆的原理记录到预处理的数组中。剩下的未记录的情况即环，我们每次跑一遍环记录该环总数分别赋值即可。个人建议用$dfs$写更加方便，$dfs$可以同时处理刚遍历到该点的情况和该点以后的点都处理好后再处理该点两种情况。如环的情况可以在$dfs$函数中递归下一个点代码前处理计数，递归下一个点代码后赋值答案。</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> ans[N][N][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> to[N][N][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fan</span><span class="params">(<span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d ^ <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[N][N], sum;</span><br><span class="line">vector&lt;PII&gt; rec;</span><br><span class="line"><span class="type">bool</span> fhuan;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getto</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> from)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> to = <span class="built_in">fan</span>(from);</span><br><span class="line">    <span class="keyword">if</span>(s[x][y] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(from == <span class="number">0</span>) &#123;</span><br><span class="line">            to = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">1</span>) &#123;</span><br><span class="line">            to = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">2</span>) &#123;</span><br><span class="line">            to = <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">3</span>) &#123;</span><br><span class="line">            to = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[x][y] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(from == <span class="number">0</span>) &#123;</span><br><span class="line">            to = <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">1</span>) &#123;</span><br><span class="line">            to = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">2</span>) &#123;</span><br><span class="line">            to = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">3</span>) &#123;</span><br><span class="line">            to = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[x][y] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(from == <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">1</span>) &#123;</span><br><span class="line">            to = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">3</span>) &#123;</span><br><span class="line">            to = <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[x][y] == <span class="string">&#x27;|&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(from == <span class="number">0</span>) &#123;</span><br><span class="line">            to = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">2</span>) &#123;</span><br><span class="line">            to = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(from == <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> stx = <span class="number">-1</span>, sty = <span class="number">-1</span>, stfrom = <span class="number">-1</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> from)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; from &lt;&lt; &#x27; &#x27; &lt;&lt; stx &lt;&lt; &#x27; &#x27; &lt;&lt; sty &lt;&lt; &#x27; &#x27; &lt;&lt; stfrom &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; from &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(fhuan == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stx == x &amp;&amp; sty == y &amp;&amp; stfrom == from &amp;&amp; ++cnt == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(fhuan == <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tox = x, toy = y, to = <span class="built_in">getto</span>(x, y, from);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fhuan) ans[x][y][from] = sum;</span><br><span class="line">    tox += dx[to], toy += dy[to];</span><br><span class="line">    <span class="keyword">if</span>(to != <span class="built_in">fan</span>(from)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(++vis[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">            rec.<span class="built_in">push_back</span>(&#123;x, y&#125;);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(tox, toy, <span class="built_in">fan</span>(to));</span><br><span class="line">    <span class="keyword">if</span>(fhuan) ans[x][y][from] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> from)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fhuan) &#123;</span><br><span class="line">        stx = x, sty = y, stfrom = from, cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x, y, from);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [a, b]: rec) &#123;</span><br><span class="line">        <span class="comment">// cerr &lt;&lt; a &lt;&lt; &#x27; &#x27; &lt;&lt; b &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        vis[a][b] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rec.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        s[i] = <span class="string">&#x27; &#x27;</span> + s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fhuan = 1;</span></span><br><span class="line">    <span class="comment">// solve(1, 2, 2);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;ans:&quot; &lt;&lt; ans[1][2][2] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="comment">// return;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">solve</span>(i, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">solve</span>(i, m, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">        <span class="built_in">solve</span>(<span class="number">1</span>, j, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">solve</span>(n, j, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; &quot;huanhuan\n\n&quot;;</span></span><br><span class="line">    fhuan = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// solve(1, 1, 0);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i][j][k] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="comment">// cerr &lt;&lt; &quot;DOWJAID: &quot; &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; k &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">                    <span class="built_in">solve</span>(i, j, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++) &#123;</span></span><br><span class="line">    <span class="comment">//         cerr &lt;&lt; vis[i][j] &lt;&lt; &quot; \n&quot;[j == m];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++) &#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; ans[i][j][2] &lt;&lt; &quot; \n&quot;[j == m];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; mp&#123;&#123;<span class="string">&quot;right&quot;</span>, <span class="number">0</span>&#125;, &#123;<span class="string">&quot;below&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;left&quot;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&quot;above&quot;</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        string t;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        cout &lt;&lt; ans[x][y][mp[t]] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二维数点</title>
      <link href="/2023/09/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%82%B9/"/>
      <url>/2023/09/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>二维数点一般基于二维前缀和+扫描线思想，用树状数组维护。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="Genealogy-in-the-trees"><a href="#Genealogy-in-the-trees" class="headerlink" title="Genealogy in the trees"></a><a href="https://ac.nowcoder.com/acm/contest/64819/D">Genealogy in the trees</a></h2><p>注：这题有更好的做法，因为自己第一时间想到这种方法，所以用这种方法写了，顺便练习下树剖和二维数点</p><p>题目要求“有多少个 i 满足： pi 可以到达 a 且 b 可以到达 qi。”</p><p>也就是在{p,q}中，求第一维范围是$[1到a的路径]$，第二维范围是$[b的子树]$的数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Genealogy in the trees</span></span><br><span class="line"><span class="comment">// Contest: NowCoder</span></span><br><span class="line"><span class="comment">// URL: https://ac.nowcoder.com/acm/contest/64819/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 2097152 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 4000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, Q;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">int</span> id[N],cnt;</span><br><span class="line"><span class="type">int</span> dep[N],sz[N],top[N],fa[N],son[N];</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; w[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, sgn, id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; w.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Node&gt; op;</span><br><span class="line">vector&lt;PII&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;N;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">presum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    dep[u]=depth,fa[u]=father,sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u,depth+<span class="number">1</span>);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    id[u]=++cnt,top[u]=t;</span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_op</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x2, y2, <span class="number">1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, <span class="number">1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x1 - <span class="number">1</span>, y2, <span class="number">-1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x2, y1 - <span class="number">1</span>, <span class="number">-1</span>, id&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_path</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,PII y,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        <span class="built_in">insert</span>(id[top[u]], y.first, id[u], y.second, i);</span><br><span class="line">        u=fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="built_in">insert</span>(id[v], y.first, id[u], y.second, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count_point</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(op.<span class="built_in">begin</span>(), op.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [x, y, sgn, id]: op) &#123;</span><br><span class="line"><span class="keyword">while</span>(cur &lt; (<span class="type">int</span>)v.<span class="built_in">size</span>() &amp;&amp; v[cur].first &lt;= x) <span class="built_in">add</span>(v[cur++].second, <span class="number">1</span>);</span><br><span class="line">ans[id] += sgn * <span class="built_in">presum</span>(y);</span><br><span class="line"><span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; sgn * presum(y) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q;</span><br><span class="line">edge.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; sz[i] &lt;&lt; &quot; \n&quot;[i == n];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i].first &gt;&gt; w[i].second;</span><br><span class="line">w[i].first = id[w[i].first], w[i].second = id[w[i].second];</span><br><span class="line">v.<span class="built_in">push_back</span>(&#123;w[i].first, w[i].second&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) &#123;</span><br><span class="line">cin &gt;&gt; q[i].first &gt;&gt; q[i].second;</span><br><span class="line">PII y = &#123;id[q[i].second], id[q[i].second] + sz[q[i].second] - <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">get_path</span>(<span class="number">1</span>, q[i].first, y, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(auto it: v) &#123;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; it.first &lt;&lt; &#x27; &#x27; &lt;&lt; it.second &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &#x27;\n&#x27;;N</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">count_point</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) &#123;</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数点 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp</title>
      <link href="/2023/09/09/%E6%95%B0%E4%BD%8Ddp/"/>
      <url>/2023/09/09/%E6%95%B0%E4%BD%8Ddp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>数位dp一般采用记忆化搜索写起来更加清晰</strong></p><p>对于求大数区间计数，并且要求满足一行数位性质时采用数位dp。</p><p>一般对于一个位nums[u]，分成0~nums[u] - 1 和 nums[u]两种情况考虑，其中的lim(limit)表示该位是否受限，若不受限则能取0~9，否则只能取0~nums[u]。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="Nim"><a href="#Nim" class="headerlink" title="Nim"></a><a href="https://atcoder.jp/contests/abc317/tasks/abc317_f"><strong>Nim</strong></a></h2><p>定义$dp[u][m1][m2][m3][l1][l2][p1][p2][p3]$为取到第$u$位，取模$a1,a2,a3$的余数分别为$m1,m2,m3$，三个数是否受限($l1, l2, l3$), 三个数是否取过1，因为这题答案为0满足但不在题意范围内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: F - Nim</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - GAMEFREAK Programming Contest 2023 (AtCoder Beginner Contest 317)</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc317/tasks/abc317_f</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">66</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">15</span>][<span class="number">15</span>][<span class="number">15</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, a1, a2, a3;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> m1, <span class="type">int</span> m2, <span class="type">int</span> m3, <span class="type">bool</span> l1, <span class="type">bool</span> l2, <span class="type">bool</span> l3, <span class="type">bool</span> p1, <span class="type">bool</span> p2, <span class="type">bool</span> p3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">-1</span> &amp;&amp; !m1 &amp;&amp; !m2 &amp;&amp; !m3 &amp;&amp; p1 &amp;&amp; p2 &amp;&amp; p3) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> &amp;w = dp[u][m1][m2][m3][l1][l2][l3][p1][p2][p3];</span><br><span class="line"><span class="keyword">if</span>(~w) <span class="keyword">return</span> w;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t1 = l1 ? nums[u] : <span class="number">1</span>, t2 = l2 ? nums[u] : <span class="number">1</span>, t3 = l3 ? nums[u] : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= t1; i1++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt;= t2; i2++) &#123;</span><br><span class="line"><span class="type">int</span> i3 = i1 ^ i2;</span><br><span class="line"><span class="keyword">if</span>(i3 &gt; t3) <span class="keyword">continue</span>;</span><br><span class="line">res = (res + <span class="built_in">dfs</span>(u - <span class="number">1</span>, (m1 * <span class="number">2</span> + i1) % a1, (m2 * <span class="number">2</span> + i2) % a2, (m3 * <span class="number">2</span> + i3) % a3, l1 &amp; (i1 == nums[u]), l2 &amp; (i2 == nums[u]), l3 &amp; (i3 == nums[u]), i1 | p1, i2 | p2, i3 | p3)) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> w = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; a3;</span><br><span class="line"><span class="keyword">while</span>(n) nums.<span class="built_in">push_back</span>(n % <span class="number">2</span>), n /= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">cout &lt;&lt; <span class="built_in">dfs</span>((<span class="type">int</span>)nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="恨7不成妻"><a href="#恨7不成妻" class="headerlink" title="恨7不成妻"></a><a href="https://www.acwing.com/problem/content/1088/">恨7不成妻</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 恨7不成妻</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/1088/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">67</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p10[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p10[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        p10[i] = (p10[i - <span class="number">1</span>] * <span class="number">10</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum, sum2, cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node dp[N][<span class="number">20</span>][<span class="number">75</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> m1, <span class="type">int</span> m2, <span class="type">bool</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m1 &amp;&amp; m2) <span class="keyword">return</span> (Node)&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">return</span> (Node)&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> &amp;w = dp[u][m1][m2][lim];</span><br><span class="line">    <span class="keyword">if</span>(~w.sum) <span class="keyword">return</span> w;</span><br><span class="line">    Node res = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> tot = lim ? nums[u] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">auto</span> t = <span class="built_in">dfs</span>(u - <span class="number">1</span>, (m1 + i) % <span class="number">7</span>, (m2 * <span class="number">10</span> + i) % <span class="number">7</span>, lim &amp; (i == nums[u]));</span><br><span class="line">        res.sum = (res.sum + i * t.cnt % mod * p10[u] % mod + t.sum) % mod, res.cnt = (res.cnt + t.cnt) % mod;</span><br><span class="line">        res.sum2 = (res.sum2 + t.cnt * (i * p10[u] % mod) % mod * (i * p10[u] % mod) % mod + <span class="number">2</span> * i * p10[u] % mod * t.sum % mod + t.sum2) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    nums.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span>(x) nums.<span class="built_in">push_back</span>(x % <span class="number">10</span>), x /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">auto</span> t = <span class="built_in">dfs</span>((<span class="type">int</span>)nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    cout &lt;&lt; ((<span class="built_in">get</span>(r).sum2 - <span class="built_in">get</span>(l - <span class="number">1</span>).sum2) % mod + mod) % mod&lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化建图</title>
      <link href="/2023/09/03/%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/"/>
      <url>/2023/09/03/%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>题单：<a href="https://www.luogu.com.cn/blog/221955/chang-jian-you-hua-jian-tu-ji-qiao">https://www.luogu.com.cn/blog/221955/chang-jian-you-hua-jian-tu-ji-qiao</a></strong></p><h1 id="线段树建图优化"><a href="#线段树建图优化" class="headerlink" title="线段树建图优化"></a>线段树建图优化</h1><h2 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a><a href="https://www.luogu.com.cn/problem/CF786B">dijkstra</a></h2><p>题意：n个点，m条边，s是起点，问点s到点1~n的最短距离</p><p>有三种边：接下来的 <em>q</em> 行表示 <em>q</em> 种方案。</p><ul><li>输入 <code>1 v u w</code> 表示第一种方案，从v向u连边，权值为w</li><li>输入 <code>2 v l r w</code> 表示第二种方案，从v向$[l,r]$区间连边，权值为w</li><li>输入 <code>3 v l r w</code> 表示第三种方案，从$[l,r]$区间向v连边，权值为w</li></ul><p>这里的线段树实际上有两个，分别为u和u+D,左树从上往下，右数从下往上，区间向点连边从右树结点连出，点向区间连入到左树结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Legacy</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 406 (Div. 1)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/786/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">1e6</span> + <span class="number">10</span>, D = <span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; g[M];</span><br><span class="line"><span class="type">int</span> dist[M], leaf[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u] = &#123;l, r&#125;;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">leaf[l] = u;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v, <span class="type">int</span> w, <span class="type">int</span> op)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span>(op) g[u + D].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line"><span class="keyword">else</span> g[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, leaf[s]&#125;);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[leaf[s]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = t.second, distance = t.first;</span><br><span class="line">        <span class="keyword">if</span>(dist[u]&lt;distance) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:g[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)&#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">g[leaf[u]].<span class="built_in">push_back</span>(&#123;leaf[v], w&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> v, l, r, w;</span><br><span class="line">cin &gt;&gt; v &gt;&gt; l &gt;&gt; r &gt;&gt; w;</span><br><span class="line"><span class="built_in">connect</span>(<span class="number">1</span>, l, r, leaf[v], w, op % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">g[leaf[i]].<span class="built_in">push_back</span>(&#123;leaf[i] + D, <span class="number">0</span>&#125;),g[leaf[i] + D].<span class="built_in">push_back</span>(&#123;leaf[i], <span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[leaf[i]] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; dist[leaf[i]] &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前后缀建图优化"><a href="#前后缀建图优化" class="headerlink" title="前后缀建图优化"></a>前后缀建图优化</h1><h2 id="2-SAT问题"><a href="#2-SAT问题" class="headerlink" title="2-SAT问题"></a><a href="https://atcoder.jp/contests/abc210/tasks/abc210_f">2-SAT问题</a></h2><p>题意：你有 <em>n</em> 张卡片，第 <em>i</em> 张卡片正面写着一个数字 a<em>i</em>，反面写着一个数字 b<em>i</em>，现在你可以摆放卡片（规定每张卡片朝上的面），询问是否存在一种摆放方式，使得任意两张不同的卡片朝上面所写的数字都是互质的。</p><p>两排结点，上面那排每个都分别往左连（前缀），下面那排每个都分别往右连（后缀）</p><p>这时向前缀中的一个结点连相当于向这个结点以及之前的所有点连。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: F - Coprime Solitaire</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 210</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc210/tasks/abc210_f</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">2000005</span>],ispr[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> prime[<span class="number">2000005</span>],pcnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[pcnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">30005</span>], b[<span class="number">30005</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> nw;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20000005</span>, M = <span class="number">20000005</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], ts, stk[N], top;</span><br><span class="line"><span class="type">int</span> id[N], cnt;</span><br><span class="line"><span class="type">bool</span> ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++ ts;</span><br><span class="line">stk[++top] = u, ins[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[j]) &#123;</span><br><span class="line"><span class="built_in">tarjan</span>(j);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u] == dfn[u]) &#123;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y = stk[top--], ins[y] = <span class="literal">false</span>, id[y] = cnt;</span><br><span class="line">&#125;<span class="keyword">while</span>(y != u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; n ? x - n : x + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">get_primes</span>(<span class="number">2000002</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pcnt; i++) &#123;</span><br><span class="line">ispr[prime[i]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">nw = n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i] / j; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ispr[j]) v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ispr[a[i] / j]) v[a[i] / j].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[i] / j; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ispr[j]) v[j].<span class="built_in">push_back</span>(i + n);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ispr[b[i] / j]) v[b[i] / j].<span class="built_in">push_back</span>(i + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">++nw;</span><br><span class="line"><span class="built_in">add</span>(nw, <span class="built_in">nt</span>(v[i][j]));</span><br><span class="line"><span class="keyword">if</span>(j) <span class="built_in">add</span>(v[i][j], nw - <span class="number">1</span>), <span class="built_in">add</span>(nw, nw - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = (<span class="type">int</span>)v[i].<span class="built_in">size</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">++nw;</span><br><span class="line"><span class="built_in">add</span>(nw, <span class="built_in">nt</span>(v[i][j]));</span><br><span class="line"><span class="keyword">if</span>(j &lt; (<span class="type">int</span>)v[i].<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">add</span>(v[i][j], nw - <span class="number">1</span>), <span class="built_in">add</span>(nw, nw - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; id[i] &lt;&lt; &#x27; &#x27; &lt;&lt; id[i + n] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="keyword">if</span>(id[i] == id[i + n]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 优化建图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化建图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂题</title>
      <link href="/2023/09/03/%E6%9D%82%E9%A2%98/"/>
      <url>/2023/09/03/%E6%9D%82%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="游游的字符重排"><a href="#游游的字符重排" class="headerlink" title="游游的字符重排"></a><a href="https://ac.nowcoder.com/acm/contest/64272/B">游游的字符重排</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>游游定义一个字符串是“好串”，当且仅当该字符串相邻的字符不相等。例如”arcaea”是好串，而”food”不是好串。</p><p> 游游拿到了一个字符串，她可以将该字符串的各个字符顺序随意打乱。她想知道一共可以生产多少种不同的好串？</p><p>输入：一个仅包含小写字母的字符串，长度不超过10。</p><p>输出：好串的数量。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然dfs可以做，但是枚举全排列更好写。比赛时就是因为不熟悉next_permutation()函数的返回值而出错改用了dfs。</p><p>暴力枚举原串的全排列，用do{}while(next_permutation(s.begin(),s.end()));枚举全排列暴力判断。</p><p><strong>next_permutation()函数功能是输出所有比当前排列大的排列，顺序是从小到大。</strong></p><p><strong>返回值:若新排列按字典序大于旧者则为 true 。若抵达最后重排并重置范围为首个排列则为 false 。</strong></p><p><strong>prev_permutation()函数功能是输出所有比当前排列小的排列，顺序是从大到小。</strong></p><p>所以枚举全排列应该先sort(s.begin(),s.end());</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">bool</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == s[i - <span class="number">1</span>])&#123;</span><br><span class="line"> f = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans += f;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>()));</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记忆化搜索</title>
      <link href="/2023/09/01/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
      <url>/2023/09/01/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="小Why的数论测试"><a href="#小Why的数论测试" class="headerlink" title="小Why的数论测试"></a><a href="https://ac.nowcoder.com/acm/contest/64384/F">小Why的数论测试</a></h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定$a,b$($1\le a\le b \le 10^{12}$,)，有三种操作</p><p>①$a:=a+1$</p><p>②$a:=2a$</p><p>③$a:=a^2$</p><p>问从$a$变成b的最少操作次数。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>从$a$搜索到$b$，每步的选择都有三种，而从$b$搜索到$a$，第②步必须保证$b$是偶数，第③步必须保证$b$是完全平方数，状态少了很多。从b记忆化搜索到a即可。</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 小Why的数论测试</span></span><br><span class="line"><span class="comment">// Contest: NowCoder</span></span><br><span class="line"><span class="comment">// URL: https://ac.nowcoder.com/acm/contest/64384/F</span></span><br><span class="line"><span class="comment">// Memory Limit: 524288 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(x)) <span class="keyword">return</span> mp[x];</span><br><span class="line"><span class="type">int</span> ans = x - a;</span><br><span class="line"><span class="keyword">if</span>(x / <span class="number">2</span> &gt;= a) ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(x / <span class="number">2</span>) + <span class="number">1</span> + x % <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> u = <span class="built_in">sqrt</span>(x);</span><br><span class="line"><span class="keyword">if</span>(u &gt;= a) ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(u) + <span class="number">1</span> + x - u * u);</span><br><span class="line"><span class="keyword">return</span> mp[x] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line">mp[a] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(b);</span><br><span class="line">cout &lt;&lt; mp[b] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shortest-path"><a href="#Shortest-path" class="headerlink" title="Shortest path"></a><a href="https://acm.hdu.edu.cn/showproblem.php?pid=7372">Shortest path</a></h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个数n，初始值为1，每次可以对他进行 乘2/乘3/加1 三种操作之一，问最小操作次数。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于从1到n的情况数比n到1多的多，所以我们考虑从n向1搜索，但肯定不能完全暴力。</p><p>可以发现，除以2或除以3的操作比减1进行的贡献要优的多。我们应考虑将减1作为该数不能整除2或整除3时来使用这一操作。</p><p>这里采用记忆化搜索，能有效降低时间复杂度。</p><h3 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Shortest path</span></span><br><span class="line"><span class="comment">// Contest: HDOJ</span></span><br><span class="line"><span class="comment">// URL: https://acm.hdu.edu.cn/showproblem.php?pid=7372</span></span><br><span class="line"><span class="comment">// Memory Limit: 262 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(x)) <span class="keyword">return</span> mp[x];</span><br><span class="line"><span class="type">int</span> ans = x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x / <span class="number">3</span> &gt;= <span class="number">1</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(x / <span class="number">3</span>) + <span class="number">1</span> + x % <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(x / <span class="number">3</span> &gt;= <span class="number">1</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(x / <span class="number">2</span>) + <span class="number">1</span> + x % <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> mp[x] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line">mp[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//这样可以在dfs中少一个判断</span></span><br><span class="line"><span class="built_in">dfs</span>(n);</span><br><span class="line">cout &lt;&lt; mp[n] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率与期望</title>
      <link href="/2023/08/26/%E6%9C%9F%E6%9C%9Bdp/"/>
      <url>/2023/08/26/%E6%9C%9F%E6%9C%9Bdp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="一个模型"><a href="#一个模型" class="headerlink" title="一个模型"></a>一个模型</h2><p><strong>一件事情成功的概率为p，则期望的第一次成功的次数是多少？</strong></p><p><strong>答：1/p</strong></p><p>第一次成功的概率为$p$</p><p>第二次成功的概率为$(1-p)\times p$</p><p>第三次成功的概率为 $(1-p)^2 \times p$</p><p>…</p><p>期望次数 $E(x) = p + 2\times (1-p)\times p$ +  $3 \times (1-p)^2 \times p + \ldots = \sum_{k\ge 1}{k(1-p)^{k-1}}p$ </p><p>设$f(x) = \sum_{k\ge 1}{x^k}=\frac x{1-x}(\lvert x \rvert &lt;1)$</p><p>求导得，$f’(x) =\sum_{k\ge 1}{kx^{k-1}}=\frac{(1-x)-x\times (-1)}{(1-x)^2}=\frac 1 {(1-x)^2}$</p><p>$\Rightarrow f’(x-1)=\sum_{k\ge 1}{k(x - 1)^{k-1}}=\frac 1 {x^2}$</p><p>$\Rightarrow E(x) = f’(1-p) \times p = \frac p {p^2}=\frac 1 p$</p><h2 id="Kevin的抽奖黑幕"><a href="#Kevin的抽奖黑幕" class="headerlink" title="Kevin的抽奖黑幕"></a><a href="https://ac.nowcoder.com/acm/contest/63804/E">Kevin的抽奖黑幕</a></h2><p>这里终点不唯一，但起点唯一，所以从后往前推，最后的状态固定。</p><p>令$dp[i][j]$为当前是第$i$轮，已经$j$轮未获奖，到$n$轮抽奖结束获得奖品数量的期望。</p><p>状态转移：</p><script type="math/tex; mode=display">dp[i][j]=\begin{cases}(dp[i + 1][0] + 1) \times \frac kn + f[i + 1][j + 1]\times (1 - \frac kn) & 0 \le j \le d - 2,\\dp[i][0] + 1, & j = d - 1\end{cases}</script><p>最后的答案即$dp[0][0] \times n$(因为$dp[0][0]$表示一个人的期望，有n个人所以乘上n)</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = a * b - (<span class="type">long</span> <span class="type">long</span>)(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">long</span> <span class="type">long</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLong</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">norm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="type">long</span> <span class="title">long</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MLong res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MLong <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>*=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>+=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>-=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>/=(MLong rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>*(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>+(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>/(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MLong</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MLong &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> MLong&lt;<span class="number">0LL</span>&gt;::Mod = (<span class="type">long</span> <span class="type">long</span>)(<span class="number">1E18</span>) + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">int</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>*=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="number">1LL</span> * x * rhs.x % <span class="built_in">getMod</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>+=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>-=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>/=(MInt rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MInt &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int</span> MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> V, <span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="built_in">MInt</span>&lt;P&gt;(V).<span class="built_in">inv</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>;<span class="comment">//模数</span></span><br><span class="line"><span class="keyword">using</span> Z = MInt&lt;P&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, d;</span><br><span class="line">Z dp[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= d; i++) &#123;</span><br><span class="line">        dp[m][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z p1 = k / (Z)n, p2 = <span class="number">1</span> - p1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = d - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == d - <span class="number">1</span>) dp[i][j] = dp[i + <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i][j] = (dp[i + <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>) * p1 + dp[i + <span class="number">1</span>][j + <span class="number">1</span>] * p2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; dp[<span class="number">0</span>][<span class="number">0</span>] * n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率与期望 </tag>
            
            <tag> 期望dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第一场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hide-And-Seek-Game"><a href="#Hide-And-Seek-Game" class="headerlink" title="Hide-And-Seek Game"></a>Hide-And-Seek Game</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个树，m组询问，每次询问给定四个数<script type="math/tex">S\_a,T\_a,S\_b,T\_b</script>，Serenade从<script type="math/tex">S\_a</script>开始走到<script type="math/tex">T\_a</script>，再从<script type="math/tex">T\_a</script>开始走到<script type="math/tex">S\_a</script>，如此循环往复。Rhapsody同时从<script type="math/tex">S\_b</script>开始走到<script type="math/tex">T\_b</script>，再从<script type="math/tex">T\_b</script>开始走到<script type="math/tex">S\_b</script>，如此循环往复。输出他们第一次相遇的结点，若永远不会相遇则输出<script type="math/tex">-1</script></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先找出从<script type="math/tex">S\_a</script>到<script type="math/tex">T\_a</script>的路径与<script type="math/tex">S\_b</script>到<script type="math/tex">T\_b</script>路径相交的结点，分别表示Serenade和Rhapsody到这些结点的时间。<br>如<script type="math/tex">S\_a</script>到<script type="math/tex">T\_a</script>的路径中有一点u，则<script type="math/tex">t\_{u1}=dist(S\_a,u)+k\_1  \times 2dist(S\_a,T\_a)</script>（从<script type="math/tex">S\_a</script>向<script type="math/tex">T\_a</script>方向经过该点）或<script type="math/tex">t\_{u2}=2\times dist(S\_a,T\_a)-dist(S\_a,u)+k\_2\times 2dist(S\_a,T\_a)</script>（从<script type="math/tex">T\_a</script>向<script type="math/tex">S\_a</script>方向经过该点）(<script type="math/tex">k\_1,k\_2∈Z^+</script>)</p><p>同理，<script type="math/tex">S\_b</script>到<script type="math/tex">T\_b</script>的路径中有一点v，则<script type="math/tex">t\_{v1}=dist(S\_b,v)+k\_3\times 2dist(S\_b,T\_b)</script>（从<script type="math/tex">S\_b</script>向<script type="math/tex">T\_b</script>方向经过该点）或<script type="math/tex">t\_{v2}=2\times dist(S\_b,T\_b)-dist(S\_b,v)+k\_4\times 2dist(S\_b,T\_b)</script>（从<script type="math/tex">T\_b</script>向<script type="math/tex">S\_b</script>方向经过该点）(<script type="math/tex">k\_3,k\_4∈Z^+</script>)</p><p>因此我们还要用<script type="math/tex">bfs</script>预处理出<script type="math/tex">u</script>到<script type="math/tex">S\_a</script>的距离和<script type="math/tex">S\_a</script>到<script type="math/tex">T\_a</script>的距离以及<script type="math/tex">u</script>到<script type="math/tex">S\_b</script>的距离和<script type="math/tex">S\_b</script>到<script type="math/tex">T\_b</script>的距离</p><p>令两人在<script type="math/tex">u,v</script>相遇，则有四种可能：</p><script type="math/tex; mode=display">t\_{u1}=t\_{v1} $$或$$t\_{u2}=t\_{v1} $$或$$t\_{u1}=t\_{v2} $$或$$t\_{u2}=t\_{v2}</script><p>每个方程都可以转化为<script type="math/tex">a\times x+b\times y=c</script>的形式，找到每组解的最小非负整数解<script type="math/tex">k\_x,k\_y</script>或返回解不存在</p><p>我们取其中一种情况：</p><script type="math/tex; mode=display">t\_{u1}=t\_{v1} \Rightarrow dist(S\_a,u)+k\_1\times 2dist(S\_a,T\_a)=dist(S\_b,v)+k\_3\times 2dist(S\_b,T\_b)</script><script type="math/tex; mode=display">\Rightarrow 2dist(S\_a,T\_a)\times k\_1+(-2dist(S\_b,T\_b))\times k\_3=dist(S\_b,v)-dist(S\_a,u)</script><p>即：<script type="math/tex">a=2dist(S\_a,T\_a),x=k_1,b=(-2dist(S\_b,T\_b)),y=k\_3,c=dist(S\_b,v)-dist(S\_a,u)</script></p><p>因为要求第一次相遇，<script type="math/tex">t</script>应该尽可能小，所以<script type="math/tex">k1,k2</script>应该尽可能小所以取最小非负整数解。</p><p>套入扩展欧几里得模板即可：</p><p><strong>求解更一般的方程<script type="math/tex">ax+by=c</script></strong></p><p>设<script type="math/tex">d=gcd(a,b)</script>，当且仅当<script type="math/tex">d|c</script>时有解即<script type="math/tex">c\bmod gcd(a,b)=0</script></p><p>通解=特解+齐次解</p><p><strong>特解：</strong></p><script type="math/tex; mode=display">x'=x\_0\times c/d,y'=y\_0\times c/d</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>;<span class="comment">//函数同上</span></span><br><span class="line"><span class="type">int</span> a,b,x0,y0,x,y;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(a,b,x0,y0);</span><br><span class="line">x1=x0\times c/d,y1=y0\times c/d;</span><br><span class="line"><span class="comment">//x0和y0为ax+by=gcd(a,b)的一组解</span></span><br><span class="line"><span class="comment">//x1和y1为ax+by=c的一组特解</span></span><br><span class="line">通解：</span><br><span class="line">x=x1+k\times b/d,y=y1-k\times a/d,k∈z</span><br></pre></td></tr></table></figure><p><strong>齐次解：</strong></p><p>即<script type="math/tex">ax+by=0</script>的解</p><p><strong>通解：</strong></p><p>通解=特解+齐次解</p><script type="math/tex; mode=display">x=x'+k\times b/d,y=y'-k\times a/d,k∈z</script><p>令<script type="math/tex">t=b/d(x=x'+kt)</script>,则对于x的最小非负整数解为<script type="math/tex">(x'\bmod t+t)\bmod t</script></p><p>令<script type="math/tex">t'=a/d(y=y'+kt)</script>,则对于y的最小非负整数解为<script type="math/tex">(y'\bmod t'+t')\bmod t'</script></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(n+m)</strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a1,<span class="type">int</span> b1,<span class="type">int</span> a2,<span class="type">int</span> b2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=b1,b=-b2,c=a2-a1,x0,y0;</span><br><span class="line">    <span class="type">int</span> d=__gcd(a,b);</span><br><span class="line">    <span class="keyword">if</span>(c%d!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1e9</span>;<span class="comment">//永远不会相遇</span></span><br><span class="line">    <span class="built_in">exgcd</span>(a,b,x0,y0);</span><br><span class="line">    <span class="type">int</span> x1=x0*c/d,y1=y0*c/d;</span><br><span class="line">    <span class="type">int</span> ta=<span class="built_in">abs</span>(b/d);</span><br><span class="line">    <span class="type">int</span> tb=<span class="built_in">abs</span>(a/d);</span><br><span class="line">    <span class="type">int</span> xp=(x1%ta+ta)%ta;<span class="comment">//xp为最小非负整数</span></span><br><span class="line">    <span class="keyword">return</span> a1+b1*xp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> sa,<span class="type">int</span> ta,<span class="type">int</span> sb,<span class="type">int</span> tb)</span></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">disa</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">disb</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">from</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">//disa[i],disb[i]分别存储从i到sa和sb的最短距离</span></span><br><span class="line">    <span class="comment">//from[i]表示从sa到ta或sb到tb的路径中i的前一个结点是谁</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">sta</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">stb</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">//sta[i],stb[i]分别表示i是否在sa到ta路径中,sb到tb路径中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从start开始bfs到end结束，处理出dis数组和from数组</span></span><br><span class="line">    <span class="keyword">auto</span> bfs=[&amp;](<span class="type">int</span> start,<span class="type">int</span> end,vector&lt;<span class="type">int</span>&gt;&amp;dis,vector&lt;<span class="type">int</span>&gt;&amp;from)&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(start);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="comment">// cout&lt;&lt;u&lt;&lt;endl;</span></span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">                <span class="keyword">if</span>(v==from[u]) <span class="keyword">continue</span>;</span><br><span class="line">                from[v]=u;<span class="comment">//这里的from数组表示从start到end的路径中i的前一个结点是谁</span></span><br><span class="line">                dis[v]=dis[u]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==end)&#123;</span><br><span class="line">                    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bfs</span>(sa,ta,disa,from);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将所有sa到ta路径经过的点存入patha中</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; patha;</span><br><span class="line">    <span class="type">int</span> cur=ta;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        sta[cur]=<span class="literal">true</span>;</span><br><span class="line">        patha.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">if</span>(cur==sa) <span class="keyword">break</span>;</span><br><span class="line">        cur=from[cur];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) from[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">bfs</span>(sb,tb,disb,from);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将从sb到tb路径上的点标记到stb数组</span></span><br><span class="line">    cur=tb;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        stb[cur]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur==sb) <span class="keyword">break</span>;</span><br><span class="line">        cur=from[cur];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dza=disa[ta],dzb=disb[tb];</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1e9</span>,ver;<span class="comment">//res记录最早相遇时间,ver记录相遇时间最早的顶点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:patha)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stb[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> da=disa[i],db=disb[i];</span><br><span class="line">        <span class="type">int</span> a1=da,b1=<span class="number">2</span>*dza,a2=<span class="number">2</span>*dza-da,b2=b1;</span><br><span class="line">        <span class="type">int</span> a3=db,b3=<span class="number">2</span>*dzb,a4=<span class="number">2</span>*dzb-db,b4=b3;</span><br><span class="line">        <span class="comment">//分别对t_&#123;u1&#125;=t_&#123;v1&#125;,t_&#123;u2&#125;=t_&#123;v1&#125;,t_&#123;u1&#125;=t_&#123;v2&#125;,t_&#123;u2&#125;=t_&#123;v2&#125;进行check找到最早相遇时间和对应的顶点</span></span><br><span class="line">        <span class="type">int</span> val=<span class="built_in">min</span>(&#123;<span class="built_in">check</span>(a1,b1,a3,b3),<span class="built_in">check</span>(a1,b1,a4,b4),<span class="built_in">check</span>(a2,b2,a3,b3),<span class="built_in">check</span>(a2,b2,a4,b4)&#125;);</span><br><span class="line">        <span class="keyword">if</span>(res&gt;val)&#123;</span><br><span class="line">            res=val;</span><br><span class="line">            ver=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">1e9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    edge.<span class="built_in">clear</span>();</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> sa,ta,sb,tb;</span><br><span class="line">        cin&gt;&gt;sa&gt;&gt;ta&gt;&gt;sb&gt;&gt;tb;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">query</span>(sa,ta,sb,tb)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="City-Upgrading"><a href="#City-Upgrading" class="headerlink" title="City Upgrading"></a>City Upgrading</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个树和树上每个结点放置路由器的成本，每个路由器可以覆盖当前结点及其相邻的节点，输出最低成本使所有结点被覆盖。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>dp状态机模型（状态转移只考虑它的节点）</p><script type="math/tex; mode=display">dp[i][0]$$表示结点i没有路由器且未被覆盖$$dp[i][1]$$表示结点i没有路由器且被覆盖$$dp[i][2]$$表示结点i有路由器且被覆盖考虑两种情况：叶子结点：$$dp[i][0]$$合法状态，成本为0由于只考虑子节点，$$dp[i][1]$$这种情况不存在，置为正无穷避免被取到$$dp[i][2]$$合法状态，成本为当前结点的成本。非叶子结点：$$dp[i][0]$$从它的所有没有路由器的子节点转移过来$$dp[i][1]$$从所有有路由器或没有路由器但子节点必须被覆盖的结点转移过来，且必须从至少一个有路由器的子节点转移过来$$dp[i][2]$$从子节点被覆盖的两种状态转移过来最后答案为根节点的被覆盖的两种情况的最小值。## 复杂度分析**时间复杂度：O(n)**## 参考代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e12</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> is_leaf=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        is_leaf=<span class="number">0</span>;<span class="comment">//如果它没有别的点dfs，说明是叶子结点，只有一个fa结点被continue了</span></span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(is_leaf)&#123;<span class="comment">//叶子结点</span></span><br><span class="line">        dp[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[u][<span class="number">1</span>]=INF;</span><br><span class="line">        dp[u][<span class="number">2</span>]=a[u];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//非叶子节点</span></span><br><span class="line">        <span class="type">int</span> tmp=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">            dp[u][<span class="number">0</span>]+=dp[v][<span class="number">1</span>];</span><br><span class="line">            dp[u][<span class="number">1</span>]+=<span class="built_in">min</span>(dp[v][<span class="number">1</span>],dp[v][<span class="number">2</span>]);</span><br><span class="line">            dp[u][<span class="number">2</span>]+=<span class="built_in">min</span>(&#123;dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>],dp[v][<span class="number">2</span>]&#125;);</span><br><span class="line">            tmp=<span class="built_in">min</span>(tmp,dp[v][<span class="number">2</span>]-dp[v][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u][<span class="number">2</span>]+=a[u];</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            dp[u][<span class="number">1</span>]+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    edge.<span class="built_in">clear</span>();</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">1</span>],dp[<span class="number">1</span>][<span class="number">2</span>])&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># Cyclically Isomorphic(模板题)## 题目大意给定n个长度为m的字符串，Q组询问两个字符串a,b是否可以循环同构，即是否存在一个k，使得a循环右移k次等于b。## 解题思路先求出每个字符串的最小表示法，再对于每个询问判断两个字符串的最小表示法是否相等即可。最小表示法即一个字符串循环右移得到的所有情况中字典序最小的字符串，可以用O(m)的时间复杂度求出每个字符串的最小表示法。## 复杂度分析**时间复杂度：$$O(n\times m+Q\times m)$$**## 参考代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">k</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求s的最小表示法</span></span><br><span class="line">    <span class="keyword">auto</span> get_min=[&amp;](string s)&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;m)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(k&lt;m&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">            <span class="keyword">if</span>(k==m) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i+k]&gt;s[j+k]) i+=k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j+=k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==j) j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">min</span>(i,j);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        s[i]+=s[i];</span><br><span class="line">        k[i]=<span class="built_in">get_min</span>(s[i]);</span><br><span class="line"><span class="comment">//是s[i]的最小表示法为从k[i]开始长度为m的一段</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//判断最小表示法是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(s[x].<span class="built_in">substr</span>(k[x],m)==s[y].<span class="built_in">substr</span>(k[y],m)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># Assertion## 题目大意将m个物品分成n组，Alice断言一定会有一组物品数量大于等于d，输出“Yes"或”No"表示它说的是否正确。## 解题思路考虑m个物品分成n组的最坏情况，即使得物品数量最多的组的数量最少。$$m/n=a \cdots \cdots d</script><p>每组相等情况下最多每组分到<script type="math/tex">a</script>个，剩下<script type="math/tex">d</script>个物品，最坏情况下每组一个，分完为止。</p><p>易得结论：当<script type="math/tex">n|m</script>时，最多一组物品数量为<script type="math/tex">m/n</script>；否则为<script type="math/tex">m/n+1</script>。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(1)</strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,d;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;d;</span><br><span class="line">    <span class="keyword">if</span>(m/n+(m%n!=<span class="number">0</span>)&gt;=d) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Easy-problem-I"><a href="#Easy-problem-I" class="headerlink" title="Easy problem I"></a>Easy problem I</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的序列，q次操作。</p><p>操作1：将l~r区间的每个数<script type="math/tex">a_i</script>都变成ai=|ai-xj|,<script type="math/tex">x_j \le x_{j+1}</script></p><p>操作2：询问l~r的区间和。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>用线段树维护。</p><p>修改操作中，将数列分为两块进行维护，一块是ai出现过小于xj情况的数，还有一块是一直都大于等于xj的数。</p><p>由于每次修改操作中的xj不递减，小于xj的数在接下来的操作中不会出现大于xj的情况，而原来大于等于xj的数接下来可能会小于xj，我们直接把他的相关信息修改成小的那块。</p><p>其中，当<script type="math/tex">a\_i\ge x</script>，<script type="math/tex">a[i]=a[i]-x</script>，直接懒标记维护即可。</p><p>当<script type="math/tex">ai< i</script>，<script type="math/tex">a[i]=x-a[i]</script>，即将<script type="math/tex">a[i]</script>取相反数加上x，叠加情况后发现如以下情况操作了j-1次时：</p><script type="math/tex; mode=display">x\_1-x\_2+...+x\_{j-1}-a\_i$$下一次再操作上xj，取反后加上xj，那么变成了。$$-x\_1+x_2-...-x\_{j-1}+x\_j+a\_i$$，可见ai不变，只是符号变了，因此可直接用懒标记叠加记录x，再用一个懒标记记录符号。## 复杂度分析**时间复杂度：$$O(nlogn+mlogn)$$**## 参考代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> cnt,minn,sum1,sum2;</span><br><span class="line">    <span class="comment">//cnt表示大数块的个数，minn表示大数块的最小值，sum1表示大数块的和，sum2表示小数块的和。</span></span><br><span class="line">    <span class="type">int</span> lazy1,lazy2,lazy3;</span><br><span class="line">    <span class="comment">//lazy1表示小数块的加标记，lazy2表示小数块的符号，lazy3大数块的加标记</span></span><br><span class="line">&#125;tr[N*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u,Node &amp;l,Node &amp;r)</span></span>&#123;</span><br><span class="line">    u.lazy1=u.lazy3=<span class="number">0</span>;</span><br><span class="line">    u.lazy2=<span class="number">1</span>;</span><br><span class="line">    u.minn=<span class="built_in">min</span>(l.minn,r.minn);</span><br><span class="line">    u.sum1=l.sum1+r.sum1;</span><br><span class="line">    u.sum2=l.sum2+r.sum2;</span><br><span class="line">    u.cnt=l.cnt+r.cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    Node &amp;rt=tr[u],&amp;l=tr[u&lt;&lt;<span class="number">1</span>],&amp;r=tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    l.lazy3+=rt.lazy3;</span><br><span class="line">    r.lazy3+=rt.lazy3;</span><br><span class="line"></span><br><span class="line">    l.sum1-=rt.lazy3*l.cnt;</span><br><span class="line">    r.sum1-=rt.lazy3*r.cnt;</span><br><span class="line"></span><br><span class="line">    l.minn-=rt.lazy3;</span><br><span class="line">    r.minn-=rt.lazy3;</span><br><span class="line"></span><br><span class="line">    l.lazy1=rt.lazy1+l.lazy1*rt.lazy2;</span><br><span class="line">    r.lazy1=rt.lazy1+r.lazy1*rt.lazy2;</span><br><span class="line"></span><br><span class="line">    l.lazy2*=rt.lazy2;</span><br><span class="line">    r.lazy2*=rt.lazy2;</span><br><span class="line"></span><br><span class="line">    l.sum2=rt.lazy1*(l.r-l.l+<span class="number">1</span>-l.cnt)+l.sum2*rt.lazy2;</span><br><span class="line">    r.sum2=rt.lazy1*(r.r-r.l+<span class="number">1</span>-r.cnt)+r.sum2*rt.lazy2;</span><br><span class="line"></span><br><span class="line">    rt.lazy1=rt.lazy3=<span class="number">0</span>;</span><br><span class="line">    rt.lazy2=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tr[u]=&#123;l,r,<span class="number">1</span>,a[l],a[l],<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[u]=&#123;l,r&#125;;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].cnt)&#123;<span class="comment">//大数块有数</span></span><br><span class="line">            <span class="keyword">if</span>(tr[u].l==tr[u].r)&#123;<span class="comment">//单点情况</span></span><br><span class="line">                <span class="keyword">if</span>(tr[u].sum1&lt;k)&#123;<span class="comment">//大数块移到小数块</span></span><br><span class="line">                    tr[u].sum2=k-tr[u].sum1;</span><br><span class="line">                    tr[u].sum1=tr[u].cnt=<span class="number">0</span>;</span><br><span class="line">                    tr[u].minn=<span class="number">1e18</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//大数块不需要移到小数块，直接减k即可</span></span><br><span class="line">                    tr[u].minn=tr[u].sum1=tr[u].sum1-k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//区间情况</span></span><br><span class="line">                <span class="keyword">if</span>(tr[u].minn&lt;k)&#123;</span><br><span class="line">                    <span class="built_in">pushdown</span>(u);</span><br><span class="line">                    <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">                    <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">                    <span class="built_in">pushup</span>(u);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tr[u].lazy3+=k;</span><br><span class="line">                    tr[u].minn-=k;</span><br><span class="line">                    tr[u].sum1-=k*tr[u].cnt;</span><br><span class="line">                    tr[u].lazy1=k-tr[u].lazy1;</span><br><span class="line">                    tr[u].lazy2*=<span class="number">-1</span>;</span><br><span class="line">                    tr[u].sum2=k*(tr[u].r-tr[u].l+<span class="number">1</span>-tr[u].cnt)-tr[u].sum2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//所有数都在小数块</span></span><br><span class="line">            tr[u].lazy1=k-tr[u].lazy1;</span><br><span class="line">            tr[u].lazy2*=<span class="number">-1</span>;</span><br><span class="line">            tr[u].sum2=k*(tr[u].r-tr[u].l+<span class="number">1</span>)-tr[u].sum2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> left=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">auto</span> right=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        Node res;</span><br><span class="line">        <span class="built_in">pushup</span>(res,left,right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> l,r,x;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> l,r;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            Node ans=<span class="built_in">query</span>(<span class="number">1</span>,l,r);</span><br><span class="line">            cout&lt;&lt;ans.sum1+ans.sum2&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># Play on Tree## 题目大意给定一个树，两人轮流操作，每次可以选择删除一个以任意点为根的子树，若树根随机，求先手获胜概率。## 解题思路定义一个树的SG值为所有子节点的sg值+1的异或和。这里简单说明一下原因：当只有一个点时，先手必败，sg值为0；当只有两个点相连时，sg值为1；显然，当形成一条有n个点的链时，sg值为结点数量-1.类似NIM游戏一堆石头取任意数量石头取走最后一个石头的人输。当一棵树为很多条链挂在根节点上，这棵树的sg值就是所有链条的sg值的异或和。也就是$$sg[u]=(sg[son1]+1)\oplus (sg[son2]+1\oplus \ldots)</script><p>这里我们先规定根节点为1，然后用换根来O（1）改变结点。我们先求出每棵子树的sg值记作fs[u],因为要求以所有树为根的sg值，所以为了实现换根，我们需要再求出每个结点父亲方向上的sg值记作ff[u]。</p><p>易得：<script type="math/tex">ff[u]=fs[fa]\oplus (fs[u]+1)\oplus (ff[fa]+1)</script></p><p>这里<script type="math/tex">ff[1]</script>要设置为-1，因为1没有父亲，根据上面解释，有一个点时sg值为0，这里用-1表示没有点。</p><p>求完后先计算1，然后换根每个点的sg值累加答案。</p><p>概率就是获胜点数/总点数</p><p>时间复杂度线性</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> ff[N],fs[N];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">i64 <span class="title">qpow</span><span class="params">(i64 a, <span class="type">int</span> k, <span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    i64 res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    fs[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        fs[u]^=fs[v]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="number">1</span>) ff[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> ff[u]=fs[fa]^(fs[u]+<span class="number">1</span>)^(ff[fa]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    edge.<span class="built_in">clear</span>();</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        edge[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        edge[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//求fs</span></span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//求ff</span></span><br><span class="line">    i64 ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(fs[<span class="number">1</span>]) ans++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fs[i]^(ff[i]+<span class="number">1</span>)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="function">ans * <span class="title">qpow</span><span class="params">(n, mod - <span class="number">2</span>, mod)</span> % mod &lt;&lt; &#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第七场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%83%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%83%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Random-Nim-Game"><a href="#Random-Nim-Game" class="headerlink" title="Random Nim Game"></a>Random Nim Game</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有n堆石头，每堆有<script type="math/tex">a_i</script>个石头，每次可以选择一堆移除随机数量石头，拿走最后一个石头的人获胜，问先手的获胜概率。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>当每堆都只有1个石头时，情况固定每个人都只会拿一个，因此可以确定谁必胜，即偶数堆后手胜，奇数堆先手胜。</p><p>反之，因为每个人拿的数量完全随机，对于超过1个石头的堆50%概率分别为先手拿走或后手拿走，最后获胜概率也是50%</p><p>时间复杂度：O（1）</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">        cout&lt;&lt;(cnt%<span class="number">2</span>!=<span class="number">0</span>?<span class="string">&quot;1&quot;</span>:<span class="string">&quot;0&quot;</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">499122177</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Medians-Strike-Back"><a href="#Medians-Strike-Back" class="headerlink" title="Medians Strike Back"></a>Medians Strike Back</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>定义一个长度为n的序列的中位数：</p><p>当n为奇数时，中位数是升序排列最中间的数；当n为偶数时，中位数是升序排列最中间的两个数中出现次数多的那个，若出现次数相同，则是较小的那个。</p><p>定义一个序列的shikness是这个序列的中位数的出现次数。</p><p>定义一个序列的nitness是这个序列所有连续子序列上的最大shikness。</p><p>你需要构造一个长度为n的序列使得每个数在1~3范围内，使得nitness最小，输出最小的nitness</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题我先尝试打表找规律，用了dfs暴力枚举序列每个数的三种情况别求每个情况的nitness取最小，发现n=1~3时答案为1，n=4~10时答案为2，n=11时答案为3，后面就因为时间复杂度太高跑不出结果，但打表的作用不止于此，我还找了每种情况nitness最小的构造来帮助我自己构造。输出发现，n=10的时候最优的情况有两种，1313221313和3131223131。于是我就顺着这个思路想，为什么这样可以最优，因为一段连续子序列中1和3的数量之差一定小于等于1，而当1和3数量很大时，只需要两个2就可以使这个序列的中位数不会取到1或3。例如，它的子序列131322131，排列后为111122333，中位数一定使2，nitness即2的数量，因此答案为2时，我只要让中间放两个2，左右两边封顶分别两个1和两个2交错排列，即可构造可以使得数量最大化。</p><p>考虑答案为3的时候怎么构造出最大长度，我们可以这样构造131313221313132，因为这时候答案为3，我们只能放3个2，必然有个2多出来，只能算作单独的一个贡献，而每个1313可以变成131313，与上述思想类似，如果跨越两个2构成的子序列得到的中位数一定为2数量不超过3，如果不跨越2，那么也最多为3。</p><p>再考虑答案为4的时候，这时候2可以有4个，那么我们可以在答案的2的基础上往两边扩展（当然也可以说是从答案为3的基础上），那么就可以从1313221313（答案为2）变成1313131322131313132213131313（答案为4），同样根据上面的思想这样可以使贡献最大化。</p><p>我这里推出了每个答案对应的最大n，再根据二分求出答案（当然也可以从1开始递推，因为赛时第一时间想到二分去找所有没有用递推了，可能递推更加清晰）</p><p>答案为k时，若k为偶数时，它能到的最大<script type="math/tex">n</script>为<script type="math/tex">k\times k+3\times x</script></p><p>奇数时就是上一个偶数状态加上2*((l-2)/2+1)+1 <script type="math/tex">2\times (\lfloor(l-2)/2\rfloor+1)</script></p><p><strong>时间复杂度：<script type="math/tex">O(logn)</script></strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x*x+<span class="number">3</span>*x&gt;=n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x+<span class="number">3</span>*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1e6</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l%<span class="number">2</span>==<span class="number">1</span>) l++;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(l<span class="number">-2</span>)+<span class="number">2</span>*((l<span class="number">-2</span>)/<span class="number">2</span>+<span class="number">1</span>)+<span class="number">1</span>&gt;=n)&#123;</span><br><span class="line">        l--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Three-Operations"><a href="#Three-Operations" class="headerlink" title="Three Operations"></a>Three Operations</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数<script type="math/tex">x,a,b</script>，每次可以进行下面三个操作中的一个，</p><p>①<script type="math/tex">x=x-1</script></p><p>②<script type="math/tex">x=\lfloor (x+a)/2\rfloor</script></p><p>③<script type="math/tex">x=\lfloor \sqrt{x+b}\rfloor</script></p><p>求把x变成0的最小操作次数。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>每次把<script type="math/tex">x</script>分别进行三次操作取操作后x最小的那个，并记录cnt，这里可以卡时，执行到一定次数后我们直接退出剩下全部操作1即加上此时的数。因为每个数据最多有<script type="math/tex">2\times 10^4</script>个测试用例，我们可以每次在<script type="math/tex">10^3</script>执行左右停下来。</p><p>仔细思考一下也会发现做法确实可行，因为<script type="math/tex">10^3</script>次足够把②和③操作都用到不能再用了</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,a,b;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> t=x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        t=<span class="built_in">min</span>(&#123;t<span class="number">-1</span>,(<span class="type">int</span>)(t+a)/<span class="number">2</span>,(<span class="type">int</span>)<span class="built_in">sqrt</span>(t+b)&#125;);</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">1e3</span>+<span class="number">10</span>)&#123;</span><br><span class="line">            ans+=t;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Minimal-and-Maximal-XOR-Sum"><a href="#Minimal-and-Maximal-XOR-Sum" class="headerlink" title="Minimal and Maximal XOR Sum"></a>Minimal and Maximal XOR Sum</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的排列，你每次可以选择一段区间l~r进行翻转，代价是<script type="math/tex">r-l+1</script>，求进行若干次翻转后得到递增序列的代价的异或和最小值和最大值。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>对于最小值，我们只需要两两交换，这样在异或中只会改变从低到高的第二个位且能达到交换效果，而每次交换相邻两个数能实现有序的奇偶性与逆序对数量的奇偶性相同。根据异或的性质，若偶数个2的异或和，则输出0，反之输出2。</p><p>对于最大值，我们可以先使每个位都到达1，直到那个位需要的翻转范围大于区间大小，那么任取区间长度分别为<script type="math/tex">1,2,4,...,2^k</script>，其中k为满足<script type="math/tex">2^k\le n</script>的最大整数。翻转后与最小值思路类似，就算丢失二进制数中的1也应该尽量丢失低位，那么能交换且丢失尽量的的位应该也是从低到高第2位，因此同理再求翻转后的逆序对数量的奇偶性。</p><p>这里翻转可以O(<script type="math/tex">2^k</script>)实现，我们可以以一个点为轴，然后从左到右遍历，考虑这个点被翻转的奇偶性确定这个数是否要与轴对称的位置交换。</p><p>时间复杂度：<script type="math/tex">O(nlogn)</script></p><p>（归并排序求逆序对的时间复杂度）</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt; mp;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;q,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    LL res=<span class="built_in">merge_sort</span>(q,l,mid)+<span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="type">int</span> i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmp[k++]=q[j++];</span><br><span class="line">            res+=mid-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++) q[l+i]=tmp[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> minans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c=a;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt1=<span class="built_in">merge_sort</span>(c,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;tmp)&lt;=n)&#123;</span><br><span class="line">        maxans+=(<span class="number">1</span>&lt;&lt;tmp);</span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tans=maxans;</span><br><span class="line">    tmp--;</span><br><span class="line">    <span class="type">int</span> t=(<span class="number">1</span>&lt;&lt;tmp);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b=a;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[t/<span class="number">2</span>-i+<span class="number">1</span>]) f=!f;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)<span class="built_in">swap</span>(b[i],b[t-i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cnt2+=<span class="built_in">abs</span>(b[i]-i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; d=b;</span><br><span class="line">    <span class="type">int</span> cnttt=<span class="built_in">merge_sort</span>(d,<span class="number">1</span>,n);</span><br><span class="line">    maxans^=((cnttt%<span class="number">2</span>!=<span class="number">0</span>?<span class="number">2</span>:<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(cnt1%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">2</span>)&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;maxans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&gt;(<span class="type">int</span>)<span class="number">6e5</span>+<span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        mp[(<span class="number">1</span>&lt;&lt;i)]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第三场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chaos-Begin"><a href="#Chaos-Begin" class="headerlink" title="Chaos Begin"></a>Chaos Begin</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>二维平面上有两组点，每组有n个点<script type="math/tex">a_i,b_i</script>，其中<script type="math/tex">b_i=a_i+(\Delta x,\Delta y)</script></p><p>但现在不知道点属于a,b哪个集合，需要你找出所有可能的<script type="math/tex">(\Delta x,\Delta y)</script></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先对所有2n个点排序，那么<script type="math/tex">(\Delta x,\Delta y)</script>一定包含于最小的两个点开始与所有点做差的所有情况中。</p><p>由于点对完全随机，所以可以直接这样遍历上面所有情况找到符合的作为答案。时间复杂度会被降到nlogn（因为有不符合直接剪纸处理）</p><p>假设<script type="math/tex">(\Delta x,\Delta y)</script>为可能的答案，我们只需要先把所有点存入map计数，然后从小到大扫一遍，如果这个点的数量大于等于0，那么就找是否有这个点加上<script type="math/tex">(\Delta x,\Delta y)</script>后还有跟它匹配的点。没有则直接剪纸，有则接着往后找。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    n *= <span class="number">2</span>;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">    map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:p) f[v]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> dx = p[i].first - p[<span class="number">0</span>].first, dy = p[i].second - p[<span class="number">0</span>].second;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; tmp;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[p[j]])&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[&#123;p[j].first + dx, p[j].second + dy&#125;])&#123;</span><br><span class="line">                    f[&#123;p[j].first + dx, p[j].second + dy&#125;]--;</span><br><span class="line">                    f[p[j]]--;</span><br><span class="line">                    tmp.<span class="built_in">push_back</span>(&#123;p[j].first + dx, p[j].second + dy&#125;);</span><br><span class="line">                    tmp.<span class="built_in">push_back</span>(p[j]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;dx, dy&#125;);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;-dx,-dy&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:tmp) f[it]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    ans.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>()), ans.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:ans)&#123;</span><br><span class="line">        cout &lt;&lt; it.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Out-of-Control"><a href="#Out-of-Control" class="headerlink" title="Out of Control"></a>Out of Control</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个时间戳，最初栈为空，当接受一个时间戳信号会附加在堆栈末尾，若这个时间戳比之前的末尾小，那么这个时间戳会变成上一个时间戳。但由于网失控，使得可能会以任意顺序接收请求且可能错过某些请求，现在问你堆栈数量分别为1~n时的可能情况的数量。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>先进行离散化处理记录每个数的数量和前缀数量。</p><p>下面的j结尾都指的是离散化后的值。</p><p>定义<script type="math/tex">dp[i][j]</script>为堆栈数量为i的情况中，以1~j为堆栈结尾的方案数。</p><p>那么它一定能从<script type="math/tex">dp[i-1][j-1]</script>转移过来，因为j从1遍历到tot（离散化后的总数），那么1~j-1结尾的堆栈数量为i-1的数列后末尾都可以加上j变成堆栈数量为i的以j结尾的数列。</p><p>而i-1个堆栈数量以j结尾的数加上一个小于等于j的数，判断前j个数数量是否大于等于i即能不能找到多余出来的小于等于j的数，如果能就从<script type="math/tex">dp[i-1][j]</script>转移过来。</p><p>剩下的就是从<script type="math/tex">dp[i][j-1]</script>转移过来。</p><p>最后的答案就是<script type="math/tex">dp[i][tot],1\le i \le n</script></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O（n^2)</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        mp[a[i]]++;<span class="comment">//离散化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;<span class="comment">//离散化</span></span><br><span class="line">        b[++tot]=it.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        sum[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[<span class="number">1</span>][i]+=dp[<span class="number">1</span>][i<span class="number">-1</span>]+(i&lt;=tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)&#123;</span><br><span class="line">            dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">            <span class="keyword">if</span>(sum[j]&gt;=i)dp[i][j]=((dp[i][j]+dp[i<span class="number">-1</span>][j]-dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod+mod)%mod;</span><br><span class="line">            dp[i][j]=(dp[i][j]+dp[i][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;(dp[i][tot]%mod+mod)%mod&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-bit-Zoom"><a href="#8-bit-Zoom" class="headerlink" title="8-bit Zoom"></a>8-bit Zoom</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个图片，由n*n个字符组成，告诉你缩放比率Z，若能缩放输出缩放后的图片，若不能缩放输出error。</p><p>当100|n*Z不满足时，或缩放前无法确定某些像素的颜色，图片不能被缩放。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>dfs模拟即可。判断一下不能整除或者缩放前像素有多个颜色的清理。</p><p>当Z=100时，图片不变；当Z=125时，每<script type="math/tex">4\times4</script>个相同的颜色变成<script type="math/tex">5\times5</script>个相同的颜色；当Z=150时，每<script type="math/tex">2\times2</script>个相同的颜色变成<script type="math/tex">3\times3</script>个相同的颜色；当Z=175时，每<script type="math/tex">4\times4</script>个相同的颜色变成<script type="math/tex">7\times7</script>个相同的颜色；当Z=200时，每<script type="math/tex">1\times1</script>个相同的颜色变成<script type="math/tex">1\times1</script>个相同的颜色.</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n^2)</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="type">char</span> res[N][N];</span><br><span class="line"><span class="type">bool</span> suc;</span><br><span class="line"><span class="type">int</span> ed;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp1=&#123;&#123;<span class="number">100</span>,<span class="number">1</span>&#125;,&#123;<span class="number">125</span>,<span class="number">4</span>&#125;,&#123;<span class="number">150</span>,<span class="number">2</span>&#125;,&#123;<span class="number">175</span>,<span class="number">4</span>&#125;,&#123;<span class="number">200</span>,<span class="number">1</span>&#125;&#125;,mp2=&#123;&#123;<span class="number">100</span>,<span class="number">1</span>&#125;,&#123;<span class="number">125</span>,<span class="number">5</span>&#125;,&#123;<span class="number">150</span>,<span class="number">3</span>&#125;,&#123;<span class="number">175</span>,<span class="number">7</span>&#125;,&#123;<span class="number">200</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> n,Z;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> Z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(suc==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(y1&gt;n)&#123;</span><br><span class="line">        ed=<span class="built_in">max</span>(x2,y2);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x1&gt;n)&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,y1+mp1[Z],<span class="number">1</span>,y2+mp2[Z],Z);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x1+mp1[Z],y1,x2+mp2[Z],y2,Z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x1;i&lt;=x1+mp1[Z]<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=y1;j&lt;=y1+mp1[Z]<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]!=s[x1][y1])&#123;</span><br><span class="line">                suc=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x2;i&lt;=x2+mp2[Z]<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=y2;j&lt;=y2+mp2[Z]<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            res[i][j]=s[x1][y1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;Z;</span><br><span class="line">    suc=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n*Z%<span class="number">100</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,Z);</span><br><span class="line">    <span class="keyword">if</span>(suc==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ed<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=ed<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            cout&lt;&lt;res[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Noblesse-Code"><a href="#Noblesse-Code" class="headerlink" title="Noblesse Code"></a>Noblesse Code</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个(a[i],b[i])，接着有q个询问，每次给你(A[i],B[i])，你可以进行任意数量操作，每次操作可以使(A[i],B[i])变成(A[i]+B[i],B[i])或(A[i],A[i]+B[i]),对于每个询问，在n个二元组a，b中，求出有多少个可以通过(A[i],B[i])变换得到。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先我们会发现，（A[i],B[i]）向上操作是不固定的，每层会以指数级情况增加，所以我们考虑（a[i],b[i]）向下操作，当a[i]&gt;b[i]时，a[i]=a[i]-b[i];当a[i]&lt;b[i]时，b[i]=b[i]-a[i]，若统计每个(a[i],b[i])所有出现的情况复杂度太高，如（1,1e18)每次只会向下减1，复杂度O(1e18)。</p><p>此时我们考虑优化，观察到例如a[i]&lt;b[i]的情况中，(a[i],b[i])向下减，最终b[i]会变成a[i]%b[i]，令这种情况称为拐点，那么我们可以记录每个拐点的情况mp[a[i],a[i]%b[i]].push_back(a[i])；然后对于询问(A[i],B[i])，分情况二分mp即可。</p><p>例如：(2,9)-&gt;(2,7)-&gt;(2,5)-&gt;(2,3)-&gt;(2,1)-&gt;(1,1)此时(2,1)就是一个拐点，mp[{2,1}].push_back(9);</p><p>当询问出现(2,5)时二分mp[{2,5%2}]这个vector中大于5的数，为什么这样可以呢？</p><p>因为这里就取模2就体现了能到{2,1}的位置一定是从1向上递增2的顺序上去或者从2每次递增1的顺序上去。</p><p>那么mp[{2,5%2}]这个容器中大于5的数有两种情况，一种是mp[{2,1}]中(2+k,1)左边递减下来到拐点记录但这种情况不存在，因为(2+k)%1最终的数必然小于1，另一种(2,1+2k)右边递减下来到拐点被记录，这两种情况只有一种情况存在，而询问（2,5）时，我们只需二分它下来的拐点（2，1）的vector容器就可以看有多少个(2,5),(2,7),(2,9)..来<script type="math/tex">O(log^2n)</script>计算结果。</p><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：<script type="math/tex">O(qlog^2n)</script></p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,q;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    map&lt;PII,vector&lt;<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>&amp;&amp;y&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=y)&#123;</span><br><span class="line">                <span class="type">int</span> tx=x%y;</span><br><span class="line">                mp[&#123;tx,y&#125;].<span class="built_in">push_back</span>(x);</span><br><span class="line">                x=tx;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> ty=y%x;</span><br><span class="line">                mp[&#123;x,ty&#125;].<span class="built_in">push_back</span>(y);</span><br><span class="line">                y=ty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:mp)&#123;</span><br><span class="line">        <span class="built_in">sort</span>(it.second.<span class="built_in">begin</span>(),it.second.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> calc=[&amp;](<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)&#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;v=mp[&#123;x,y&#125;];</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)<span class="built_in">distance</span>(<span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),c),v.<span class="built_in">end</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) ans=<span class="built_in">calc</span>(x%y,y,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;y) ans=<span class="built_in">calc</span>(x,y%x,y);</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="built_in">calc</span>(<span class="number">0</span>,y,y)+<span class="built_in">calc</span>(x,<span class="number">0</span>,x);</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第九场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="List-Reshape"><a href="#List-Reshape" class="headerlink" title="List Reshape"></a>List Reshape</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>将一组数分成若干组按特定格式输出。</p><p>如输入：</p><p>4 </p><p>[3, 1, 4, 1, 5, 9, 2, 6] </p><p>2 4 </p><p>[998, 244, 3, 5, 3] </p><p>5 1</p><p>[1, 1, 2, 3, 5, 8, 13, 21, 34] </p><p>1 9</p><p>[2, 3, 5, 7, 11, 13, 17, 19, 23] </p><p>3 3</p><p>输出：<br>[[3, 1, 4, 1], [5, 9, 2, 6]]</p><p>[[998], [244], [3], [5], [3]]</p><p>[[1, 1, 2, 3, 5, 8, 13, 21, 34]]</p><p>[[2, 3, 5], [7, 11, 13], [17, 19, 23]]</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先读入整行到字符串，然后取出里面所有数，模拟按照题意格式输出即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="type">int</span> m=s.<span class="built_in">size</span>();</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">-1</span>)&#123;</span><br><span class="line">                x=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x=x*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line">                a[n++]=x;</span><br><span class="line">                x=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;i+y;j++)&#123;</span><br><span class="line">            cout&lt;&lt;a[j];</span><br><span class="line">            <span class="keyword">if</span>(j!=i+y<span class="number">-1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Shortest-path"><a href="#Shortest-path" class="headerlink" title="Shortest path"></a>Shortest path</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个数n，初始值为1，每次可以对他进行 乘2/乘3/加1 三种操作之一，问最小操作次数。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于从1到n的情况数比n到1多的多，所以我们考虑从n向1搜索，但肯定不能完全暴力。</p><p>可以发现，除以2或除以3的操作比减1进行的贡献要优的多。我们应考虑将减1作为该数不能整除2或整除3时来使用这一操作。</p><p>这里采用记忆化搜索，能有效降低时间复杂度。</p><p>时间复杂度：<script type="math/tex">O(log^2n)</script></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(mp[n]) <span class="keyword">return</span> mp[n];</span><br><span class="line">    <span class="type">int</span> res1=<span class="number">2e18</span>,res2=<span class="number">2e18</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        res1=n%<span class="number">2</span>+<span class="number">1</span>+<span class="built_in">dfs</span>(n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">        res2=n%<span class="number">3</span>+<span class="number">1</span>+<span class="built_in">dfs</span>(n/<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="built_in">min</span>(res1,res2);</span><br><span class="line">    <span class="keyword">return</span> mp[n]=res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=<span class="number">1e18</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">dfs</span>(n)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第二场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Alice-Game"><a href="#Alice-Game" class="headerlink" title="Alice Game"></a>Alice Game</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定排成一排的n个怪物，每个回合，玩家可以选择两中操作之一：</p><ul><li>消灭一个大小小于或等于k的连续怪物序列，注意你必须消灭你选择的连续怪物序列中的所有怪物。</li><li>消灭K个怪物，剩下的怪物按原序列分成两个非空序列。这两个序列将不被视为连续序列。</li></ul><p>Alice先手，Bob后手，轮流操作，问Alice能否获胜。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑SG函数打表找规律。</p><p>对于怪物数量x小于等于k时，直接转移到0，否则若怪物数量减去k大于等于2，即删去中间连续k个数后可以分成两个非空序列，枚举每个可以到达的状态，即枚举左右剩下的数量求sg值，当一个状态被分成两组时，这个状态的sg值为这两组状态的异或和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> k,n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line"></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x-k&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x-k<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            S.<span class="built_in">insert</span>(<span class="built_in">sg</span>(i)^<span class="built_in">sg</span>(x-k-i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i))&#123;</span><br><span class="line">            <span class="keyword">return</span> f[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        k=i;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">sg</span>(j))&#123;</span><br><span class="line">                cout&lt;&lt;j&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序中我们输出sg为0的情况，即先手必败情况。</p><p>0 3 13 23 33 43 53 63 73 83 93<br>0 4 18 32 46 60 74 88<br>0 5 23 41 59 77 95<br>0 6 28 50 72 94<br>0 7 33 59 85<br>0 8 38 68 98<br>0 9 43 77<br>0 10 48 86<br>0 11 53 95 </p><p>取前面几组数可以看出规律，从上到下为k从2增大的情况，从左到右为n从0增大的情况。</p><p>易得当<script type="math/tex">n\mod (4\times k-2)=k+1</script>时，先手必败输出Bob，剩下输出Alice。</p><p><strong>时间复杂度：O(1)</strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> k,n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line"></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x-k&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x-k<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            S.<span class="built_in">insert</span>(<span class="built_in">sg</span>(i)^<span class="built_in">sg</span>(x-k-i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i))&#123;</span><br><span class="line">            <span class="keyword">return</span> f[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// for(int i=2;i&lt;=100;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     k=i;</span></span><br><span class="line">    <span class="comment">//     memset(f,-1,sizeof f);</span></span><br><span class="line">    <span class="comment">//     for(int j=0;j&lt;=100;j++)&#123;</span></span><br><span class="line">    <span class="comment">//         if(!sg(j))&#123;</span></span><br><span class="line">    <span class="comment">//             cout&lt;&lt;j&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n%(<span class="number">4</span>*k+<span class="number">2</span>)==k+<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Binary-Number"><a href="#Binary-Number" class="headerlink" title="Binary Number"></a>Binary Number</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为<script type="math/tex">n</script>的二进制数，你必须进行确定的<script type="math/tex">k</script>次操作，每次操作选择一对数<script type="math/tex">l,r</script>，翻转<script type="math/tex">s_l,s_{l+1},\cdots,s_r</script>，输出k次操作后最大的二进制数。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>贪心，每次从左往右选择一段连续的<script type="math/tex">0</script>变成<script type="math/tex">1</script>。</p><p>但由于操作的是确定的k次操作，可能每一位全部变成<script type="math/tex">1</script>了但<script type="math/tex">k</script>不等于0。</p><p>记剩下的<script type="math/tex">k</script>为<script type="math/tex">k’</script></p><ul><li>当<script type="math/tex">k'</script>为偶数时，我们可以每次选择一个相同的区间，两次操作抵消，最终仍然全是<script type="math/tex">1</script>。</li></ul><p>当<script type="math/tex">k'</script>为奇数时，我们应该想办法进行一次操作使得原数不变而转化为偶数的情况。</p><ul><li>k’为偶数</li><li>s中既有奇数又有偶数</li><li>s中有连续个0</li><li>s中有连续个1且k不为1</li></ul><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(n)</strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">bool</span> flag0=<span class="number">0</span>,flag1=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag2=<span class="number">0</span>,flag3=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//flag0表示s中有0，flag1表示s中有1</span></span><br><span class="line">    <span class="comment">//flag2表示s中有连续个0,flag3表示s中有连续个1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//先从左往右贪心</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) flag0=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>) flag1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;i+<span class="number">1</span>&lt;n&amp;&amp;s[i+<span class="number">1</span>]==<span class="string">&#x27;1&#x27;</span>) flag3=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;k)&#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n&amp;&amp;s[j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                s[j]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>) flag2=<span class="number">1</span>;</span><br><span class="line">            i=j<span class="number">-1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断剩下的k&#x27;是否可以让原字符串不变</span></span><br><span class="line">    <span class="comment">//有四种情况：k&#x27;为偶数;s中既有奇数又有偶数;s中有连续个0;s中有连续个1且k不为1</span></span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>||flag0&amp;&amp;flag1||flag2||flag3&amp;&amp;k&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        s[n<span class="number">-1</span>]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Card-Game"><a href="#Card-Game" class="headerlink" title="Card Game"></a>Card Game</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>规定一个牌堆按顺序递减放置时合法，现在给你一个数空位数n，需要你求出最大的数k使得初始状态在第一个空位按照<script type="math/tex">k,k-1,k-2,...,1</script>从上到下放置，要求你在放置合法的前提下将其全部移动到其它同一个任意空位中。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>模拟找规律，记<script type="math/tex">f[i]</script>为n等于i时的答案，<script type="math/tex">f[2]=1,f[3]=3,f[4]=7</script>猜测<script type="math/tex">f[i]=2^{n-1}-1</script>，快速幂求解答案，提交顺利通过。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度:<script type="math/tex">O(logn)</script></strong></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">qpow</span>(<span class="number">2</span>,n<span class="number">-1</span>,mod)<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-Problem"><a href="#String-Problem" class="headerlink" title="String Problem"></a>String Problem</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个字符串<script type="math/tex">S</script>，挑选<script type="math/tex">K</script>个不相交的回文非空子段<script type="math/tex">s_1,s_2,\ldots,s_k</script>且子段最多有一个字符，求<script type="math/tex">\sum_{i=1}^K len(s_i)-K</script>的最大值。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察到子段字符最多一个，所以每个子段只需考虑全为相同字符的情况。</p><p>显然，直接计算字符相同的最长连续子段贡献即可。</p><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(n)</strong></p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;s[j]==s[j<span class="number">-1</span>])&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        i=j<span class="number">-1</span>;</span><br><span class="line">        res+=cnt<span class="number">-1</span>;<span class="comment">//连续字符长度减去这个连续字符组成的数量1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="foreverlasting-and-fried-chicken"><a href="#foreverlasting-and-fried-chicken" class="headerlink" title="foreverlasting and fried-chicken"></a>foreverlasting and fried-chicken</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个n个结点m条边的图，问这个图有多少个如图所示的子图。</p><p><img src="http://acm.hdu.edu.cn/data/images/C1105-1003-1.png" alt="img"></p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，这是我们要求得子图，如下图所示，我们每次计算1所在位置的贡献</p><p><img src="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230720214340963.png" alt="image-20230720214340963"></p><p>如下图，要求u的贡献，我们令u和v共同连向cnt个结点，u的度为ind[u]，那么u的贡献可表示为：</p><script type="math/tex; mode=display">C_{cnt}^4 \times C_{ind[u]-4-(edge[u][v])}^2</script><p>如上图所示，1向上连的那两条边不能包括4,5,6,7,8,所以ind[u]要减4，如果u还连向了v要再减1。</p><p><img src="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230720214801583.png" alt="image-20230720214801583"></p><p>用bitset存储边进行优化，判断两个点是否同时连向共同的结点，直接用bitset与操作，然后用count函数统计1的个数即为两点共同连向同个结点的数量cnt。</p><h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：</strong><script type="math/tex">O(n*C_n^2/w)</script>(w为计算机位数)</p><p>约<script type="math/tex">7.8e6</script>不会超时</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// vector&lt;vector&lt;int&gt;&gt; edge;</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(ind,<span class="number">0</span>,(n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    bitset&lt;1002&gt; edge[<span class="number">1002</span>];</span><br><span class="line">    <span class="comment">//bitset存储边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        ind[u]++,ind[v]++;</span><br><span class="line">        <span class="comment">//记录每个点的度</span></span><br><span class="line">        edge[u][v]=<span class="number">1</span>;</span><br><span class="line">        edge[v][u]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;1002&gt; tmp;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            tmp=edge[i]&amp;edge[j];</span><br><span class="line">            <span class="type">int</span> cnt=tmp.<span class="built_in">count</span>();<span class="comment">//求出i,j两个结点共同连向点的数量</span></span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=<span class="number">4</span>&amp;&amp;(ind[i]<span class="number">-4</span>-edge[i][j]&gt;=<span class="number">2</span>||ind[j]<span class="number">-4</span>-edge[j][i]&gt;=<span class="number">2</span>))&#123;</span><br><span class="line">                res=(res+c[cnt][<span class="number">4</span>]*(c[ind[i]<span class="number">-4</span>-edge[i][j]][<span class="number">2</span>]+c[ind[j]<span class="number">-4</span>-edge[j][i]][<span class="number">2</span>])%mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//杨辉三角预处理组合数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!j) c[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j]=(c[i<span class="number">-1</span>][j<span class="number">-1</span>]+c[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SPY-finding-NPY"><a href="#SPY-finding-NPY" class="headerlink" title="SPY finding NPY"></a>SPY finding NPY</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数n，将形成一个随机全排列，你需要选择一个最小的k，使得最后获得的值最大的概率最大。</p><p>最后获得的数：对于任意排列，找到<script type="math/tex">[1,k]</script>中最大的数，然后从<script type="math/tex">[k+1,n]</script>向右找到第一个比前面找到的那个最大数大的数，如果没有则选择最后一个。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>显然我们要让找到最大的数即n。</p><p>当<script type="math/tex">k=0</script>时，最大的数应该在第一个位置上，概率<script type="math/tex">\frac1n</script></p><p>当<script type="math/tex">k\neq0</script>时，最大的数应该在<script type="math/tex">[k+1,n]</script>上，令最大数位置为<script type="math/tex">pos</script>，则<script type="math/tex">[k+1,pos-1]</script>应该都小于<script type="math/tex">[1,k]</script>的最大值。</p><p>第一个条件：最大数在<script type="math/tex">[k+1,n]</script>上，对于每个<script type="math/tex">i\in[k+1,n]</script>，概率都为<script type="math/tex">\frac1n</script>；</p><p>第二个条件：<script type="math/tex">i</script>前面的最大值都位于<script type="math/tex">[1,k]</script>，概率都为<script type="math/tex">\frac k{i-1}</script></p><p>（条件同时满足所以是相乘关系,而每种i的情况概率应该是相加）</p><p>总的概率<script type="math/tex">\frac1n\sum_{i=k+1}^n \frac k{i-1}</script></p><p>变形得到<script type="math/tex">\frac kn\sum_{i=k}^{n-1} \frac 1i</script></p><p>而<script type="math/tex">\sum_{i=k}^{n-1} \frac 1i</script>可以通过预处理<script type="math/tex">\frac1i</script>的前缀和获得</p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">1.0</span> / n;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)&#123;</span><br><span class="line">        <span class="type">double</span> d = (<span class="number">1.0</span> * k / n) * (a[n - <span class="number">1</span>] - a[k - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(d &gt; ans)&#123;</span><br><span class="line">            ans = d;</span><br><span class="line">            pos = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pos &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + <span class="number">1.0</span> / i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第五场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typhoon"><a href="#Typhoon" class="headerlink" title="Typhoon"></a>Typhoon</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>一个二维平面上，给你m个台风的坐标和n个避难所坐标，台风会从<script type="math/tex">(x_1,y_1)</script>到<script type="math/tex">(x_2,y_2)</script>…直到<script type="math/tex">(x_m,y_m)</script>，影响半径恒定为r的进行移动，问你每个避难所被台风影响到的最小的r。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>求每个避难所到每两个连续台风位置连成的线段的最小值即可。</p><p>直接套一个求点到线段的距离的板子。</p><p>时间复杂度：<script type="math/tex">O(nm)</script></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// #define x first</span></span><br><span class="line"><span class="comment">// #define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> x = <span class="number">0</span>, <span class="type">double</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123; &#125;</span><br><span class="line">&#125;p[N],P[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">double</span> x)</span>  <span class="comment">// 符号函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>  <span class="comment">// 比较函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> + (Point A, Point B) &#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x + B.x, A.y + B.y);&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span> - (Point A, Point B) &#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x - B.x, A.y - B.y);&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span> * (Point A, <span class="type">double</span> p) &#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x * p, A.y * p);&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span> / (Point A, <span class="type">double</span> p) &#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x / p, A.y / p);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_length</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a, a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - b.x * a.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">distance_to_line</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point v1 = b - a, v2 = p - a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(v1, v2) / <span class="built_in">get_length</span>(v1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">distance_to_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(a.x,b.x)==<span class="number">0</span>&amp;&amp;<span class="built_in">cmp</span>(a.y,b.y)==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(p - a);</span><br><span class="line">    Point v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v2)) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v3)) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">distance_to_line</span>(p, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;P[i].x&gt;&gt;P[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">1e18</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,<span class="built_in">distance_to_segment</span>(p[i],P[j],P[j+<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">4</span>)&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Touhou-Red-Red-Blue"><a href="#Touhou-Red-Red-Blue" class="headerlink" title="Touhou Red Red Blue"></a>Touhou Red Red Blue</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>你将依次获得n个带有R、G、B颜色的飞行物，每次你可以选择丢弃或者存储。</p><p>记该飞行物为U</p><p>当你决定存储时，如果袋子1是空的，则将U放进袋子1；若袋子1不空而袋子2是空的，则装进袋子2；</p><p>若没有袋子是空的，那么我们考虑两个袋子中的飞行物颜色和当前的飞行物颜色，若三种颜色不同，这三个飞盘消失，你将获得1分数，你的包1将出现一个你自己决定颜色的飞行物；如果三个颜色都不同，这三个飞行物都消失，你的包1和包2都分别出现一个你自己决定颜色的飞行物；否则你将丢弃包1中的飞行物，把包2的飞行物移到包1，然后把U存到包2。</p><p>问收到这n个飞行物后，你可以获得的最高积分是多少？</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>定义<script type="math/tex">dp[i][j][k]</script>为取完前i-1个飞行物，包1的颜色为j，包2的颜色为k的状态的最高积分。</p><p>其中j和k表示相同，0表示空，1表示R，2表示G，3表示B，4表示你可以自己选择的颜色，可以当成任意颜色来使用。</p><p>接下来考虑状态转移，考虑从当前状态往下一个状态转移。</p><p>首先，每个U都可以选择丢弃，直接转移到下一个状态即可。</p><p>若选择存储，则有以下情况：</p><p>（代码处直接循环i,j,k)</p><p>令当前即第i个得到的飞盘为cur。</p><p>包1为空时，装入包1，<script type="math/tex">dp[i][j][k]</script>转移到<script type="math/tex">dp[i+1][cur][j]</script></p><p>否则，若包2为空，装入包2，<script type="math/tex">dp[i][j][k]</script>转移到<script type="math/tex">dp[i+1][j][cur]</script></p><p>若都不为空，</p><p>判断<script type="math/tex">j,k,cur</script>三个量的关系：</p><p>若三个颜色可以相同，<script type="math/tex">dp[i][j][k]</script>转移到<script type="math/tex">dp[i+1][4][0]</script>，注意这里获得了1分数</p><p>若三个颜色可以都不同，<script type="math/tex">dp[i][j][k]</script>转移到<script type="math/tex">dp[i+1][4][4]</script></p><p>否则，<script type="math/tex">dp[i][j][k]</script>转移到<script type="math/tex">dp[i+1][k][cur]</script></p><p>最后的答案就是<script type="math/tex">i=n+1</script>的所有状态中取最大值</p><p>（取完前n个飞行物的状态）</p><p>时间复杂度：<script type="math/tex">O(n*5*5)</script></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> mp[<span class="number">120</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)&#123;</span><br><span class="line">                dp[i][j][k]=-INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> cur=mp[s[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)&#123;</span><br><span class="line">                dp[i+<span class="number">1</span>][j][k]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j][k],dp[i][j][k]);</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i+<span class="number">1</span>][cur][k]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][cur][k],dp[i][j][k]);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i+<span class="number">1</span>][j][cur]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j][cur],dp[i][j][k]);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line">                    <span class="type">int</span> cnt2=<span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">                    <span class="keyword">if</span>(j==<span class="number">4</span>) cnt1++;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!a[j]) cnt2++;</span><br><span class="line">                        a[j]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(k==<span class="number">4</span>) cnt1++;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!a[k]) cnt2++;</span><br><span class="line">                        a[k]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!a[cur]) cnt2++;</span><br><span class="line">                    a[cur]++;</span><br><span class="line">                    <span class="keyword">if</span>((<span class="type">int</span>)cnt2&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">                        dp[i+<span class="number">1</span>][<span class="number">4</span>][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][<span class="number">4</span>][<span class="number">0</span>],dp[i][j][k]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(cnt1+cnt2==<span class="number">3</span>)&#123;</span><br><span class="line">                        dp[i+<span class="number">1</span>][<span class="number">4</span>][<span class="number">4</span>]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][<span class="number">4</span>][<span class="number">4</span>],dp[i][j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(cnt1!=<span class="number">0</span>||cnt1==<span class="number">0</span>&amp;&amp;cnt2==<span class="number">2</span>)&#123;</span><br><span class="line">                        dp[i+<span class="number">1</span>][k][cur]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][k][cur],dp[i][j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dp[n+<span class="number">1</span>][i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mp[<span class="string">&#x27;R&#x27;</span>]=<span class="number">1</span>,mp[<span class="string">&#x27;G&#x27;</span>]=<span class="number">2</span>,mp[<span class="string">&#x27;B&#x27;</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Expectation-Easy-Version"><a href="#Expectation-Easy-Version" class="headerlink" title="Expectation (Easy Version)"></a>Expectation (Easy Version)</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>进行n次比赛，赢的概率是<script type="math/tex">a/b</script>，每次赢获得的分数为<script type="math/tex">1^m+2^m+...+k^m</script>，其中k表示你总共赢的次数，输了不减分。</p><p>问你最后的得分的期望值对998244353取模的结果。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>假设这n场比赛赢了i次，即①<script type="math/tex">C_n^i</script>，概率应该是②<script type="math/tex">(b/a)^i*((a-b)/b)^i</script>，赢得分数为③<script type="math/tex">1^m+2^m+...+i^m</script></p><p>最后的得分期望值就是<script type="math/tex">C_n^i(b/a)^i*((a-b)/b)^i(1^m+2^m+...+i^m)</script></p><p>分①②③，三部分进行递推预处理，最后相乘，可以使得最后的复杂度为<script type="math/tex">nlogn</script>，1e7的数据4s的时限不会超。</p><p><strong>时间复杂度：<script type="math/tex">O(nlogn)</script></strong></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">int</span> C[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,a,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i]=(sum[i<span class="number">-1</span>]+<span class="built_in">qpow</span>(i,m,mod)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> invab=a*<span class="built_in">qpow</span>(b,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    <span class="type">int</span> invbab=(b-a)*<span class="built_in">qpow</span>(b,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    <span class="comment">// pow[0]=qpow(invab,n);</span></span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     pow[i]=pow[i-1]*qpow(invb,mod-2,mod)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">int</span> inva=<span class="built_in">qpow</span>(a,mod<span class="number">-2</span>,mod);</span><br><span class="line">    <span class="type">int</span> invba=<span class="built_in">qpow</span>(b-a,mod<span class="number">-2</span>,mod);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="built_in">qpow</span>(b-a,n,mod)*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(b,mod<span class="number">-2</span>,mod),n,mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]*a%mod*invba%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    C[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> invbb=<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(b,mod<span class="number">-2</span>,mod),n,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        C[i]=(C[i<span class="number">-1</span>]*(n-i+<span class="number">1</span>)%mod*<span class="built_in">qpow</span>(i,mod<span class="number">-2</span>,mod))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=(ans+C[i]*s[i]%mod*sum[i]%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans%mod&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个有根树，其中指定某些边是重边，一组最大重边构成一个重链，单个顶点也形成一个重链。</p><p>对于每个重链，构造深度为<script type="math/tex">\lceil log_22k \rceil</script>（k表示这条重链的结点数量）的二叉树维护它，段树的每个叶子结点表示重链上的一个顶点，该二叉树的根节点的父节点为这条重链的顶端结点的父节点。</p><p>问这棵搜索树的深度。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>正解是用树形dp做的，因为我赛时的第一想法就是带权并查集而且我感觉这种方法可做，但赛时权值数组的更新出现了一点问题，赛后也是又想了很久终于写出来了。</p><p>对于带权并查集的框架这里就不详细讲了。</p><p>首先，我们可以把每个重链想成是一个集合，而重链对应的搜索树连向另一个搜索树就相当于集合的合并。那么本题就是要对所有搜索树进行合并。</p><p>起初，每个集合的权值是<script type="math/tex">\lceil log_22k \rceil</script>（k表示这条重链的结点数量），记并查集中的权值数组为d[]，开始的d数组应该都为0，因为并查集的值存的是相对关系，d为该点与它的祖宗结点的相对距离。</p><p>合并操作中，当a为重链顶点时，将这个重链合并到它的父节点b上，即a为这个集合的祖宗结点，此时a与pa(pa=find(a))等价,d[pa]=depth[pa]+d[b]，然后再把a的祖宗结点赋值为b，此时的情况是d[a]为a到b的距离，a集合中的其它结点如c,由于没改变它的值，初始状态d[c]=0，那么相当于将a集合中的值都加了a重链的书高和b与b的祖宗结点的距离，这样就合并了两个集合。</p><p>最后就是d[i]-d[root]即i到i祖宗的相对距离加上root的深度，因为root不会成为其它结点的根节点，所以它的搜索树的深度不会在合并中被加上，我们在最后加上。</p><p><strong>时间复杂度：<script type="math/tex">O(n)</script></strong></p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N],sz[N],fa[N],d[N];</span><br><span class="line"><span class="type">int</span> depth[N];</span><br><span class="line"><span class="type">int</span> root;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//带权并查集模板</span></span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x)&#123;</span><br><span class="line">        <span class="type">int</span> rt=<span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x]+=d[p[x]];</span><br><span class="line">        p[x]=rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        fa[i]=x;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            root=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//初始化</span></span><br><span class="line">        p[i]=i;</span><br><span class="line">        sz[i]=<span class="number">1</span>;</span><br><span class="line">        depth[i]=<span class="number">0</span>;</span><br><span class="line">        d[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> px=<span class="built_in">find</span>(x),pi=<span class="built_in">find</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(px!=pi)&#123;<span class="comment">//这里还不需要d的概念，我们要合并重链间的</span></span><br><span class="line">        <span class="comment">//点以及合并成的重链内部结点的数量</span></span><br><span class="line">            p[px]=pi;</span><br><span class="line">            sz[pi]+=sz[px];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//对于每条重链计算它的搜索树的高度</span></span><br><span class="line">        <span class="type">int</span> pi=<span class="built_in">find</span>(i);</span><br><span class="line">        depth[i]=(<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">log2</span>(<span class="number">2</span>*sz[pi]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//将重链合并，即将搜索树合并</span></span><br><span class="line">        <span class="keyword">if</span>(p[i]==i&amp;&amp;fa[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> a=i,b=fa[i];</span><br><span class="line">            <span class="type">int</span> pa=<span class="built_in">find</span>(a),pb=<span class="built_in">find</span>(b);</span><br><span class="line">            <span class="keyword">if</span>(pa!=pb)&#123;</span><br><span class="line">                d[pa]=depth[pa]+d[b];</span><br><span class="line">                p[pa]=pb;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">find</span>(i);<span class="comment">//这里find(i)是为了更新一下i这个结点d数组，</span></span><br><span class="line">        <span class="comment">//进行路径压缩得到跟真正的根节点的距离</span></span><br><span class="line">        ans=<span class="built_in">max</span>(ans,d[i]-d[root]+depth[root]);</span><br><span class="line">        <span class="comment">//记得补上根节点所在重链的搜索树的树高</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Counting-Stars"><a href="#Counting-Stars" class="headerlink" title="Counting Stars"></a>Counting Stars</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个n个点m条边的无向图，令连向一个点的边的数量为i的总和为<script type="math/tex">cnt_i</script>，问<script type="math/tex">cnt_2</script>一直异或到<script type="math/tex">cnt_{n-1}</script>取模1e9+7的值。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>记录每个点的度，累加<script type="math/tex">i=2,3,...,dgr[u]</script>对<script type="math/tex">cnt</script>的贡献<script type="math/tex">C_{dgr[u]}^i</script></p><p>最后异或每个<script type="math/tex">cnt_i</script>即可。</p><p>对于求组合数操作，可以先预处理出<script type="math/tex">1\times 2\times ...\times n</script>的前缀积，以及用逆元预处理出<script type="math/tex">1^{-1}\times 2^{-1}\times ...\times n^{-1}</script>的前缀积，然后O(1)得到组合数。</p><p>**时间复杂度：<script type="math/tex">O(n+m)</script></p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> dg[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> fac[N],infac[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[a]*infac[a-b]%mod*infac[b]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(dg,<span class="number">0</span>,(n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,(n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        dg[u]++;</span><br><span class="line">        dg[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=dg[i];j++)&#123;</span><br><span class="line">            cnt[j]=(cnt[j]+<span class="built_in">C</span>(dg[i],j))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ans^=cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=infac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        infac[i]=infac[i<span class="number">-1</span>]*<span class="built_in">qpow</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第八场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AB%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AB%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-vs-1"><a href="#0-vs-1" class="headerlink" title="0 vs 1"></a>0 vs 1</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>zero和one进行一场博弈，每个人会选择最优策略。</p><p>给定一个01字符串，zero每轮只能拿走最左边或最右边的0，one每轮只能拿走最左边或最右边的1，不能拿的人输，如果所有字符串都被拿完则平局。</p><p>若zero先手，输出游戏结果。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>模拟+贪心。</p><p><strong>设左右两端点分别为l，r</strong></p><p>如果f拿（f即zero或one），我们进行分类讨论：</p><p>若左右两端不同，则只有唯一选择拿f；</p><p>若左右两端都为!f，则f输，!f赢；</p><p>若左右两端相同且都为f：</p><p>若s[l+1]或s[r-1]也为f，以s[l+1]=f为例，拿l，此时!f无法操作，f赢；</p><p>若s[l+1]或s[r-1]都不为f，我们可以贪心的去取<strong>①左右两边l+1与其右边构成的!f数量与r-1与其左边构成的!f数量少的</strong>那个方向的字符。（<strong>原因如下：因为取对方少的那边我才有更多的获胜机会，取少的那边的策略一定比取多的那边策略优，例如左边的少，我取了左边的，此时对方也一定得取左边，一旦我左边没得取了只能取右边，但这过程稿中一旦我出现了连续两个我则赢，但如果我取右边，右边对手数量一定大于等于2，那么我必然还得去左边，不仅让我左边的主动权没了让对方获得了右边的主动权，而且我左边出现2个及以上的情况不能像刚才一样直接获胜，因此此时取左边一定更优</strong>），这里还有一个问题如何快速得到<strong>①</strong>，我们可以先分别从左到右和从右到左预处理出每个字符左右两边连续部分有多少个与自己相同的字符（算上自己）</p><p>这样每种情况我们都有确定的选择方向，直接模拟即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">flip</span><span class="params">(<span class="type">char</span> &amp;f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f=(f==<span class="string">&#x27;0&#x27;</span>?<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> rcnt[<span class="number">2</span>][N],lcnt[<span class="number">2</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    string t=s;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> f=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) cnt0++,lcnt[<span class="number">0</span>][i]=cnt0,cnt1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> cnt1++,lcnt[<span class="number">1</span>][i]=cnt1,cnt0=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt0=cnt1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) cnt0++,rcnt[<span class="number">0</span>][i]=cnt0,cnt1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> cnt1++,rcnt[<span class="number">1</span>][i]=cnt1,cnt0=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[l]!=s[r])&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l]==f)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l]!=f)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">flip</span>(f)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[l]==s[l+<span class="number">1</span>]||s[r]==s[r<span class="number">-1</span>])&#123;</span><br><span class="line">                    cout&lt;&lt;f&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(rcnt[<span class="number">1</span>-(f-<span class="string">&#x27;0&#x27;</span>)][l+<span class="number">1</span>]&gt;lcnt[<span class="number">1</span>-(f-<span class="string">&#x27;0&#x27;</span>)][r<span class="number">-1</span>])&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">flip</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==f)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">flip</span>(f)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Solubility"><a href="#Solubility" class="headerlink" title="Solubility"></a>Solubility</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>总共n个液体，告诉你m对混溶关系，且这种混溶关系具有传递性，接下来给你k个液体的类型，问是否混溶。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>注意：这题wa了一发，一时找不到哪里有问题，原来是没读入完就输出return了，导致下一个开始读入的数据是这一轮还没读完的数据导致了RE，犯了一个非常低级的错误，再此将错误写在这。</p><p>并查集板子题。m对关系分别做合并集合操作，k个液体分别跟第1个液体判断是否在一个集合即可。</p><p>并查集，时间复杂度线性。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">struct DSU &#123;</span><br><span class="line">    vector&lt;int&gt; p, siz;</span><br><span class="line">    DSU(int n) : p(n+1), siz(n+1, 1) &#123; iota(p.begin(), p.end(), 0); &#125;</span><br><span class="line">    int find(int x) &#123;</span><br><span class="line">        return p[x] == x ? x : p[x] = find(p[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    bool same(int x, int y) &#123; return find(x) == find(y); &#125;</span><br><span class="line">    bool merge(int x, int y) &#123;</span><br><span class="line">        x = find(x), y = find(y);</span><br><span class="line">        if (x == y) return false;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        p[y] = x;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    int size(int x) &#123; return siz[find(x)]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool multi=1;</span><br><span class="line"></span><br><span class="line">void solve()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    DSU dsu(n);</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        dsu.merge(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    int k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    vector&lt;int&gt; a(k);</span><br><span class="line">    bool f=1;</span><br><span class="line">    for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        if(!dsu.same(a[i],a[0]))&#123;</span><br><span class="line">            f=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;(f?&quot;YES&quot;:&quot;NO&quot;)&lt;&lt;&#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main()&#123;</span><br><span class="line">    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span><br><span class="line">    int T=1;</span><br><span class="line">    if(multi) cin&gt;&gt;T;</span><br><span class="line">    while(T--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rikka-with-Square-Numbers"><a href="#Rikka-with-Square-Numbers" class="headerlink" title="Rikka with Square Numbers"></a>Rikka with Square Numbers</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个不同的数<script type="math/tex">a,b</script>，每次可以对<script type="math/tex">a</script>加减一个平方数，问把<script type="math/tex">a</script>变成<script type="math/tex">b</script>的最小操作次数。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>当<script type="math/tex">a,b</script>相同时，最小操作显然为<script type="math/tex">0</script>（题目保证了不同，所以不用判断）</p><p>这里我们令<script type="math/tex">d=a-b</script>，原问题就转化为将d变为0得最小操作次数</p><p>一个偶数的平方：<script type="math/tex">(2k)^2=4k^2</script>① <script type="math/tex">(2k+2)^2=4k^2+8k+4</script>③</p><p>一个奇数的平方：<script type="math/tex">(2k+1)^2=4k^2+4k+1</script>②</p><p>②-①，得：4k+1，它在模4意义下得1</p><p>③-②，得，4k+3，它在模4意义下得3</p><p>如果d模4得0，<script type="math/tex">d=2*(d/2)</script>，由于d%4==0，因此<script type="math/tex">4|d</script>，则d/2依然是个偶数，</p><p>那么2和d/2的平均数不会得到小数，则令平均数为<script type="math/tex">x</script>，2或d/2与x的差值为<script type="math/tex">a</script>，则<script type="math/tex">d=(x-a)*(x+a)=x*x-a*a</script>，也可以用两个完全平方数加减获得。</p><p>也就是说d模4不等于2的情况都可以用两个数的平方加减得到。</p><p>接下来讨论<script type="math/tex">d\mod 4=2</script>的情况：</p><p>这里的可能只有2、3两种操作次数的可能，因为如果前面的4k+1再加上一个1的完全平方数就能得到任意模4余2的结果，因此最多3中操作次数的可能。而对于是否能用两次操作获得，我们可以直接枚举所有的平方数与d作差是否仍为平方数。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>((<span class="type">int</span>)<span class="built_in">sqrt</span>(x)*(<span class="type">int</span>)<span class="built_in">sqrt</span>(x)==x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">abs</span>(a-b);</span><br><span class="line">    <span class="comment">//1的情况</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(d))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2的情况</span></span><br><span class="line">    <span class="keyword">if</span>(d%<span class="number">4</span>!=<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="built_in">abs</span>(d-i*i)))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩下的情况都是3</span></span><br><span class="line">    cout&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第十场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%8D%81%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%8D%81%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Many-Topological-Problems"><a href="#Many-Topological-Problems" class="headerlink" title="Many Topological Problems"></a><a href="https://acm.hdu.edu.cn/contest/problem?cid=1103&amp;pid=1003">Many Topological Problems</a></h3><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个数$n,k$。n表示一个有根树的结点个数。求<strong>好的全排列</strong>的数量取模1000000007的值。</p><p>定义好的全排列为，对于全排列每个存在par[i]的下标i，满足a[i] &gt; a[par[i]] &amp;&amp; a[i] &lt;= a[par[i]] + k。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以发现，这个全排列的下标顺序的贡献与每个权值接在哪个子树下面所形成的贡献是独立的。</p><p>其实也就是树结点的编号和树的结构独立。</p><p>对于前者，顺序可以任意，有$n!$种情况，对于树的结构，权值为$i$的结点可以接在权值为$[max(1, i - k ), i - 1]$，每个权值有$\prod_2^n(max(i - 1), k)$</p><p>根据乘法原理，总情况数：$n!\prod_2^n(max(i - 1), k)$</p><h1 id="Equalize-the-Array"><a href="#Equalize-the-Array" class="headerlink" title="Equalize the Array"></a><a href="https://acm.hdu.edu.cn/contest/problem?cid=1103&amp;pid=1012">Equalize the Array</a></h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个$n$个数，每次可以选择一个出现次数最多的所有$x$加一，问是否可以让所有值相等。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>记录每个数的出现次数，然后排序去重。</p><p>如果出现次数最多的数大于最小的数，则不可能让这个最小的数加1，输出NO</p><p>否则从小到大模拟，维护当前数的出现次数，如果它比下一个比它的数出现次数小，则输出NO</p><p>否则输出YES</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cnt[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        cnt[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,cnt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="keyword">if</span>(mx&gt;cnt[a[<span class="number">0</span>]])&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n=<span class="built_in">unique</span>(a,a+n)-a;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        sum+=cnt[a[i]];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;cnt[a[i+<span class="number">1</span>]])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第六场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定三个数<script type="math/tex">n,m,k</script>，问所有元素都为1~m的整数且前k个元素与后k个元素分别对应相同的方案数。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>k为n时，前n个与后n个分别对应相同，那么就相当于没有限制条件，每个数可以有m种填法，直接<script type="math/tex">m^n</script>即可</p><p>k不为n时，前k个元素与后k个元素对应相同，相当于固定了k个元素，自己能选择的有n-k个元素，<script type="math/tex">m^{n-k}</script>即是答案。</p><p><strong>时间复杂度：快速幂<script type="math/tex">O(logn)</script></strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">if</span>(k==n) cout&lt;&lt;<span class="built_in">qpow</span>(m%mod,n,mod)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">qpow</span>(m%mod,n-k,mod)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一棵树和每个结点的颜色，问你任意两点之间最短路径形成的三种颜色数量相同的路径数量。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>点分治。</p><p>考虑把一棵树以重心（其实是周围的最大子树数量小于等于n/2的结点，这样可以保证logn层，使时间复杂度控制在<script type="math/tex">nlogn</script>，不一定要重心），然后对于重心周围的若干个子树如tr1,tr2,tr3,tr4，讨论形成答案的几种情况：</p><p>①两个结点都在同个子树上，直接继续分治即可</p><p>②有一个结点在重心，那么每次算从重心出发的颜色数，三者相同时累加答案</p><p>③两个结点在不同的子树，我们可以开一个桶，先遍历tr1记录所有颜色相关信息，再遍历tr2的时候将信息对应桶中符合情况的进行累加，这时就能处理出tr1和tr2形成三种颜色相同的数量，再加入到桶中，接着遍历tr3，同样对应桶中累加，这时就能处理出tr3和前两棵树形成三种颜色相同的数量，再加入到桶中，直到把所有子树处理完。</p><p>然后往周围子树接着分治递归。</p><p>那么如果处理桶？</p><p>对于三种颜色的数量，我们只需要一个二元组pair<int,int>，存储即可，first存的是b颜色数量减a颜色数量，second存c颜色数量减b颜色数量，一个二元组对应三种颜色数量，两个路径相加三种颜色数量相同时，即两个二元组相加得到{0,0},因此我们可以直接map[{-color[i].first,-color[i].second}]，<script type="math/tex">logn</script>的复杂度得到桶中能与当前路径相加得到三种颜色数量相同的数量。</int,int></p><p><strong>时间复杂度：<script type="math/tex">O(nlog^2 n)</script></strong></p><p>(点分治<script type="math/tex">nlogn</script>，map容器<script type="math/tex">logn</script>)</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*=================================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=N&lt;&lt;<span class="number">1</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//表示这个点有没有被删去</span></span><br><span class="line">PII q[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> tms;</span><br><span class="line"></span><br><span class="line">map&lt;PII,<span class="type">int</span>&gt; mp;<span class="comment">//桶</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_size</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i]!=fa)&#123;</span><br><span class="line">            res+=<span class="built_in">get_size</span>(e[i],u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_wc</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> tot,<span class="type">int</span> &amp;wc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">1</span>,ms=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> t=<span class="built_in">get_wc</span>(j,u,tot,wc);</span><br><span class="line">        ms=<span class="built_in">max</span>(ms,t);</span><br><span class="line">        sum+=t;</span><br><span class="line">    &#125;</span><br><span class="line">    ms=<span class="built_in">max</span>(ms,tot-sum);</span><br><span class="line">    <span class="keyword">if</span>(tms&gt;ms)&#123;<span class="comment">//我这里找的是重心，怕被卡常，其实不用找真正的重心也可以过，只需要ms&lt;=tot/2就可以把重心wc赋值成u了</span></span><br><span class="line">        tms=ms;</span><br><span class="line">        wc=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_dist</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,PII dist,<span class="type">int</span> &amp;qt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[u]) <span class="keyword">return</span>;</span><br><span class="line">    dist.first+=(s[u]==<span class="string">&#x27;b&#x27;</span>)-(s[u]==<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    dist.second+=(s[u]==<span class="string">&#x27;c&#x27;</span>)-(s[u]==<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    q[qt++]=dist;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">get_dist</span>(j,u,dist,qt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[u]) <span class="keyword">return</span>;</span><br><span class="line">    tms=INF;</span><br><span class="line">    <span class="built_in">get_wc</span>(u,<span class="number">-1</span>,<span class="built_in">get_size</span>(u,<span class="number">-1</span>),u);<span class="comment">//找重心</span></span><br><span class="line">    st[u]=<span class="literal">true</span>;<span class="comment">//删去重心</span></span><br><span class="line">    <span class="type">int</span> pt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i],qt=<span class="number">0</span>;</span><br><span class="line">        PII tmp=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//重心的颜色信息</span></span><br><span class="line">        tmp.first+=(s[u]==<span class="string">&#x27;b&#x27;</span>)-(s[u]==<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        tmp.second+=(s[u]==<span class="string">&#x27;c&#x27;</span>)-(s[u]==<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">get_dist</span>(j,u,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,qt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;qt;k++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> &amp;t=q[k];</span><br><span class="line">            <span class="keyword">if</span>(t.first+tmp.first==<span class="number">0</span>&amp;&amp;t.second+tmp.second==<span class="number">0</span>) ans++;<span class="comment">//一个结点在重心的情况</span></span><br><span class="line">            ans+=mp[&#123;-t.first,-t.second&#125;];<span class="comment">//两个结点在不同子树的情况</span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;qt;k++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> &amp;t=q[k];</span><br><span class="line">            mp[&#123;t.first+tmp.first,t.second+tmp.second&#125;]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i]) <span class="built_in">calc</span>(e[i]);<span class="comment">//向周围子树递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        <span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Calculate"><a href="#Calculate" class="headerlink" title="Calculate"></a>Calculate</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个有n个顶点的有向图，每个顶点有两个权值<script type="math/tex">k,b</script>，每个顶点有且只有一条出边。</p><p>接下里有q个询问，每次询问从起点<script type="math/tex">x</script>出发走<script type="math/tex">l</script>步后的结果，起初权值是y，每走一步会变成y’=y*ki+bi</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>倍增法，定义<script type="math/tex">to[i][j]</script>为从<script type="math/tex">i</script>点走<script type="math/tex">2^j</script>步能到的点，<script type="math/tex">a[i][j].k</script>、<script type="math/tex">a[i][j].k</script>分别表示从<script type="math/tex">i</script>点走<script type="math/tex">2^j</script>步<script type="math/tex">y</script>的系数和常数。</p><p>正因为系数和常数满足结合律，所以可以这么做，起初权值为y，走一步变成<script type="math/tex">k_iy+b_i</script>，走两步变成<script type="math/tex">k_ik_jy+k_jb_i+b_j</script>，相当于系数从<script type="math/tex">k_i\to k_ik_j</script>，常数项从<script type="math/tex">b_i\to b_ik_j+b_j</script>，可以发现，系数每次乘上k，常数先乘k再加b。</p><p>首先我们根据读入获得j=0的情况，也就是i点跳到下一个点的信息，然后根据递推式子算出所有情况。</p><p>处理询问时，根据二进制的性质，可以把走l步分解成若各干二进制数相加来达到每次询问<script type="math/tex">O(logn)</script></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> k[N], b[N], to[N][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> k, b;</span><br><span class="line">&#125;a[N][<span class="number">35</span>];</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; k[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; to[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        a[i][<span class="number">0</span>].k=k[to[i][<span class="number">0</span>]];</span><br><span class="line">        a[i][<span class="number">0</span>].b=b[to[i][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            a[j][i].k = a[j][i - <span class="number">1</span>].k * a[to[j][i - <span class="number">1</span>]][i - <span class="number">1</span>].k % mod;</span><br><span class="line">            a[j][i].b = (a[j][i - <span class="number">1</span>].b * a[to[j][i - <span class="number">1</span>]][i - <span class="number">1</span>].k + a[to[j][i - <span class="number">1</span>]][i<span class="number">-1</span>].b) % mod;</span><br><span class="line">            to[j][i] = to[to[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x, l, y, kk = <span class="number">1</span>, bb = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; l &gt;&gt; y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l - (<span class="number">1LL</span> &lt;&lt; i) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                l -= <span class="number">1LL</span> &lt;&lt; i;</span><br><span class="line">                kk = kk * a[x][i].k % mod;</span><br><span class="line">                bb = (bb * a[x][i].k + a[x][i].b) % mod;</span><br><span class="line">                x = to[x][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (y * kk + bb) % mod&lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Perfect-square-number"><a href="#Perfect-square-number" class="headerlink" title="Perfect square number"></a>Perfect square number</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个序列，你可以选择一个数，将该数变成1~300中的任意一个数，问连续子段和是平方数的最大数量。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题的数据范围是300，意味着我们可以用<script type="math/tex">n^3</script>去预处理或计算结果。</p><p>我们可以先求原数组的子段和是平方数的数量，然后再减去与pos位置相关的构成子段和是平方数的数量，加上将pos位置数修改后与pos位置相关的构成子段和是平方数的数量。</p><p>对于每个pos的修改，我们可以先预处理所有跨过pos但是去掉a[pos]的所有子段和放在桶中，然后对pos的原数组通过桶中每个平方数减去pos位置原来的数得到旧值，再通过桶中每个平方数减去pos位置要修改成的数得到新值。答案就是原数组子段和为平方数的数量减去旧值加上新值这样的最大值。</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="type">bool</span> st[N*N];</span><br><span class="line"><span class="type">int</span> mp[N * N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st[s[j] - s[i - <span class="number">1</span>]]) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> pos = <span class="number">1</span>; pos &lt;= n; pos++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span> mp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= pos; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = pos; j &lt;= n; j++)&#123;</span><br><span class="line">                mp[s[j] - s[i - <span class="number">1</span>] - a[pos]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">300</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> oldv = <span class="number">0</span>, newv = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">300</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j * j &gt;= a[pos])</span><br><span class="line">                    oldv += mp[j * j - a[pos]];</span><br><span class="line">                <span class="keyword">if</span>(j * j &gt;= i)</span><br><span class="line">                    newv += mp[j * j - i];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cnt + newv - oldv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i * i &lt; N * N; i++)&#123;</span><br><span class="line">        st[i * i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023杭电多校第四场</title>
      <link href="/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%9B%9B%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%9B%9B%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="a-b-Problem"><a href="#a-b-Problem" class="headerlink" title="a-b Problem"></a>a-b Problem</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>分别给定n个数组<script type="math/tex">A_1,A_2,...A_n</script>，<script type="math/tex">B_1,B_2,...B_n</script>分别表示Alice拿第<script type="math/tex">i</script>个石子获得的价值和Bob拿第j个石子获得的价值，Alice和Bob轮流拿，每个石子只能被拿一次。Alice先手。两人的目的都是是自己获得的价值减别人获得的价值最大。问最后Alice获得的价值。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑贪心。</p><p>每个人要让自己获得的价值减别人获得的价值最多，假如Alice拿了<script type="math/tex">A_i</script>，别人就损失了<script type="math/tex">B_i</script>价值可以拿，相当于Alice赢得了<script type="math/tex">A_i+B_i</script>的贡献。所以直接按照<script type="math/tex">A_i+B_i</script>排序即可。</p><p><strong>时间复杂度：<script type="math/tex">O(nlogn)</script></strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line">PII c[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">        c[i].first=a[i]+b[i];</span><br><span class="line">        c[i].second=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(c,c+n,<span class="built_in">greater</span>&lt;PII&gt;());</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k=n;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)&#123;</span><br><span class="line">            res+=a[c[pos++].second];</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res-=b[c[pos++].second];</span><br><span class="line">            f=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PSO"><a href="#PSO" class="headerlink" title="PSO"></a>PSO</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个含有n个结点的菊花图，边长均为1，求任意两点的平均距离和最大距离。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>画图归纳即可。</p><p>两点间长度为2的数量有<script type="math/tex">(n-1)\times (n-2)/2</script>个，长度为1的数量有<script type="math/tex">n-1</script>个，所有点对有<script type="math/tex">n\times (n-1)/2</script></p><p>平均距离即所有长度之和除以点对数量。</p><p>当n=2时，最大距离为1，否则为2</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cntedge=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> totlength=(n<span class="number">-1</span>)*(n<span class="number">-2</span>)+n<span class="number">-1</span>;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">9</span>)&lt;&lt;(<span class="type">double</span>)totlength/cntedge&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;(n==<span class="number">2</span>?<span class="number">1.0</span>:<span class="number">2.0</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Simple-Set-Problem"><a href="#Simple-Set-Problem" class="headerlink" title="Simple Set Problem"></a>Simple Set Problem</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定k个集合，让你在每个集合中选一个数，使得这些数的最大值减这些数的最小值最小。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>尺取法（双指针法）</p><p>先将每个数和它多在的集合编号放在一个整体进行排序，然后从小到大双指针遍历，当现在l到r内包含的集合数量小于k时，r指针往右走直到包含的集合数量为k，这是符合条件，由于遍历的数已经按照非降序排序，这一块区间的最大值减最小值就是r所在位置的数减l所在位置的数，与res取最小，接着左端点有右移每次维护res，直到包含集合数量小于k时向右移动r。</p><p>这样l和r分别只会从1移动到n，线性的时间复杂度，且能遍历到所有包含集合数量为n的区间情况。</p><p><strong>时间复杂度：<script type="math/tex">O(nlogn)</script></strong>（排序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">out</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">out</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">PII v[N];</span><br><span class="line"><span class="type">int</span> cnt[N],cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x]==<span class="number">0</span>) cur++;</span><br><span class="line">    cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cnt[x]--;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x]==<span class="number">0</span>) cur--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">            v[n++]=&#123;x,i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,(k+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">sort</span>(v,v+n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">-1</span>;l&lt;n;l++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(r+<span class="number">1</span>&lt;n&amp;&amp;cur&lt;k)&#123;</span><br><span class="line">            <span class="built_in">add</span>(v[r+<span class="number">1</span>].second);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur==k)&#123;</span><br><span class="line">            res=<span class="built_in">min</span>(res,v[r].first-v[l].first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">del</span>(v[l].second);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) TTT=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kong-Ming-Qi"><a href="#Kong-Ming-Qi" class="headerlink" title="Kong Ming Qi"></a>Kong Ming Qi</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个<script type="math/tex">(n+2)*(m+2)</script>的棋盘，棋盘中间的<script type="math/tex">n*m</script>是棋子，每次可以选择一个棋子，跳过一个棋子到一个没有子的地方，中间那个棋子会消失。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>当只有一行或一列时，即<script type="math/tex">1*n</script>，模拟可得到答案为<script type="math/tex">\lceil n/2\rceil</script></p><p>当行列可以被三整除时，可以发现当出现L形时，可以消掉L的竖着的三个棋子，最终剩下两个，否则剩下一个。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; (m + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">3</span> == <span class="number">0</span> || m % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Circuit"><a href="#Circuit" class="headerlink" title="Circuit"></a>Circuit</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个n个顶点m条边的有向图，保证没有重边和自环，计算最小环的长度和最小环的数量。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>这里是对于全图而言，n的范围每组又是最多500，且不超过10组。那么可以用<script type="math/tex">O(n^3)</script>的复杂度去做，想到用floyd去做。</p><p>这里需要用三个数组，一个记录两点之间的有向边权，一个记录两点之间最短距离，一个记录两点之间的最短距离的走法数量。</p><p>floyd算法是基于动态规划实现，每次在1~k-1的子图的基础上加入一个点k，不断更新子图中的点之间的距离。</p><p>当i走到j能被k更新时，有i走到k再走到j的总路程小于原来的最短路和等于原来的最短路两种情况。</p><p>①如果是小于的情况，那么路径被更新，然后两点间的最短距离的数量应该被重新记录，因为原来的数量是就最短路径而言。</p><p>②如果是等于的情况，那么两点间最短路径的数量累加。</p><p>子图中每加入一个点k（也就是外层循环），并更新完所有这个子图中的距离后，枚举每个点i与新加进来的k的关系，这里为了避免重复，所以只考虑从编号大的点k连向编号小的点i，如果<script type="math/tex">k\to i</script>有边，那么看k到i的距离加上i到k的最短距离是否小于当前答案，如果小于则更新答案，并重新计数；如果等于，则累加数量。</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N][N], cnt[N][N], d[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            d[i][j] = (i == j ? <span class="number">0</span> : INF);</span><br><span class="line">            w[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        w[a][b] = d[a][b] = c;</span><br><span class="line">        cnt[a][b] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mn = INF, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i][j] &gt; d[i][k] + d[k][j])&#123;</span><br><span class="line">                    d[i][j] = d[i][k] + d[k][j];</span><br><span class="line">                    cnt[i][j] = cnt[i][k] * cnt[k][j] % mod;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d[i][j] == d[i][k] + d[k][j])&#123;</span><br><span class="line">                    cnt[i][j] = (cnt[i][j] + cnt[i][k] * cnt[k][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(w[k][i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(w[k][i] + d[i][k] &lt; mn)&#123;</span><br><span class="line">                    mn = w[k][i] + d[i][k];</span><br><span class="line">                    ans = cnt[i][k];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(w[k][i] + d[i][k] == mn)&#123;</span><br><span class="line">                    ans = (ans + cnt[i][k]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mn == INF) mn = ans = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; mn &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第七场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%83%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%83%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Writing-Books"><a href="#Writing-Books" class="headerlink" title="Writing Books"></a>Writing Books</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定T个数<script type="math/tex">n_i</script>，对于每个数，求从1到n的所有数的位数数量之和。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>签到题。</p><p>计算每个位数的数量的贡献，从9、99、999、…、枚举到比n大的情况，每次这个位数的数量。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&lt;=(<span class="type">int</span>)<span class="number">1e11</span>;i=i*<span class="number">10</span>+<span class="number">9</span>)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=i)&#123;</span><br><span class="line">            ans+=(n-sum)*cnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=(i-sum)*cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=i-sum;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第三场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="World-Fragments-I"><a href="#World-Fragments-I" class="headerlink" title="World Fragments I"></a>World Fragments I</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个二进制数x,y，问是否可以进行任意次操作使x变成y，每次操作可以选择二进制数y中的一位使y加上或减去这个数。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>若x和y相等，不需要操作，答案为0.</p><p>若不相等，显然只有取的这个数为1才有意义，若y为0则取不到1，那么无论怎么操作都不能使x变成y，否则答案即为x，y的差的绝对值。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O（1）</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bitset&lt;63&gt; sx,sy;</span><br><span class="line">    cin&gt;&gt;sx&gt;&gt;sy;</span><br><span class="line">    <span class="type">int</span> x=sx.<span class="built_in">to_ullong</span>(),y=sy.<span class="built_in">to_ullong</span>();</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">abs</span>(x-y)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ama-no-Jaku"><a href="#Ama-no-Jaku" class="headerlink" title="Ama no Jaku"></a>Ama no Jaku</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个<script type="math/tex">n*n</script>大小的矩阵，每个位置的数只可能是0或1，你可以进行任意次操作：翻转一行或一列。记每一行或每一列组成一个二进制数，求进行多少次操作后可以使得行组成的最小二进制数大于等于列组成的最大二进制数。若不可能，输出-1.</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>模拟样例可知，只有全0和全1的情况才符合题意。因此题目就转化为是否能转化为全0或全1的状态，如果能需要多少次操作。</p><p>按照第一列的第一个数和第一行的第一个数决定是否翻转这一列或这一行，使得第一行和第一列的数全部相等，接着判断矩阵是否都为0或都为1。</p><p>这里我们可以只考虑转化为0的情况，记录将第一行转化为0需要对列进行操作的次数cnt1，对第一列同理得到cnt2，最后答案取<script type="math/tex">min(cnt1,n-cnt1)+min(cnt2,n-cnt2)</script>即可。</p><p>因为如果列操作将第一行变成0的操作最少，我们就选择变成0，<script type="math/tex">min(cnt1,n-cnt1)</script>即取变成0或1两种情况中操作少的。此时考虑完行的情况虽然可能与前面列操作使得第一行要变成的数可能与行操作情况不同，但由于这时第一行一定相同，行操作要变成的数与列操作要变成的数不同时不会发生冲突。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度:<script type="math/tex">O(n^2)</script></strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                s[i][j]=<span class="string">&#x27;1&#x27;</span>+<span class="string">&#x27;0&#x27;</span>-s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>][i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            cnt2++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                s[j][i]=<span class="string">&#x27;1&#x27;</span>+<span class="string">&#x27;0&#x27;</span>-s[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(cnt1,n-cnt1)+<span class="built_in">min</span>(cnt2,n-cnt2)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Koraidon-Miraidon-and-DFS-Shortest-Path"><a href="#Koraidon-Miraidon-and-DFS-Shortest-Path" class="headerlink" title="Koraidon, Miraidon and DFS Shortest Path"></a>Koraidon, Miraidon and DFS Shortest Path</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个n个点的有向图，边权为1，问从点1开始以任意边权顺序进行dfs是否每个点都能得到正确的最短路。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>先用bfs求出每个点到1的距离dist[i]</p><p>再用dfs模拟题中所给的代码看是否会与原来所出来的结果矛盾。</p><p>注意这里dfs中遍历过的点标记vis后回溯时应该取消vis的标记，这样可以以任意边的顺序模拟。</p><p>时间复杂度看起来有点玄学与构图有关，但是还是过了</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">bool</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,(n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    dist[start]=<span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                dist[v]=dist[u]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&lt;dist[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                ans=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=<span class="literal">true</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    edge.<span class="built_in">clear</span>();</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,(n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(ans?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Until-the-Blue-Moon-Rises"><a href="#Until-the-Blue-Moon-Rises" class="headerlink" title="Until the Blue Moon Rises"></a>Until the Blue Moon Rises</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的数列，你可以做任意次数的操作：选择数列中两个数<script type="math/tex">A_i,A_j</script>，使得<script type="math/tex">A_i=A_i+1,A_j=A_j-1</script>，如果能使数列A中的每一个数变成，输出Yes，否则输出No</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>令sum为数列的和。</p><p>当n=1时，直接判断这个数是不是质数。</p><p>当n=2时，若sum为偶数且sum大于等于4，根据哥德巴赫猜想(任意一个大于2的偶数一定可以由两个质数相加），该猜想尚未找到反例，故假设正确；当sum为奇数，由于奇数=奇数＋偶数，而是质数的偶数只有2，所以判断sum-2是否为质数即可。</p><p>当n=3时，同样根据哥德巴赫猜想成立。</p><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(sqrt(x))</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum,n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;n*<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;(<span class="built_in">is_prime</span>(a[<span class="number">1</span>])?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>)&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>||sum%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;<span class="built_in">is_prime</span>(sum<span class="number">-2</span>))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=<span class="number">2</span>*n)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Fine-Logic"><a href="#Fine-Logic" class="headerlink" title="Fine Logic"></a>Fine Logic</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个人，m对输赢关系，让你输出最少数量的1~n全排列，使得每组输赢关系<u,v>都能在输出的全排列中反应出来，即u在v的左边。</u,v></p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>拓扑排序+正反输出</p><p>若无环，则一遍拓扑排序即为结果。</p><p>若有环，则这m对关系不能通过1次全排列体现，至少需要2次，那么一次1,2,…,n和n,n-1,…,1的全排列则包含了所有可能的输赢情况。</p><h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n+m)</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        ind[v]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        res.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">            ind[v]--;</span><br><span class="line">            <span class="keyword">if</span>(ind[v]==<span class="number">0</span>)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((<span class="type">int</span>)res.<span class="built_in">size</span>()==n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;res.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            cout&lt;&lt;res[i]&lt;&lt;<span class="string">&quot; \n&quot;</span>[i==(<span class="type">int</span>)res.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; \n&quot;</span>[i==n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; \n&quot;</span>[i==<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第一场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目A"><a href="#题目A" class="headerlink" title="题目A"></a>题目A</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的二进制数，构造一个排序网络，使除了给定二进制数不能达到非递减排序外其它长度为n的二进制数情况都能达到。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>若有多个1，那么找到第一个1的位置pos，构造以pos为i，其它1为j的排序网络，这样原二进制数就会因为此产生无效交换实现达不到非递减排序的目的。</p><p>其它情况相同合并处理，对除了pos位置的其它位置进行排序，此时排序后（对于长度为n的非给定的二进制数）可能出现pos为0，pos左边出现1的情况，那么我们就要把左边的1都往右移动一个位置；还有可能排序后pos为1，后面的数为0，此时要对pos位置的1进行调整后移，但不能移到最后否则给定的要求不能达到排序效果的原二进制数也被成功排序了。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：Ｏ（ｎ＾２）</strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[pos]!=<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cnt+=s[i]==<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>) res.<span class="built_in">push_back</span>(&#123;pos,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==pos) <span class="keyword">continue</span>;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;j,i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) res.<span class="built_in">push_back</span>(&#123;i,i+<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;=n-cnt<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;i,i+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;res.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;res[i].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res[i].second&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目D"><a href="#题目D" class="headerlink" title="题目D"></a>题目D</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>有一个<script type="math/tex">n*m</script>的方格，每格上都有一块巧克力。Kelin(K)和Walk Alone(W)两人轮流吃巧克力，Kelin先手。每人每次选择一对数x,y，吃掉以<script type="math/tex">(1,1)</script>为左下角，<script type="math/tex">(x,y)</script>为右上角的矩形的巧克力且每次必须至少吃到<script type="math/tex">1</script>个。吃到<script type="math/tex">(n,m)</script>的玩家败，问谁获胜。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>分情况讨论：</p><p>①当n=1且m=1时，显然W胜</p><p>②当n=1且m≠1时，K第一次取走(1,1)到(1,m-1)，W只能取(n,m)，显然K胜；当n≠1且m=1时同理。</p><p>③当n≠1且m≠1时，K第一次取走(1,1)，接下来W取走后有两种情况：剩下完整矩形；剩下缺角的矩形。前者情况下若剩下的完整矩形只剩一列或一行，则与②情况相同，否则继续取剩下矩形的左下角的一块方格；后者情况下，取走最下边若干行或最左边若干列，可使得矩形仍然变成缺左下一块角的矩形，最终会剩下2*2大小缺左下一个角的矩形，此时W只能取左上块或右下块，K取对应得另一块，显然K取胜。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(1)</p><p>空间复杂度：O(1)</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>&amp;&amp;b==<span class="number">1</span>)  cout&lt;&lt;<span class="string">&quot;Walk Alone&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Kelin&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目H"><a href="#题目H" class="headerlink" title="题目H"></a>题目H</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个长度为n的数组a,b，可以选择其中一个数组交换其中的两个数字，问经过至多一次操作后最小的<script type="math/tex">\sum_{i=1}^n \lvert a_i-b_i \rvert</script>.</p><script type="math/tex; mode=display">1\le n\le 2*10^5,0\le \lvert a_i\rvert,\lvert b_i \rvert\le 10^{12}</script><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于选择<script type="math/tex">a,b</script>数组的效果相同，我们规定只选<script type="math/tex">a</script>数组。</p><p>我们可以用原来的<script type="math/tex">\sum_{i=1}^n \lvert a_i-b_i \rvert</script>减去交换这一操作的贡献来得到答案。</p><p>那么如何算交换这一操作带来的贡献？<br>首先，每一个<script type="math/tex">a[i],b[i]</script>都可以用一维坐标轴上的一条线段表示，线段的长度即<script type="math/tex">\lvert a_i-b_i \rvert</script></p><p>而一次交换操作，则是相当于将<script type="math/tex">i,j</script>对应两条线段的<script type="math/tex">a[i],a[j]</script>两点交换。</p><p>（1）（正序）当<script type="math/tex">a[i]\le b[i]</script>且<script type="math/tex">a[j]\le b[j]$$$$(a[i]>b[i]且a[j]>b[j])情况原此类似，这里也一一画图解释)</script></p><p>①如下图所示为<script type="math/tex">a[j]\le b[i]</script>时和交换<script type="math/tex">a[i],a[j]</script>后的图，两线段和交换前后不变</p><p><img src="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230719161656944.png" alt="image-20230719161656944"></p><p>②<script type="math/tex">a[j]>b[i]</script>情况下画图同理可得，两线段和交换前后不变。</p><p>（2）（反序）当<script type="math/tex">a[i]>b[i]</script>且<script type="math/tex">a[j]<b[j]</script>（<script type="math/tex">a[i]\le b[i]且a[j]\ge b[j]</script>)</p><ul><li>（重叠情况）如下图情况下，线段和减少了<script type="math/tex">2*\lvert a[i]-a[j]\rvert</script>，即两倍的重叠面积</li></ul><p><img src="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230719162945872.png" alt="image-20230719162945872"></p><p>因为情况略多，画图不便，这里只讨论重叠情况下这一种情况，其它情况同理</p><ul><li>（不重叠情况）如下图，观察到交换前后，线段和增加了<script type="math/tex">2*\lvert a[i]-a[j]\rvert</script></li></ul><p><img src="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230719163546608.png" alt="image-20230719163546608"></p><p>同样情况略多，我们只演示了一种情况。</p><p><strong>多次情况模拟后可总结：反序<script type="math/tex">(a[i]-b[i])*(a[j]-b[j])<0</script>下的有重叠情况会使答案在原来情况下减小<script type="math/tex">2*重叠部分的长度</script></strong></p><p>因此我们只需找到反序重叠情况下最大的重叠部分的长度即可。</p><p>那么如何找：</p><p>我们先按照每个线段的左端点排序，再从左往右遍历每个线段。初始使cur为c[0],i从1开始遍历到n-1</p><p>①如果<script type="math/tex">c[i].r<=cur[i].r</script>且<script type="math/tex">flag</script>不相等又左端点递增即<script type="math/tex">c[i].l>=cur.l</script>（i线段被cur线段包含，且反序），此时被包含的线段的长度即为重叠部分长度<script type="math/tex">c[i].r-c[i].l</script>，维护最大重叠部分长度overlap</p><p>②反之，<script type="math/tex">c[i].r>cur[i].r</script>，若<script type="math/tex">c[i].l<cur.r</script>，则有重叠部分<script type="math/tex">cur.r-c[i].l</script>，否则没有重叠部分，但也可以合并在<script type="math/tex">cur.r-c[i].l</script>中，因为此时<script type="math/tex">cur.r-c[i].l<0</script>不会更新overlap，对结果无影响。</p><p><strong>那么什么时候更新cur？</strong></p><p>情况①中不需要更新cur，因为cur包含了c[i]，c[i+1]与cur的重叠部分只会比c[i]大。</p><p>情况②中需要更新cur，因为左端点递增，而c[i].r&gt;cur，接下来与c[i]的重叠部分只会比cur大。</p><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(n)</strong></p><p><strong>空间复杂度：O(n)</strong></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;<span class="comment">//线段的左右端点</span></span><br><span class="line">    <span class="type">bool</span> flag;<span class="comment">//记录a[i]&lt;b[i]还是a[i]&gt;b[i]</span></span><br><span class="line"><span class="comment">//当两个线段的flag不同是即为反序，在此情况下找到两线段重叠部分长度</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l!=w.l) <span class="keyword">return</span> l&lt;w.l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> r&lt;w.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">b</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//求不交换情况下的结果</span></span><br><span class="line">    <span class="function">vector&lt;Node&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum+=<span class="built_in">abs</span>(a[i]-b[i]);</span><br><span class="line">        c[i<span class="number">-1</span>]=&#123;<span class="built_in">min</span>(a[i],b[i]),<span class="built_in">max</span>(a[i],b[i]),a[i]&lt;b[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(c.<span class="built_in">begin</span>(),c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> overlap=<span class="number">0</span>;<span class="comment">//最大重叠部分的长度</span></span><br><span class="line">    Node cur=c[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i].r&lt;=cur.r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.flag!=c[i].flag) overlap=<span class="built_in">max</span>(overlap,c[i].r-c[i].l);<span class="comment">//反序情况下更新最大重叠部分长度</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.flag!=c[i].flag) overlap=<span class="built_in">max</span>(overlap,cur.r-c[i].l);<span class="comment">//反序情况下更新最大重叠部分长度</span></span><br><span class="line">            cur=c[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum<span class="number">-2</span>*overlap&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目J"><a href="#题目J" class="headerlink" title="题目J"></a>题目J</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>Walk Alone 初始有 <script type="math/tex">n</script> 块钱，如果每次投 <script type="math/tex">x</script> 元，有一半的概率输掉这 <script type="math/tex">x</script> 元，另一半概率赢得 <script type="math/tex">2x</script> 元。现在 </p><p>Walk Alone 采取下述策略投注：</p><ul><li><p>如果上一把赢了，这一把投 <script type="math/tex">x_i = 1</script> 元</p></li><li><p>如果上一把输了，这一把投 <script type="math/tex">x_i = 2x_{i-1}</script> 元</p></li></ul><p>问 Walk Alone 有多大概率拿到 n + m 元离开。<script type="math/tex">1 ≤ n, m ≤ 10^9</script>。  </p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察与模拟样例可知，令一个周期为“输输输<script type="math/tex">\dots</script>赢”，此时相当于在最开始的基础上赢了1元</p><p>（假设输了k次后赢，相当于<script type="math/tex">-1,-2,-4,-8,-16,\dots,-2^{k-1},+2^{k}</script>，最终赚1元）</p><p>而我们要从n元赢到n+m元，即需要m个周期。</p><p>那么我们只需要求<script type="math/tex">n\sim n+m-1</script>每个周期都赢的概率，即<script type="math/tex">\prod_{i=n}^{n+m-1}P(i)</script></p><p>而每个i的P(i)怎么算呢？即从i赢到n+m的概率如何计算？</p><p>我们可以考虑i什么情况下不能赢到n+m：</p><p>可以发现，有本金才能投入，一个周期内输的次数是有限的</p><p>当输了一个周期内能输掉的最大次数k时候，则失败：</p><script type="math/tex; mode=display">1+2+4+\dots+2^{k-1}\le i\Rightarrow 2^{k}-1\le i$$(注意：输一次是$$2^0$$，所以输k次是$$2^{k-1}$$)要求最大整数k，且k满足$$2^{k}-1\le i\Rightarrow 2^k\le i+1\Rightarrow k=  \lfloor\log_2(i+1)\rfloor$$①输的概率：$$\frac{1}{2^k}$$     赢的概率：$$1-\frac{1}{2^k}</script><p>而每个k对应的一块区间<script type="math/tex">[2^k-1,2^{k+1}-2]</script>的概率都是相同的，即<script type="math/tex">2^k-1\le x(x∈[2^k-1,2^{k+1}-2])</script>对应的最大k都相同</p><p>所以我们只需要对<script type="math/tex">[n,n+m-1]</script>分块，进行逐块求解即可。</p><p>那么找到k的左端点和右端点分别是<script type="math/tex">l=\lfloor\log_2(n+1)\rfloor</script>和<script type="math/tex">r=\lfloor\log_2(n+m)\rfloor</script>（由①式可知）</p><p>然后用i遍历<script type="math/tex">[l,r]</script>，每次对i对应的块整体用快速幂累乘块中数量length次赢的概率<script type="math/tex">p_i=1-\frac{1}{2^i}</script>（注意l和r出块间数量从l开始r结束）</p><h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：</strong>遍历套快速幂</p><script type="math/tex; mode=display">logn(\log(n+m)-\log(n+1))</script><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">log2</span>(n+<span class="number">1</span>),r=<span class="built_in">log2</span>(n+m);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> inv2=<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod);<span class="comment">//费马小定理预处理2^&#123;-1&#125;%mod的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="type">int</span> length=<span class="built_in">min</span>(n+m<span class="number">-1</span>,(<span class="number">1ll</span>&lt;&lt;(i+<span class="number">1</span>))<span class="number">-2</span>)-<span class="built_in">max</span>(n,(ll)(<span class="number">1ll</span>&lt;&lt;i)<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//块间数量</span></span><br><span class="line">        <span class="comment">//l对应块的左端点需大于等于n+m-1，r对应块的右端点需小于等于n，我这里直接整体都取min和max了</span></span><br><span class="line">        res=res*<span class="built_in">qpow</span>(((<span class="number">1</span>-<span class="built_in">qpow</span>(inv2,i,mod))%mod+mod)%mod,length,mod)%mod;</span><br><span class="line">        <span class="comment">//用到了两次快速幂：1-1/2^k,累乘块长度个概率</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目K"><a href="#题目K" class="headerlink" title="题目K"></a>题目K</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个无向图<script type="math/tex">G(n, m)</script>，可以将其中任意一条边用两条边替换，每条边的长度都为<script type="math/tex">1</script>，可以操作任意多次（也可以不操作）。问经过这<br>样处理之后，从 1 号节点出发，至多走 k 步最多可以到多少个节点。<br>数据范围： <script type="math/tex">1 ≤ n ≤ 10^5， 1 ≤ m ≤ 2 × 10^5， 1 ≤ k ≤ 10^9</script>。  </p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，我们要知道<strong>bfs树</strong>的概念，bfs树就是通过bfs从一个指定为树根开始遍历一个图得到的树形结构，既然是树形结构，就没有环。</p><p>那么如何构建bfs树？（因为本题求距离1小于等于k的结点数，所以我这里就以1为根节点构建距离1小于等于k的所有结点形成的树）</p><p>从树根开始做bfs，每一个u通过一条边edge连向v，如果v第一次被更新则这条边为bfs树边，这个点也被加到bfs树结点中，不满足树需要的条件是结束。</p><p>显然，<strong>我们要探究的是分裂哪些边？如何选择？</strong></p><p>假设k=1e9,如果我们选择分裂与1相邻的边，那么原来结点1连向的点如果有多个边连向其它点，那么这些贡献就会损失，由此可推出应该尽可能保留原有的距离1小于等于k的点。——①</p><p><strong>结论：</strong></p><ul><li>通过分析发现，我们应该保留原来可以在k步内能到达的点，而去分裂这些点之间多余的边，即删去这些边仍能到达这些点，这些边即bfs树结点之间的非bfs树边。</li></ul><p>如下图，假设最上面的顶点为1，红色即为无用边，删去后所有点与根节点的最短距离不变且最短距离所在路径仍存在。</p><p><img src="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230719211128036.png" alt="image-20230719211128036"></p><p><img src="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/Users\79906\AppData\Roaming\Typora\typora-user-images\image-20230719212009390.png" alt="image-20230719212009390"></p><ul><li><p>情况2，bfs树的叶子结点如果没有连向bfs树其它结点的非bfs树边，则在这个点与它的父节点之间分裂边</p><p>（上面①处分析了损失贡献的分裂边损失贡献的原因，而叶子结点与它的父节点之间分裂边不会损失贡献）</p></li></ul><p><strong>总而言之：bfs树直接解决了分裂哪些边的问题。①所有bfs树结点之间的非bfs树边②bfs树的叶子节点与它的父节点之间的边且该叶子节点不能有一条连向bfs树结点的非bfs树边</strong></p><h2 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：O(mlogm)（遍历所有边m，标记bfs树边使用了map，每次操作logm）</strong></p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edge</span>(n+<span class="number">1</span>);<span class="comment">//bool用来标记是否是bfs树边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">bool</span>&gt; mp;<span class="comment">//边是否是bfs树边</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(n+<span class="number">1</span>,<span class="number">-1</span>)</span>,bfsver,<span class="title">pre</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">//dist存结点到根节点1的距离，bfsver存储bfs树结点，pre存储每个bfs树点的父节点</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n+<span class="number">1</span>)</span></span>;<span class="comment">//标记是否是bfs树上的点</span></span><br><span class="line">    st[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    bfsver.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//1是bfs树点</span></span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(dist[u]==k) <span class="keyword">break</span>;<span class="comment">//只求距离根节点小于等于k部分的树</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v);</span><br><span class="line">            mp[&#123;<span class="built_in">min</span>(u,v),<span class="built_in">max</span>(u,v)&#125;]=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//为了降低时间复杂度，所以我直接用&#123;min(u,v),max(u,v)&#125;来同时表示双向边都是bfs树边</span></span><br><span class="line">            dist[v]=dist[u]+<span class="number">1</span>;</span><br><span class="line">            pre[v]=u;</span><br><span class="line">            st[v]=<span class="literal">true</span>;</span><br><span class="line">            bfsver.<span class="built_in">push_back</span>(v);<span class="comment">//将bfs树点加入遇到bfsver中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=(<span class="type">int</span>)bfsver.<span class="built_in">size</span>();<span class="comment">//bfs树上的点都保留，这些点都会是答案的一部分</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bfsver.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=bfsver[i];</span><br><span class="line">        <span class="type">bool</span> is_cal=<span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> is_leaf=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">            <span class="type">bool</span> flag=mp[&#123;<span class="built_in">min</span>(u,v),<span class="built_in">max</span>(u,v)&#125;];</span><br><span class="line">            <span class="keyword">if</span>(st[v]&amp;&amp;!flag)&#123;<span class="comment">//如果这个bfs树点通过非bfs树边连向了bfs树点，那么这条边可以分裂</span></span><br><span class="line">                res+=k-dist[u];</span><br><span class="line">                is_cal=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pre[v]==u)&#123;</span><br><span class="line">                is_leaf=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!is_cal&amp;&amp;is_leaf&amp;&amp;u!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//如果这个点是叶子结点且没有通过非bfs树边连向其它bfs树点，则这个点和它的父节点之间的边可以分裂</span></span><br><span class="line">            res+=k-dist[u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目M"><a href="#题目M" class="headerlink" title="题目M"></a>题目M</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个杯子的容积a,b，你可以进行这四种操作：</p><ul><li>将其中一个杯子装满水</li><li>倒走其中一个杯子中的所有水</li><li>喝掉其中一个杯子的所有水</li><li>将尽可能多的水从其中一个杯子转移到另一个杯子，保证不溢出</li></ul><p>问能喝到c单位水的体积需要的最少操作次数。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>设喝a水杯和b水杯的次数分别为x,y，得：<script type="math/tex">ax+by=c</script></p><p>根据裴蜀定理，若<script type="math/tex">gcd(a,b)|c</script>，那么有解，否则无解输出-1</p><p>若有解，讨论x,y的正负性与操作次数的关系。</p><ul><li><p>当x≥0且y≥0，每次喝水即倒入和喝水两次操作，结果为2*(x+y)</p></li><li><p>令a<b，剩下x<0且y>0一种情况,每次喝水先倒入b，再倒入倒出多次a，再喝掉b中的水，但最后一次不需要倒走a中的水，所以结果为2*|x-y|-1</b，剩下x<0且y></p></li></ul><p>讨论x,y的绝对值最小的四种情况即可。</p><h2 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度:<script type="math/tex">O(Tlogx)</script></p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回gcd(a,b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="type">int</span> x0,y0;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(a,b,x0,y0);</span><br><span class="line">    <span class="keyword">if</span>(c%d!=<span class="number">0</span>)&#123;<span class="comment">//裴蜀定理，不能整除表示无解</span></span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x1=x0*c/d,y1=y0*c/d;</span><br><span class="line">    <span class="type">int</span> t1=<span class="built_in">abs</span>(b/d),t2=a/d;</span><br><span class="line">    <span class="comment">//枚举x，y的绝对值最小的四种情况。</span></span><br><span class="line">    <span class="comment">//x为最小非负数</span></span><br><span class="line">    <span class="type">int</span> x=(x1%t1+t1)%t1;</span><br><span class="line">    <span class="type">int</span> y=(c-a*x)/b;</span><br><span class="line">    <span class="type">int</span> res=(x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>)?<span class="number">2</span>*(x+y):<span class="number">2</span>*<span class="built_in">abs</span>(x-y)<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//x为最大负数</span></span><br><span class="line">    x=(x1%t1+t1)%t1-t1;</span><br><span class="line">    y=(c-a*x)/b;</span><br><span class="line">    res=<span class="built_in">min</span>(res,(x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>)?<span class="number">2</span>*(x+y):<span class="number">2</span>*<span class="built_in">abs</span>(x-y)<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//y为最小非负数</span></span><br><span class="line">    y=(y1%t2+t2)%t2;</span><br><span class="line">    x=(c-b*y)/a;</span><br><span class="line">    res=<span class="built_in">min</span>(res,(x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>)?<span class="number">2</span>*(x+y):<span class="number">2</span>*<span class="built_in">abs</span>(x-y)<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//y为最大负数</span></span><br><span class="line">    y=(y1%t2+t2)%t2-t2;</span><br><span class="line">    x=(c-b*y)/a;</span><br><span class="line">    res=<span class="built_in">min</span>(res,(x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>)?<span class="number">2</span>*(x+y):<span class="number">2</span>*<span class="built_in">abs</span>(x-y)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第九场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Puzzle-Square-Jam"><a href="#Puzzle-Square-Jam" class="headerlink" title="Puzzle: Square Jam"></a>Puzzle: Square Jam</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个<script type="math/tex">n\times m</script>的矩形，要求你将其分割成若干个正方形，使得没有一个点是四个正方形的交点、</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>用辗转相减法可以完美解决，对于每个矩形，每次切割一个最大的正方形进行递归处理即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,l;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Node&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x2-x1!=y2-y1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x2-x1&gt;y2-y1)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>((Node)&#123;x1,y1,y2-y1+<span class="number">1</span>&#125;);</span><br><span class="line">            <span class="built_in">dfs</span>(x1+(y2-y1+<span class="number">1</span>),y1,x2,y2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>((Node)&#123;x1,y1,x2-x1+<span class="number">1</span>&#125;);</span><br><span class="line">            <span class="built_in">dfs</span>(x1,y1+(x2-x1+<span class="number">1</span>),x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>((Node)&#123;x1,y1,x2-x1+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,n,m);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;ans[i].x<span class="number">-1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans[i].y<span class="number">-1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans[i].l&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Non-Puzzle-Error-Permutation"><a href="#Non-Puzzle-Error-Permutation" class="headerlink" title="Non-Puzzle: Error Permutation"></a>Non-Puzzle: Error Permutation</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为<script type="math/tex">n</script>的全排列，计算满足以下条件的子段的数量。</p><p>条件：对于子段中的每个i，满足子段中的第i个位置不是第i小。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>（写的比较啰嗦，因为感觉表达的不清楚就想讲详细一点）</p><p>正向考虑即找到有多少个区间满足每个位置i上的数都不是第i小。</p><p>正难则反，考虑计算所有子段数量减去不符合条件的子段数量。</p><p>所有字段数量显然<script type="math/tex">1+2+\ldots+n=n\times (n+1)/2</script></p><p>重点就是对不符合条件的子段数量进行计算：</p><p>首先预处理每个数右边所有比他小的数的下标，显然可以<script type="math/tex">O(n^2)</script>完成。</p><p>因为我们这里是找不符合条件的子段，即这个子段中有一个位置i上的数是这个子段的第i小。</p><p>考虑计算每一个数作为区间第i小的数而导致不符合子段条件的子段数量。（这里的导致不符合字段条件就是区间第i小的数刚好位于第i位）</p><p>这句话可能有点抽象，例如{4,2,3,5,1}，当3作为区间第2小数(既然这时要不符合条件那么它一定在区间的第2个位置)，这时候不符合条件的区间有[2,3],[2,4]。也就是区间左端点为2，右端点为[3,4]这个区间。</p><p>那么我们可以枚举每个数和它作为区间第i小数而导致不符合子段条件，然后计算每个这样的情况的贡献。</p><p>但是，显然，如2作为区间第1小数而不符合子段条件的其中一个区间[2,3]和3作为区间第2小数不符合子段条件的其中一个区间[2,3]贡献的计算重复，如何避免这个问题呢？可以发现，对于每个数作为区间第i小数时的贡献，左端点固定，右端点是一个连续的区间，那么我么可以将右端点的一个连续区间存入vector[左端点]中，最后合并vector[左端点]中的所有区间，这样就能避免重复。</p><p>那么怎么找这个左右端点？首先对于一个数x，当他作为区间第i小数而导致不符合子段条件（即这个数在区间中位于第i个位置且为区间第i小数，这两个条件同时满足），那么它的左端点就是这个数左边第i-1位（第0位就是它自己），比如那个例子，{6,4,2,3,5,1}，当3作为区间第2小数且位区间第2个位置时，显然左端点就在下标为3上，这样才满足它在以3为左端点的第2个位置；那么它的右端点怎么考虑，我们可以看一下左端点到3这个数有几个小于3的数，例如这个例子上有1个也就是下表为3的数字2，记下标4右边第i个比p[4]小的数为<script type="math/tex">rle[4][i]</script>，则它的右端点应该为一个区间<script type="math/tex">[4,rle[4][1]-1]</script>，而如果是3这个数的左边没有比他小的数（左端点为下标3）例如这个例子,{2,4,6,3,5,1}，那么它的右端点就是区间<script type="math/tex">[rle[4][1],rle[4][2]-1]</script>。总而言之，就是要想满足一个数x在一个区间中位于第i个位置且第i小，即要满足这个数左边比它小的数的数量加上右边比它小的数的数量等于i-1，这样才能让这个数第i小。</p><p>而左边的比它小的数的数量在每次左移左区间时累加，右区间通过上述方法得到。</p><h2 id="参考代码-带较详细的注释"><a href="#参考代码-带较详细的注释" class="headerlink" title="参考代码(带较详细的注释)"></a>参考代码(带较详细的注释)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line">vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; v;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;p[i];</span><br><span class="line">        pos[p[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=n*(n+<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//总的子段数量</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">rle</span>(n+<span class="number">1</span>);<span class="comment">//rle[i][j]表示记录下标为i的点右边第j+1个比它小的数</span></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    v.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i])&#123;</span><br><span class="line">                rle[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">            <span class="type">int</span> totk=i-j+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i]) cnt++;<span class="comment">//位置i到左端点比p[i]小的数量</span></span><br><span class="line">            <span class="type">int</span> rk=totk-cnt<span class="number">-1</span>;<span class="comment">//相应的，要使这个位置第totk小，那么它的右边应该有rk个比它小的</span></span><br><span class="line">            <span class="type">int</span> m=rle[i].<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> l,r;<span class="comment">//左端点即j，右端点在一个区间内都符合</span></span><br><span class="line">            <span class="comment">//这里的l,r就是指右端点这个区间的[l,r]</span></span><br><span class="line">            <span class="keyword">if</span>(m&gt;=rk)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rk<span class="number">-1</span>==<span class="number">-1</span>)&#123;</span><br><span class="line">                    l=i;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    l=rle[i][rk<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m&gt;rk)&#123;</span><br><span class="line">                r=rle[i][rk]<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r=n;</span><br><span class="line">            &#125;</span><br><span class="line">            v[j].<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;j&lt;&lt;&#x27; &#x27;&lt;&lt;l&lt;&lt;&#x27; &#x27;&lt;&lt;r&lt;&lt;&#x27;\n&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//对于每个左端点i都有若干个右端点v[i]满足条件（区间第i个数为区间第i小数）</span></span><br><span class="line">        <span class="comment">//大家都非常熟悉的区间合并，只不过这里合并了区间只需要累加合并成的大区间的大小即可</span></span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(),v[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l=<span class="number">-1</span>,r=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;v[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">-1</span>)&#123;</span><br><span class="line">                l=v[i][j].first,r=v[i][j].second;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(v[i][j].first&lt;=r)&#123;</span><br><span class="line">                r=<span class="built_in">max</span>(r,v[i][j].second);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans2+=r-l+<span class="number">1</span>;</span><br><span class="line">                l=v[i][j].first,r=v[i][j].second;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        ans2+=r-l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;ans&lt;&lt;&#x27; &#x27;&lt;&lt;&quot;ans2:&quot;&lt;&lt;ans2&lt;&lt;&#x27;\n&#x27;;</span></span><br><span class="line">    cout&lt;&lt;ans-ans2&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Non-Puzzle-Game"><a href="#Non-Puzzle-Game" class="headerlink" title="Non-Puzzle: Game"></a>Non-Puzzle: Game</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>黑板上有n个数字，Alice和Bob轮流玩，Alice先手，每次玩家必须在黑板上选择两个数<script type="math/tex">i,j</script>（i，j可以相等）写在黑板上，在黑板上写数字k的人获胜。输出获胜结果，如果永远不会获胜输出平局。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>显然，如果n个数字中存在两个数（可以相同）异或等于k，则Alice获胜。直接将每个数存入桶中，然后对于每个数x找桶中是否存在<script type="math/tex">x\oplus k</script>。</p><p>否则，若对于任意的i,j，都存在p，使得<script type="math/tex">a[i]\oplus a[j]=a[p]\oplus k</script>，因为<script type="math/tex">k\oplus k=0</script>，原式可变形为<strong>①对于任意的<script type="math/tex">i,j</script>，都存在p，使得<script type="math/tex">(a[i]\oplus k)\oplus (a[j]\oplus k)=a[p]\oplus k</script></strong>，如果集合A表示为{序列a中每个元素异或上k的值}，那么①就相当于A集合中的元素异或上A集合中的元素仍为A集合中的元素，也就是A集合在xor意义下的形成的向量空间严格等于A，那么判断A集合的线性基能表示出的向量空间严格等于A即可。</p><p>怎么判断呢？（因为刚学，专业名词可能用的不太准确，欢迎纠正 /可怜 ）</p><p>令m为A集合不重复的数量，n为A集合的线性基数量，n个线性基能表示的向量空间的元素个数为<script type="math/tex">2^n</script>（1LL&lt;&lt;(n-1))，如果A集合的线性基形成的向量空间严格等于A集合，那么n个线性基表示出的向量空间的元素个数应该于去重后的A集合相等，也就是与m相等。</p><p>所以判断<script type="math/tex">(1LL<<(n-1))</script>是否等于<script type="math/tex">m</script>即可。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gauss</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> &amp;n)</span></span>&#123;              <span class="comment">//高斯消元求线性基</span></span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">1</span>;             <span class="comment">//k标记当前第几行</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> j = (<span class="type">long</span> <span class="type">long</span>)<span class="number">1</span>&lt;&lt;<span class="number">62</span>;      <span class="comment">//注意不是63，因为a[i]&amp;(1&lt;&lt;0)时为第1位</span></span><br><span class="line">    <span class="keyword">for</span>(;j;j&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=k;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;j)  <span class="keyword">break</span>;      <span class="comment">//找到第j位是1的a[]</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) <span class="keyword">continue</span>;      <span class="comment">//没有第j位是1的a[]</span></span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[k]);             <span class="comment">//把这一行换到上面</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)            <span class="comment">//生成简化阶梯矩阵</span></span><br><span class="line">            <span class="keyword">if</span>(i != k &amp;&amp; a[i]&amp;j)     a[i]^=a[k];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    n = k;                           <span class="comment">//线性基中元素的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt; mp;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        mp[a[i]]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[a[i]^k])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        b[i]=a[i]^k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">Gauss</span>(b,n);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1LL</span>&lt;&lt;(n<span class="number">-1</span>)==m)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Draw\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第二场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="The-Game-of-Eating"><a href="#The-Game-of-Eating" class="headerlink" title="The Game of Eating"></a>The Game of Eating</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有n个人，m道菜，总共要点k道菜。</p><p>给出每个人对每道菜的喜爱度，问如果每个人只考虑最终点的菜使得自己对这些菜的喜爱度之和最大，最终会点到哪些菜，按升序排列。</p><p>从第1个人开始点到第n个人，点完后再从第1个人点到第n个人，点到k道菜为止。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑贪心，每个人考虑菜时，如果后面的人会点自己喜欢的菜，那么它不必考虑这样菜，直接点后面的人不会点的菜中喜爱度最大的菜。</p><p>如此可直接转化为倒着贪心点菜，每次取还没点过的喜爱度最大的菜。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度：<script type="math/tex">O(nmlogm+k)</script></strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> v,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w)&#123;</span><br><span class="line">        <span class="keyword">return</span> v&gt;w.v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pos[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,(m+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j].v;</span><br><span class="line">            a[i][j].id=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">sort</span>(&amp;a[i][<span class="number">1</span>],&amp;a[i][<span class="number">1</span>+m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cur=(k<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(st[a[cur][pos[cur]].id])&#123;</span><br><span class="line">            pos[cur]++;</span><br><span class="line">        &#125;</span><br><span class="line">        st[a[cur][pos[cur]].id]=<span class="literal">true</span>;</span><br><span class="line">        cur=((cur<span class="number">-1</span>)+n<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i]) cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Square"><a href="#Square" class="headerlink" title="Square"></a>Square</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个x，找到一个y，k，使得<script type="math/tex">\lfloor \frac{y^2}{10^k} \rfloor =x</script>，输出y</p><script type="math/tex; mode=display">0 \le x \le 10^9,0 \le y \le 10^9, k∈N</script><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察到k的可能范围只有0~18，而固定k后<script type="math/tex">\lfloor \frac{y^2}{10^k} \rfloor</script>满足单调性，因此直接枚举k对y做二分。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：<script type="math/tex">O(klogy)</script></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p10[<span class="number">19</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y*y/p10[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">18</span>;k++)&#123;<span class="comment">//遍历k，二分枚举y</span></span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1000000000ll</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">cal</span>(mid,k)&gt;=x) r=mid;<span class="comment">//大于等于</span></span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cal</span>(l,k)==x)&#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    p10[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++) p10[i]=p10[i<span class="number">-1</span>]*<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Link-with-Chess-Game"><a href="#Link-with-Chess-Game" class="headerlink" title="Link with Chess Game"></a>Link with Chess Game</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个<script type="math/tex">1\times n</script>的棋盘，给定<script type="math/tex">r,g,b</script>为红、绿、蓝三个棋子的位置（棋子可重叠），两人轮流移动一个棋子到附近的一格，若移动后状态与之前出现过的状态相同则输，对方赢。输出最优策略下谁赢。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>sg函数打表找规律。</p><p>n从1到10遍历，每个n遍历每个棋子可能的状态。考虑状态转移，每次状态转移即取其中一个棋子向附近一个移动并且此时的状态不能已经出现过，记录每个状态所能到达状态的sg值（即这里的数组dp）取mex。</p><p>代码如下：</p><p>因为这里不需要拆分产生sg值异或操作，所以这里的sg值数组即dp数组定义成了bool类型，减少运行时间同时也使输出结果更加清晰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dz[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">bool</span> dp[N][N][N],vis[N][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mex</span><span class="params">(<span class="keyword">auto</span> v)</span></span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:v)&#123;</span><br><span class="line">        S.<span class="built_in">insert</span>(it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i)) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">1</span>;y&lt;=n;y++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">1</span>;z&lt;=n;z++)&#123;</span><br><span class="line">                <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">                <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">                <span class="keyword">auto</span> sg=[&amp;](<span class="keyword">auto</span> self,<span class="type">int</span> r,<span class="type">int</span> g,<span class="type">int</span> b)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">                    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">                    vis[r][g][b]=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)&#123;</span><br><span class="line">                        <span class="type">int</span> X=r+dx[k],Y=g+dy[k],Z=b+dz[k];</span><br><span class="line">                        <span class="keyword">if</span>(X&gt;=<span class="number">1</span>&amp;&amp;X&lt;=n&amp;&amp;Y&gt;=<span class="number">1</span>&amp;&amp;Y&lt;=n&amp;&amp;Z&gt;=<span class="number">1</span>&amp;&amp;Z&lt;=n&amp;&amp;!vis[X][Y][Z])&#123;</span><br><span class="line">                            <span class="built_in">self</span>(self,X,Y,Z);</span><br><span class="line">                            s.<span class="built_in">insert</span>(dp[X][Y][Z]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[r][g][b]=<span class="built_in">mex</span>(s);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">sg</span>(sg,x,y,z);</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;n=&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;z&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;dp[x][y][z]&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">calc</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int n,a,b,c;</span></span><br><span class="line">    <span class="comment">// cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span></span><br><span class="line">    <span class="comment">// if(n%2==0||(a+b+c)%2==0)&#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;&quot;Alice&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;&quot;Bob&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里取其中的一部分：</p><p>n=1,{x,y,z}=1 1 1-&gt;0</p><p>n=2,{x,y,z}=1 1 1-&gt;1<br>n=2,{x,y,z}=1 1 2-&gt;1<br>n=2,{x,y,z}=1 2 1-&gt;1<br>n=2,{x,y,z}=1 2 2-&gt;1<br>n=2,{x,y,z}=2 1 1-&gt;1<br>n=2,{x,y,z}=2 1 2-&gt;1<br>n=2,{x,y,z}=2 2 1-&gt;1<br>n=2,{x,y,z}=2 2 2-&gt;1</p><p>n=3,{x,y,z}=1 1 1-&gt;0<br>n=3,{x,y,z}=1 1 2-&gt;1<br>n=3,{x,y,z}=1 1 3-&gt;0<br>n=3,{x,y,z}=1 2 1-&gt;1<br>n=3,{x,y,z}=1 2 2-&gt;0<br>n=3,{x,y,z}=1 2 3-&gt;1<br>n=3,{x,y,z}=1 3 1-&gt;0<br>n=3,{x,y,z}=1 3 2-&gt;1<br>n=3,{x,y,z}=1 3 3-&gt;0<br>n=3,{x,y,z}=2 1 1-&gt;1<br>n=3,{x,y,z}=2 1 2-&gt;0<br>n=3,{x,y,z}=2 1 3-&gt;1<br>n=3,{x,y,z}=2 2 1-&gt;0<br>n=3,{x,y,z}=2 2 2-&gt;1<br>n=3,{x,y,z}=2 2 3-&gt;0<br>n=3,{x,y,z}=2 3 1-&gt;1<br>n=3,{x,y,z}=2 3 2-&gt;0<br>n=3,{x,y,z}=2 3 3-&gt;1<br>n=3,{x,y,z}=3 1 1-&gt;0<br>n=3,{x,y,z}=3 1 2-&gt;1<br>n=3,{x,y,z}=3 1 3-&gt;0<br>n=3,{x,y,z}=3 2 1-&gt;1<br>n=3,{x,y,z}=3 2 2-&gt;0<br>n=3,{x,y,z}=3 2 3-&gt;1<br>n=3,{x,y,z}=3 3 1-&gt;0<br>n=3,{x,y,z}=3 3 2-&gt;1<br>n=3,{x,y,z}=3 3 3-&gt;0</p><p>n=4,{x,y,z}=1 1 1-&gt;1<br>n=4,{x,y,z}=1 1 2-&gt;1<br>n=4,{x,y,z}=1 1 3-&gt;1<br>n=4,{x,y,z}=1 1 4-&gt;1<br>n=4,{x,y,z}=1 2 1-&gt;1<br>n=4,{x,y,z}=1 2 2-&gt;1<br>n=4,{x,y,z}=1 2 3-&gt;1<br>n=4,{x,y,z}=1 2 4-&gt;1<br>n=4,{x,y,z}=1 3 1-&gt;1<br>n=4,{x,y,z}=1 3 2-&gt;1<br>n=4,{x,y,z}=1 3 3-&gt;1<br>n=4,{x,y,z}=1 3 4-&gt;1<br>n=4,{x,y,z}=1 4 1-&gt;1<br>n=4,{x,y,z}=1 4 2-&gt;1<br>n=4,{x,y,z}=1 4 3-&gt;1<br>n=4,{x,y,z}=1 4 4-&gt;1<br>n=4,{x,y,z}=2 1 1-&gt;1<br>n=4,{x,y,z}=2 1 2-&gt;1<br>n=4,{x,y,z}=2 1 3-&gt;1<br>n=4,{x,y,z}=2 1 4-&gt;1<br>n=4,{x,y,z}=2 2 1-&gt;1<br>n=4,{x,y,z}=2 2 2-&gt;1<br>n=4,{x,y,z}=2 2 3-&gt;1<br>n=4,{x,y,z}=2 2 4-&gt;1<br>n=4,{x,y,z}=2 3 1-&gt;1<br>n=4,{x,y,z}=2 3 2-&gt;1<br>n=4,{x,y,z}=2 3 3-&gt;1<br>n=4,{x,y,z}=2 3 4-&gt;1<br>n=4,{x,y,z}=2 4 1-&gt;1<br>n=4,{x,y,z}=2 4 2-&gt;1<br>n=4,{x,y,z}=2 4 3-&gt;1<br>n=4,{x,y,z}=2 4 4-&gt;1<br>n=4,{x,y,z}=3 1 1-&gt;1<br>n=4,{x,y,z}=3 1 2-&gt;1<br>n=4,{x,y,z}=3 1 3-&gt;1<br>n=4,{x,y,z}=3 1 4-&gt;1<br>n=4,{x,y,z}=3 2 1-&gt;1<br>n=4,{x,y,z}=3 2 2-&gt;1<br>n=4,{x,y,z}=3 2 3-&gt;1<br>n=4,{x,y,z}=3 2 4-&gt;1<br>n=4,{x,y,z}=3 3 1-&gt;1<br>n=4,{x,y,z}=3 3 2-&gt;1<br>n=4,{x,y,z}=3 3 3-&gt;1<br>n=4,{x,y,z}=3 3 4-&gt;1<br>n=4,{x,y,z}=3 4 1-&gt;1<br>n=4,{x,y,z}=3 4 2-&gt;1<br>n=4,{x,y,z}=3 4 3-&gt;1<br>n=4,{x,y,z}=3 4 4-&gt;1<br>n=4,{x,y,z}=4 1 1-&gt;1<br>n=4,{x,y,z}=4 1 2-&gt;1<br>n=4,{x,y,z}=4 1 3-&gt;1<br>n=4,{x,y,z}=4 1 4-&gt;1<br>n=4,{x,y,z}=4 2 1-&gt;1<br>n=4,{x,y,z}=4 2 2-&gt;1<br>n=4,{x,y,z}=4 2 3-&gt;1<br>n=4,{x,y,z}=4 2 4-&gt;1<br>n=4,{x,y,z}=4 3 1-&gt;1<br>n=4,{x,y,z}=4 3 2-&gt;1<br>n=4,{x,y,z}=4 3 3-&gt;1<br>n=4,{x,y,z}=4 3 4-&gt;1<br>n=4,{x,y,z}=4 4 1-&gt;1<br>n=4,{x,y,z}=4 4 2-&gt;1<br>n=4,{x,y,z}=4 4 3-&gt;1<br>n=4,{x,y,z}=4 4 4-&gt;1</p><p>n=5,{x,y,z}=1 1 1-&gt;0<br>n=5,{x,y,z}=1 1 2-&gt;1<br>n=5,{x,y,z}=1 1 3-&gt;0<br>n=5,{x,y,z}=1 1 4-&gt;1<br>n=5,{x,y,z}=1 1 5-&gt;0<br>n=5,{x,y,z}=1 2 1-&gt;1<br>n=5,{x,y,z}=1 2 2-&gt;0<br>n=5,{x,y,z}=1 2 3-&gt;1<br>n=5,{x,y,z}=1 2 4-&gt;0<br>n=5,{x,y,z}=1 2 5-&gt;1<br>n=5,{x,y,z}=1 3 1-&gt;0<br>n=5,{x,y,z}=1 3 2-&gt;1<br>n=5,{x,y,z}=1 3 3-&gt;0<br>n=5,{x,y,z}=1 3 4-&gt;1<br>n=5,{x,y,z}=1 3 5-&gt;0<br>n=5,{x,y,z}=1 4 1-&gt;1<br>n=5,{x,y,z}=1 4 2-&gt;0<br>n=5,{x,y,z}=1 4 3-&gt;1<br>n=5,{x,y,z}=1 4 4-&gt;0<br>n=5,{x,y,z}=1 4 5-&gt;1<br>n=5,{x,y,z}=1 5 1-&gt;0<br>n=5,{x,y,z}=1 5 2-&gt;1<br>n=5,{x,y,z}=1 5 3-&gt;0<br>n=5,{x,y,z}=1 5 4-&gt;1<br>n=5,{x,y,z}=1 5 5-&gt;0<br>n=5,{x,y,z}=2 1 1-&gt;1<br>n=5,{x,y,z}=2 1 2-&gt;0<br>n=5,{x,y,z}=2 1 3-&gt;1<br>n=5,{x,y,z}=2 1 4-&gt;0<br>n=5,{x,y,z}=2 1 5-&gt;1<br>n=5,{x,y,z}=2 2 1-&gt;0<br>n=5,{x,y,z}=2 2 2-&gt;1<br>n=5,{x,y,z}=2 2 3-&gt;0<br>n=5,{x,y,z}=2 2 4-&gt;1<br>n=5,{x,y,z}=2 2 5-&gt;0<br>n=5,{x,y,z}=2 3 1-&gt;1<br>n=5,{x,y,z}=2 3 2-&gt;0<br>n=5,{x,y,z}=2 3 3-&gt;1<br>n=5,{x,y,z}=2 3 4-&gt;0<br>n=5,{x,y,z}=2 3 5-&gt;1<br>n=5,{x,y,z}=2 4 1-&gt;0<br>n=5,{x,y,z}=2 4 2-&gt;1<br>n=5,{x,y,z}=2 4 3-&gt;0<br>n=5,{x,y,z}=2 4 4-&gt;1<br>n=5,{x,y,z}=2 4 5-&gt;0<br>n=5,{x,y,z}=2 5 1-&gt;1<br>n=5,{x,y,z}=2 5 2-&gt;0<br>n=5,{x,y,z}=2 5 3-&gt;1<br>n=5,{x,y,z}=2 5 4-&gt;0<br>n=5,{x,y,z}=2 5 5-&gt;1<br>n=5,{x,y,z}=3 1 1-&gt;0<br>n=5,{x,y,z}=3 1 2-&gt;1<br>n=5,{x,y,z}=3 1 3-&gt;0<br>n=5,{x,y,z}=3 1 4-&gt;1<br>n=5,{x,y,z}=3 1 5-&gt;0<br>n=5,{x,y,z}=3 2 1-&gt;1<br>n=5,{x,y,z}=3 2 2-&gt;0<br>n=5,{x,y,z}=3 2 3-&gt;1<br>n=5,{x,y,z}=3 2 4-&gt;0<br>n=5,{x,y,z}=3 2 5-&gt;1<br>n=5,{x,y,z}=3 3 1-&gt;0<br>n=5,{x,y,z}=3 3 2-&gt;1<br>n=5,{x,y,z}=3 3 3-&gt;0<br>n=5,{x,y,z}=3 3 4-&gt;1<br>n=5,{x,y,z}=3 3 5-&gt;0<br>n=5,{x,y,z}=3 4 1-&gt;1<br>n=5,{x,y,z}=3 4 2-&gt;0<br>n=5,{x,y,z}=3 4 3-&gt;1<br>n=5,{x,y,z}=3 4 4-&gt;0<br>n=5,{x,y,z}=3 4 5-&gt;1<br>n=5,{x,y,z}=3 5 1-&gt;0<br>n=5,{x,y,z}=3 5 2-&gt;1<br>n=5,{x,y,z}=3 5 3-&gt;0<br>n=5,{x,y,z}=3 5 4-&gt;1<br>n=5,{x,y,z}=3 5 5-&gt;0<br>n=5,{x,y,z}=4 1 1-&gt;1<br>n=5,{x,y,z}=4 1 2-&gt;0<br>n=5,{x,y,z}=4 1 3-&gt;1<br>n=5,{x,y,z}=4 1 4-&gt;0<br>n=5,{x,y,z}=4 1 5-&gt;1<br>n=5,{x,y,z}=4 2 1-&gt;0<br>n=5,{x,y,z}=4 2 2-&gt;1<br>n=5,{x,y,z}=4 2 3-&gt;0<br>n=5,{x,y,z}=4 2 4-&gt;1<br>n=5,{x,y,z}=4 2 5-&gt;0<br>n=5,{x,y,z}=4 3 1-&gt;1<br>n=5,{x,y,z}=4 3 2-&gt;0<br>n=5,{x,y,z}=4 3 3-&gt;1<br>n=5,{x,y,z}=4 3 4-&gt;0<br>n=5,{x,y,z}=4 3 5-&gt;1<br>n=5,{x,y,z}=4 4 1-&gt;0<br>n=5,{x,y,z}=4 4 2-&gt;1<br>n=5,{x,y,z}=4 4 3-&gt;0<br>n=5,{x,y,z}=4 4 4-&gt;1<br>n=5,{x,y,z}=4 4 5-&gt;0<br>n=5,{x,y,z}=4 5 1-&gt;1<br>n=5,{x,y,z}=4 5 2-&gt;0<br>n=5,{x,y,z}=4 5 3-&gt;1<br>n=5,{x,y,z}=4 5 4-&gt;0<br>n=5,{x,y,z}=4 5 5-&gt;1<br>n=5,{x,y,z}=5 1 1-&gt;0<br>n=5,{x,y,z}=5 1 2-&gt;1<br>n=5,{x,y,z}=5 1 3-&gt;0<br>n=5,{x,y,z}=5 1 4-&gt;1<br>n=5,{x,y,z}=5 1 5-&gt;0<br>n=5,{x,y,z}=5 2 1-&gt;1<br>n=5,{x,y,z}=5 2 2-&gt;0<br>n=5,{x,y,z}=5 2 3-&gt;1<br>n=5,{x,y,z}=5 2 4-&gt;0<br>n=5,{x,y,z}=5 2 5-&gt;1<br>n=5,{x,y,z}=5 3 1-&gt;0<br>n=5,{x,y,z}=5 3 2-&gt;1<br>n=5,{x,y,z}=5 3 3-&gt;0<br>n=5,{x,y,z}=5 3 4-&gt;1<br>n=5,{x,y,z}=5 3 5-&gt;0<br>n=5,{x,y,z}=5 4 1-&gt;1<br>n=5,{x,y,z}=5 4 2-&gt;0<br>n=5,{x,y,z}=5 4 3-&gt;1<br>n=5,{x,y,z}=5 4 4-&gt;0<br>n=5,{x,y,z}=5 4 5-&gt;1<br>n=5,{x,y,z}=5 5 1-&gt;0<br>n=5,{x,y,z}=5 5 2-&gt;1<br>n=5,{x,y,z}=5 5 3-&gt;0<br>n=5,{x,y,z}=5 5 4-&gt;1<br>n=5,{x,y,z}=5 5 5-&gt;0</p><p>容易发现，n为偶数时或x+y+z为偶数时，sg值为1即先手必胜，否则先手必败。</p><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度:<script type="math/tex">O(1)</script></strong></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=10;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     calc(i);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,a,b,c;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>||(a+b+c)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Link-with-Centrally-Symmetric-Strings"><a href="#Link-with-Centrally-Symmetric-Strings" class="headerlink" title="Link with Centrally Symmetric Strings"></a>Link with Centrally Symmetric Strings</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个字符串，问这个串是否有多个连续的中心对称的子串构成。</p><p>字母o,s,x,z是中心对称的；若字符串S中心对称，那么<em>b<strong>S</strong>q</em>∣<em>d<strong>S</strong>p</em>∣<em>p<strong>S</strong>d</em>∣<em>q<strong>S</strong>b</em>∣<em>n<strong>S</strong>u</em>∣<em>u<strong>S</strong>n</em>∣<em>o<strong>S</strong>o</em>∣<em>s<strong>S</strong>s</em>∣<em>x<strong>S</strong>x</em>∣<em>z<strong>S</strong>z</em>|也中心对称。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>i从左往右遍历，考虑能与当前位置右侧能构成中心对称的最近子串，若能i跳到该子串右侧（若i位置字符中心对称，i跳到下一位置），若都不能则原串不是中心对称字符串。</p><p>按照这个思路，从左往右哈希，然后把所有能构成一对中心对称的字符变成一对中的另一个，再从右往左哈希，即可O（1）判断一段区间从左往右和从右往左的哈希值是否相等来判断是否中心对称。</p><h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n)</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,P=<span class="number">131</span>;</span><br><span class="line">ULL h1[N],p1[N];</span><br><span class="line">ULL h2[N],p2[N];</span><br><span class="line"><span class="type">char</span> s1[N],s2[N];</span><br><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">char</span>&gt; mp=&#123;&#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;q&#x27;</span>&#125;,&#123;<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;,&#123;<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;,&#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;,&#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;,&#123;<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;n&#x27;</span>&#125;,&#123;<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;,&#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;x&#x27;</span>&#125;,&#123;<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;&#125;;<span class="comment">//记录所有形成中心对称的一对字符</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init1</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    p1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        h1[i] = h1[i - <span class="number">1</span>] * P + s[i];</span><br><span class="line">        p1[i] = p1[i - <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init2</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    p2[n+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;=<span class="number">1</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        h2[i] = h2[i + <span class="number">1</span>] * P + s[i];</span><br><span class="line">        p2[i] = p2[i + <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h1[r] - h1[l - <span class="number">1</span>] * p1[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h2[l] - h2[r + <span class="number">1</span>] * p2[n+<span class="number">1</span>-(r - l + <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;s1+<span class="number">1</span>;</span><br><span class="line">    n=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init1</span>(s1);<span class="comment">//正序哈希</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(s1[i])!=mp.<span class="built_in">end</span>()) s2[i]=mp[s1[i]];</span><br><span class="line">        <span class="keyword">else</span> s2[i]=s1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init2</span>(s2);<span class="comment">//逆序哈希</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==<span class="string">&#x27;o&#x27;</span>||s1[i]==<span class="string">&#x27;s&#x27;</span>||s1[i]==<span class="string">&#x27;x&#x27;</span>||s1[i]==<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(s1[i])==mp.<span class="built_in">end</span>())&#123;<span class="comment">//遇到不可能形成中心对称的字符直接No</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=i;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(s1[i])==mp.<span class="built_in">end</span>())&#123;<span class="comment">//遇到不可能形成中心对称的字符直接No</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get1</span>(i,j)==<span class="built_in">get2</span>(i,j))&#123;</span><br><span class="line">                i=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;n)&#123;<span class="comment">//i往右找不到能形成中心对称的区间</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0-and-1-in-BIT"><a href="#0-and-1-in-BIT" class="headerlink" title="0 and 1 in BIT"></a>0 and 1 in BIT</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个n，m分别表示事件长度和询问次数，然后给定n个事件，然后给出q次在线询问，每次询问给出tl，tr，x，根据所给表达式算出真正的l，r，求x经过事件l分别做到事件r后的值。</p><p>事件有A或B，A表示将x的0、1翻转，B表示将x加1，若进位后超出x的总长度，则变成全0。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>模拟易得，一个数翻转后加1再翻转即原数减1，那么我们只需要知道从l到r总共加了翻转了几次，又加减了几个1。</p><p>直接预处理事件，遇到B时按照前面A的奇偶性判断是加1还是减1，然后计算B事件的加减1的前缀和，再预处理A事件数量的前缀和，使得每次可以直接获取l到r的B事件的贡献以及翻转次数。</p><p>然后对于每次询问将x转化为十进制进行运算再转换为二进制输出。</p><h2 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n+q|x|)</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    cin&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;A&#x27;</span>)&#123;<span class="comment">//预处理B事件的前缀贡献</span></span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>];</span><br><span class="line">            flag=-flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+flag;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i]=cnt[i<span class="number">-1</span>]+(s[i]==<span class="string">&#x27;A&#x27;</span>);<span class="comment">//预处理A事件的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lares=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> tl,tr;</span><br><span class="line">        string x;</span><br><span class="line">        cin&gt;&gt;tl&gt;&gt;tr&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> qn=(<span class="type">int</span>)x.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l=<span class="built_in">min</span>((lares^tl)%n+<span class="number">1</span>,(lares^tr)%n+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> r=<span class="built_in">max</span>((lares^tl)%n+<span class="number">1</span>,(lares^tr)%n+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mod=(<span class="type">int</span>)(<span class="number">1ll</span>&lt;&lt;qn);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=(<span class="type">int</span>)x.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//将x转换为十进制</span></span><br><span class="line">            num+=(x[i]==<span class="string">&#x27;1&#x27;</span>)*tmp;</span><br><span class="line">            tmp*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> tt=sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(cnt[l<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">1</span>)&#123;<span class="comment">//例如我从l开始，那么每碰到A之前的B应该是加1的贡献，而由于前面的A的数量为奇数，而会变成加一的贡献，因此需要特判</span></span><br><span class="line">            tt=-tt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=((num+tt%mod)%mod+mod)%mod;</span><br><span class="line">        <span class="keyword">if</span>((cnt[r]-cnt[l<span class="number">-1</span>])%<span class="number">2</span>==<span class="number">1</span>)&#123;<span class="comment">//若l到r中A事件数量为奇数，则需要对x的01翻转。</span></span><br><span class="line">            res=mod<span class="number">-1</span>-res;</span><br><span class="line">        &#125;</span><br><span class="line">        lares=res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=qn<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            cout&lt;&lt;(res&gt;&gt;i&amp;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Link-with-Gomoku"><a href="#Link-with-Gomoku" class="headerlink" title="Link with Gomoku"></a>Link with Gomoku</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个数n,m，要求你构造出一个n*m大小的平局的五子棋棋盘，黑棋用’x’表示，白棋用’o’表示。</p><p>1&lt;=n,m&lt;=1e3</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>这里要注意两个点：不能横竖斜出现连续五个相同颜色棋子；黑棋数量应等于白棋，或比白棋多一个。</p><p>我们可以先构造这样的情况：</p><p>xoxoxoxoxoxoxo</p><p>oxoxoxoxoxoxox</p><p>xoxoxoxoxoxoxo</p><p>…….</p><p>但由于斜角会出现连续5个相同颜色棋子，我们可以考虑每四行交换其中的两行。这是就得考虑n的行数，因为我们不能交换最后一行最后一行的下一行，否则就会出现白棋数量多于黑棋的情况。</p><p>那么如果n%4!=2，那么我们每次都交换每4行中的2、3两行，否则我们每次都交换每4行中的1、2两行。</p><h2 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n*m）</p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//先构建出每个相邻两个棋子不同的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                s[i][j]=((j%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s[i][j]=((j%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">&#x27;o&#x27;</span>:<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;<span class="comment">//根据n来设定t，t表示每四行中的t,t+1行要交换，但因为我从0开始，所以t都相应的减1了</span></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">4</span>!=<span class="number">2</span>)&#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">4</span>==t||i%<span class="number">4</span>==t+<span class="number">1</span>)&#123;<span class="comment">//交换即分别取反</span></span><br><span class="line">                s[i][j]=(<span class="type">char</span>)(<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;x&#x27;</span>-s[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cout&lt;&lt;s[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h1><h2 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一排数量为n的盒子，告诉你每个盒子的价值和上面是否有一个盖子，每个盖子可以往左或往右移动一格或不动，移动后若该盒子上有盖子则可以获得这个盒子的价值，问价值总和的最大值。</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>dp状态机模型，每个盖子有3种状态，分别是左移、不变和右移。</p><p>那么我们可以预处理出所有盒子的位置数组c，对这个数组做dp，考虑状态的转移。</p><p>将左边那个盒子与这个盒子的距离分别为1，2和大于2的三种情况讨论状态的转移。</p><p><script type="math/tex">dp[i][j]</script>表示第i个盒子向左（j=0)、不变(j=1)、向右(j=2)</p><h2 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O（n)</p><h2 id="参考代码-6"><a href="#参考代码-6" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    c.<span class="built_in">push_back</span>(<span class="number">-5</span>);<span class="comment">//为了不用考虑边界情况使c从1开始遍历，前面多加了一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            c.<span class="built_in">push_back</span>(i);<span class="comment">//找到所有b[i]=1时的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot=(<span class="type">int</span>)c.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;<span class="comment">//对c数组进行dp</span></span><br><span class="line">        <span class="keyword">if</span>(c[i<span class="number">-1</span>]+<span class="number">1</span>==c[i])&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]+a[c[i]<span class="number">-1</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(&#123;<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>])+a[c[i]],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;);</span><br><span class="line">            dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;)+a[c[i]+<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i<span class="number">-1</span>]+<span class="number">2</span>==c[i])&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>])+a[c[i]<span class="number">-1</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;)+a[c[i]];</span><br><span class="line">            dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;)+a[c[i]+<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;)+a[c[i]+j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于c数组中第0位和第n+1位对应的a值都为0，显然不是最优解，在dp取max中会舍弃这种情况，所以无需特判。</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(&#123;dp[tot][<span class="number">0</span>],dp[tot][<span class="number">1</span>],dp[tot][<span class="number">2</span>]&#125;)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第八场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AB%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AB%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Alive-Fossils"><a href="#Alive-Fossils" class="headerlink" title="Alive Fossils"></a>Alive Fossils</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定那场camps的名单，输出每场都在的人。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>用map存每个人出现的次数，最后遍历map如果出现的次数与camps场数相同就输出。</p><p>因为map已经自动实现了排序，所以不需要自己排序。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            mp[s]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it.second==n)&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it.second==n) cout&lt;&lt;it.first&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第五场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cheeeeen-the-Cute-Cat"><a href="#Cheeeeen-the-Cute-Cat" class="headerlink" title="Cheeeeen the Cute Cat"></a>Cheeeeen the Cute Cat</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二分图，两边有<script type="math/tex">n</script>个点，求二分图的最大匹配。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>模板题，直接（）跑一边二分图即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gc getchar</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;</span><br><span class="line">    ri f=<span class="number">1</span>,c;<span class="keyword">while</span>(c=<span class="built_in">gc</span>(),c&lt;<span class="number">48</span>||<span class="number">57</span>&lt;c)<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;x=c^<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>(c=<span class="built_in">gc</span>(),<span class="number">47</span>&lt;c&amp;&amp;c&lt;<span class="number">58</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N];</span><br><span class="line"><span class="type">int</span> Nx,Ny,k;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Mx[N],My[N];</span><br><span class="line"><span class="type">int</span> dx[N],dy[N];</span><br><span class="line"><span class="type">int</span> dis,u,v;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">searchP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">    dis = INF;</span><br><span class="line">    <span class="built_in">memset</span>(dx,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dx));</span><br><span class="line">    <span class="built_in">memset</span>(dy,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; Nx;++i)</span><br><span class="line">    <span class="keyword">if</span>(Mx[i] == <span class="number">-1</span>)    Q.<span class="built_in">push</span>(i), dx[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(dx[u] &gt; dis) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> sz = G[u].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; sz;++i)&#123;</span><br><span class="line">            <span class="type">int</span> v = G[u][i];</span><br><span class="line">            <span class="keyword">if</span>(dy[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dy[v] = dx[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(My[v] == <span class="number">-1</span>) dis = dy[v];</span><br><span class="line">                <span class="keyword">else</span> dx[My[v]] = dy[v] + <span class="number">1</span>, Q.<span class="built_in">push</span>(My[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis != INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = G[u].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; sz;++i)&#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!used[v] &amp;&amp; dy[v] == dx[u] + <span class="number">1</span>)&#123;</span><br><span class="line">            used[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(My[v] != <span class="number">-1</span> &amp;&amp; dy[v] == dis) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(My[v] == <span class="number">-1</span> || <span class="built_in">DFS</span>(My[v]))&#123;</span><br><span class="line">                My[v] = u;</span><br><span class="line">                Mx[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Mx,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Mx));</span><br><span class="line">    <span class="built_in">memset</span>(My,<span class="number">-1</span>,<span class="built_in">sizeof</span>(My));</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">searchP</span>())&#123;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="literal">false</span>,<span class="built_in">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; Nx;++i)</span><br><span class="line">        <span class="keyword">if</span>(Mx[i] == <span class="number">-1</span> &amp;&amp; <span class="built_in">DFS</span>(i)) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  <span class="built_in">read</span>(n);</span><br><span class="line">    Nx=Ny=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">int</span> x;  <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="keyword">if</span>(x)  G[i<span class="number">-1</span>].<span class="built_in">push_back</span>(j+n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">MaxMatch</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cirno’s-Perfect-Equation-Class"><a href="#Cirno’s-Perfect-Equation-Class" class="headerlink" title="Cirno’s Perfect Equation Class"></a>Cirno’s Perfect Equation Class</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定<script type="math/tex">k,c,n</script>，问你所有满足以下条件的二元组<script type="math/tex">(a,b)</script>的个数：</p><script type="math/tex; mode=display">k*a+b=c,b|c,gcd(a,b)\ge n</script><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>试除法求约数，<script type="math/tex">\sqrt c</script>求出所有c的约数，然后暴力枚举每个约束是否符合上述条件，符合则计数。</p><p><strong>时间复杂度：<script type="math/tex">O(sqrt(n))</script></strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; divs;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/i;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            divs.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(n/i!=i) divs.<span class="built_in">push_back</span>(n/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    divs.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> k,c,n;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;c&gt;&gt;n;</span><br><span class="line">    <span class="built_in">get_divisors</span>(c);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;divs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> b=divs[i];</span><br><span class="line">        <span class="keyword">if</span>((c-b)%k!=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> a=(c-b)/k;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a,b)&gt;=n)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Red-and-Blue-and-Green"><a href="#Red-and-Blue-and-Green" class="headerlink" title="Red and Blue and Green"></a>Red and Blue and Green</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定m个区间，这些区间要么包含要么不相交，每个区间包含一个<script type="math/tex">l,r,w</script>表示下方构造的排列区间<script type="math/tex">[l,r]</script>的逆序对数量的奇偶性为<script type="math/tex">w</script>(0/1表示偶/奇)。现在要你构造一组排列，使得满足上述所有区间的限制。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>（以下奇偶性均指区间逆序对的奇偶性）</p><p>因为这个区间要么包含要么不交，所以被包含的区间可以作为大区间的子树，不交的两个区间可以作为一个大区间的两个子树或作为两棵树，即我们可以构造出一个树形结构（去掉重复区间）。</p><p>我们可以按照区间大小排序，然后建图对每个小区间找到一个包含它的大区间连一条大区间向小区间的边。</p><p>通过对树形结构dfs，利用异或的性质，对于一个大区间的奇偶性异或上所有它的子树的奇偶性后若不为0则不合法，不可能构成符合题意的情况。</p><p>首先，最初默认pos[i]=i，逆序对数量为偶，在dfs的过程中，如果这个区间奇偶性异或上所有子树的区间奇偶性后为0，则当前区间可以不需要操作，如：<script type="math/tex">[1,6]</script>为奇，它的子树<script type="math/tex">[2,3]</script>为奇，<script type="math/tex">1\oplus 1=0</script>，那么当前区间奇偶性已经满足无需操作。反之不符，我们可以通过交换来使逆序对奇偶性改变。</p><p>考虑以下几种情况：</p><p>首先，要满足每个子树的奇偶性不变的同时使得大区间的奇偶性改变。那么我们可以分类讨论。</p><p>①当子树为空时，直接交换当前区间最小的两个数的位置。</p><p>②当子树中最左边的区间的左端点与当前树的区间的左端点重合，交换最左边区间的最大值和右边区间的最小值的位置。（因为这里<script type="math/tex">pos[i]</script>记录得是值为i的位置在哪，所以直接交换<script type="math/tex">pos[G[u][0].r]</script>和<script type="math/tex">pos[G[u][0].r+1]</script>即可。</p><p>③剩下的情况也就是最左边的区间的左端点不与当前树这个大区间的左端点重合时，交换子树最左边区间的最小值的位置和{这个最小值-1}的位置。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, k;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a[N], pos[N], deg[N];</span><br><span class="line">vector&lt;Seg&gt; s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N];</span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt; mp;<span class="comment">//记录区间的逆序对奇偶性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">op</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123; <span class="built_in">swap</span>(pos[k], pos[k + <span class="number">1</span>]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = s[u].k;</span><br><span class="line">    <span class="comment">//对u区间包含的所有子区间按照左端点排序。</span></span><br><span class="line">    <span class="built_in">sort</span>(G[u].<span class="built_in">begin</span>(), G[u].<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123; <span class="keyword">return</span> s[a].l &lt;s[b].l; &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v: G[u]) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        w ^= s[v].k;<span class="comment">//异或判断奇偶性是否统一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!w) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(G[u].<span class="built_in">empty</span>()) <span class="built_in">op</span>(s[u].l);<span class="comment">//叶子节点直接交换当前区间最左边两个</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[G[u][<span class="number">0</span>]].l == s[u].l) <span class="built_in">op</span>(s[G[u][<span class="number">0</span>]].r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">op</span>(s[G[u][<span class="number">0</span>]].l - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        pos[i] = i, mp[&#123;i, i&#125;] = <span class="number">0</span>;<span class="comment">//区间大小为1的逆序对数量必然只能为偶数。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(&#123;l, r&#125;) &amp;&amp; mp[&#123;l, r&#125;] != k)&#123;<span class="comment">//与之前设定的逆序对数量奇偶性不同，出现矛盾，无解。</span></span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(&#123;l, r&#125;)) <span class="keyword">continue</span>;</span><br><span class="line">        mp[&#123;l, r&#125;] = k;</span><br><span class="line">        s.<span class="built_in">push_back</span>(&#123;l, r, k&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    m = s.<span class="built_in">size</span>();<span class="comment">//此时的m是去掉了相同区间。</span></span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(),[](Seg a, Seg b) &#123; <span class="keyword">return</span> a.r - a.l &lt; b.r - b.l; &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;<span class="comment">//找到所有大区间包含小区间，并从大区间向小区间连边，建立树形结构。</span></span><br><span class="line">    <span class="comment">//因为前面按照区间大小排序，所有j从大于i开始枚举，只有大于i的部分长度才比i大，才有可能包含i区间。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j].l &lt;= s[i].l &amp;&amp; s[i].r &lt;= s[j].r)&#123;</span><br><span class="line">                G[j].<span class="built_in">push_back</span>(i), ++deg[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!deg[i])</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        a[pos[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Go-to-Play-Maimai-DX"><a href="#Go-to-Play-Maimai-DX" class="headerlink" title="Go to Play Maimai DX"></a>Go to Play Maimai DX</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个只有1，2，3，4的指针，求最短区间满足这个区间内包含1，2，3，4四个数且4这个数的数量至少为k。</p><p>题目保证该区间至少有一个1，2，3且至少有k个4</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>双指针，两个指针分别表示此时区间的左右端点，右端点从右边不断加数，左端点判断去掉左端数去掉是否仍满足题意，每次直到左端点右移后不符合含k个4的好区间为止。</p><p><strong>时间复杂度：<script type="math/tex">O(n)</script></strong></p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt4=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cnt[a[i]])&#123;</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[a[i]]++;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[l]!=<span class="number">4</span>&amp;&amp;cnt[a[l]]&gt;<span class="number">1</span>||a[l]==<span class="number">4</span>&amp;&amp;cnt[a[l]]&gt;k)&#123;</span><br><span class="line">                cnt[a[l]]--;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tot==<span class="number">4</span>&amp;&amp;cnt[<span class="number">4</span>]&gt;=k)&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,i-l+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nazrin-the-Greeeeeedy-Mouse"><a href="#Nazrin-the-Greeeeeedy-Mouse" class="headerlink" title="Nazrin the Greeeeeedy Mouse"></a>Nazrin the Greeeeeedy Mouse</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个奶酪按顺序从左往右放成一条线，每个奶酪有它的重量和体积，有m个袋子，每次Nazrin按顺序拿一个袋子装从左往右装奶酪，如果这个奶酪装不了要么破坏这个要么回去拿下一个袋子，如果奶酪被破坏则不能再拿这个奶酪。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察到<script type="math/tex">sz[i]\le sz[i-1]</script>，那么我们只需要保留最后min{200,n}个即可。</p><p>这里我们规定i=1为用最后min{200,n}中的第一个背包</p><p>定义<script type="math/tex">dp[i][j][k]</script>为用前第i个背包，拿到第j个奶酪，且第i个背包已经装的体积为k时的获得的最大重量。</p><p>它可以从用前i-1个背包，拿到j-1时的最大重量转移过来，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=sz[i<span class="number">-1</span>];k++)&#123;<span class="comment">//mx为上一轮拿到j-1的所有状态中的最大值</span></span><br><span class="line">    mx=<span class="built_in">max</span>(mx,dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=v[j])&#123;</span><br><span class="line">dp[i][j][k]=<span class="built_in">max</span>(&#123;dp[i][j][k],<span class="built_in">max</span>(mx,dp[i][j<span class="number">-1</span>][k-v[j]])+w[j]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的答案是每一轮中拿到最后一个且装的体积最大时的最大值。</p><p><strong>时间复杂度：<script type="math/tex">O(n^3)</script></strong> i\le r$$</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>,M=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> v[N],w[N],sz[M];</span><br><span class="line"><span class="type">int</span> dp[N][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        cin&gt;&gt;sz[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> r=<span class="built_in">min</span>(m,<span class="number">200LL</span>);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=sz[i<span class="number">-1</span>];k++)&#123;<span class="comment">//mx为上一轮拿到j-1的所有状态中的最大值</span></span><br><span class="line">                mx=<span class="built_in">max</span>(mx,dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=sz[i];k++)&#123;</span><br><span class="line">                dp[i][j][k]=<span class="built_in">max</span>(mx,dp[i][j<span class="number">-1</span>][k]);</span><br><span class="line">                <span class="keyword">if</span>(k&gt;=v[j])&#123;</span><br><span class="line">                    dp[i][j][k]=<span class="built_in">max</span>(&#123;dp[i][j][k],<span class="built_in">max</span>(mx,dp[i][j<span class="number">-1</span>][k-v[j]])+w[j]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[i][n][sz[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第六场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="idol"><a href="#idol" class="headerlink" title="idol!!"></a>idol!!</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数n，求1~n所有双阶乘的乘积末尾0的个数。</p><p>正整数的<strong>双阶乘</strong>表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以发现，只需找2的因子数量和5的因子数量取min即可，但显然2的因子数量远小于5，所以我们只需要找5的因子数量就是答案。</p><p>考虑每个数对答案的贡献，这里我的做法是奇偶讨论。</p><p>先看奇数部分，</p><p>5，7，9，11，…这些数x对答案的贡献都为<script type="math/tex">\lfloor (n-x+2)/2\rfloor</script></p><p>25，50，75，…，这些数x对答案的贡献都为<script type="math/tex">\lfloor (n-x+2)/2\rfloor * 2</script></p><p>依次类推。</p><p>那么我们可以这么算，5, 7, 9, 11, …, n-n%2，这些数先对答案的贡献加<script type="math/tex">\lfloor (n-x+2)/2\rfloor</script>，</p><p>然后25, 50 ,75,…，这些数再对答案的贡献加<script type="math/tex">\lfloor (n-x+2)/2\rfloor</script>。</p><p>这样我们就可以写成一个循环，循环中套一个等差数列的求和来完成奇数部分计算。</p><p>接下来是偶数部分，</p><p>同理，</p><p>10, 20, 30, …对答案贡献加上<script type="math/tex">\lfloor (n-x+2)/2\rfloor</script>.</p><p>50, 100,150,…对答案贡献加上<script type="math/tex">\lfloor (n-x+2)/2\rfloor</script>,</p><p>以此类推。</p><p>同样，一个循环加等差数列求和即可。</p><p>由于会爆long long，所以可以用int128解决。</p><p><strong>时间复杂度：<script type="math/tex">O(nlogn)</script></strong></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> i128;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 X=<span class="number">0</span>,w=<span class="number">0</span>; <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;w|=ch==<span class="string">&#x27;-&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multicase=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i128 n = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    i128 ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i128 i = <span class="number">5</span>; i &lt;= n; i *= <span class="number">5</span>)&#123;</span><br><span class="line">        i128 a1 = (n - i + <span class="number">2</span>) / <span class="number">2</span>, tn = (n - i) / (<span class="number">2</span> * i) + <span class="number">1</span>, d = (-i);</span><br><span class="line">        ans += a1 * (tn) + (tn * (tn - <span class="number">1</span>) / <span class="number">2</span>) * (d); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i128 i = <span class="number">10</span>; i &lt;= n; i *= <span class="number">5</span>)&#123;</span><br><span class="line">        i128 a1 = (n - i + <span class="number">2</span>) / <span class="number">2</span>, tn = n / i, d = (-i / <span class="number">2</span>);</span><br><span class="line">        ans += a1 * (tn) + (tn * (tn - <span class="number">1</span>) / <span class="number">2</span>) * (d); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> CASE=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multicase) cin&gt;&gt;CASE;</span><br><span class="line">    <span class="keyword">while</span>(CASE--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一组数列，每次问你<script type="math/tex">l,r</script>之间能否构造出恰好k个连续的组，使得每组和为偶数。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以发现，求<script type="math/tex">l,r</script>之间能否构造出恰好k个连续偶数组，我们可以从<script type="math/tex">l</script>到<script type="math/tex">r</script>，每次加这一位上的数，形成偶数就累加，看这部分偶数的个数能否大于等于k，因为如果大于k，我们可以合并若干组使得形成k组。</p><p>首先，预处理前缀和，用来判断l和r之间是否和为偶数，以及1~l-1奇数还是偶数。</p><p>然后从1到n遍历，sum分别从0或1开始，每次加上当前值，若形成偶数则sum=0，这一位上计数，然后分别求前缀和。</p><p>这时若查询l到r，那么看1~l-1是偶数还是奇数，如果是偶数，那么前面一定能形成完整的偶数区间，到第l位时sum为0，所以我们选择从sum从0开始的进行计算，否则选择从1开始的。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*=================================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> sum1[N],sum2[N];</span><br><span class="line"><span class="type">int</span> suma[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,q;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum1[i]=sum2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        suma[i]=suma[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum1[i]++;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum2[i]++;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum1[i]+=sum1[i<span class="number">-1</span>];</span><br><span class="line">        sum2[i]+=sum2[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> l,r,k;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">        <span class="keyword">if</span>((suma[r]-suma[l<span class="number">-1</span>])%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(suma[l<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum2[r]-sum2[l<span class="number">-1</span>]&gt;=k)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum1[r]-sum1[l<span class="number">-1</span>]&gt;=k)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gcd"><a href="#Gcd" class="headerlink" title="Gcd"></a>Gcd</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个集合S={x,y}，每次可以选择集合内两个不同元素a,b，将a-b或gcd(|a|,|b|)的结果加入到集合中，问经过任意次操作后能否使集合中存在z。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>显然，z为0时，若a，b都不为0，则一定不会构造出0，否则可以。</p><p>z不为0时，当z小于等于max(a,b)且gcd(a,b)|z，则可以构造，否则不能构造。因为a-b一定是gcd(a,b)的倍数，因此max(a,b)每次可以减若干个gcd(a,b)得到min(a,b)，所以不需要找a-b,直接看max(a,b)能否减去若干个gcd(a,b)后得到z，而max(a,b)又一定是gcd(a,b)的倍数（根据最大公约数性质），所以直接判断z能否整除gcd(a,b)即可。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multicase=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    <span class="type">int</span> d=__gcd(x,y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(z&lt;=<span class="built_in">max</span>(x,y)&amp;&amp;z%d==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> CASE=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multicase) cin&gt;&gt;CASE;</span><br><span class="line">    <span class="keyword">while</span>(CASE--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第十场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%8D%81%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%8D%81%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="First-Last"><a href="#First-Last" class="headerlink" title="First Last"></a>First Last</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定两个数<script type="math/tex">n,m</script>，分别表示小凡将进行m场比赛，每场比赛有n个人，他在每场比赛等可能概率的排在第1~n名，问他每场都排在第1名或第n名的概率。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>当n小于等于2时，不管怎么比赛都要么排在第一名要么排在第n名，概率为1.</p><p>否则，他在一场比赛中排第一或最后一名的概率为<script type="math/tex">\frac2n</script>，m场比赛都排第一或最后一名的概率为<script type="math/tex">(\frac2n)^m</script></p><p>直接计算即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="type">double</span> a = (<span class="number">1LL</span> &lt;&lt; m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            a /= n;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">20</span>) &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Grayscale-Confusion"><a href="#Grayscale-Confusion" class="headerlink" title="Grayscale Confusion"></a>Grayscale Confusion</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个三元组<script type="math/tex">(r_i,g_i,b_i)</script>，构造一个长度为n的数组f，使得:</p><script type="math/tex; mode=display">f_1=f_2</script><p>对于任意<script type="math/tex">i,j</script>，若<script type="math/tex">r_i>r_j,g_i>g_j,b_i>b_j</script>，则<script type="math/tex">f_i>f_j</script>，输出任意合法方案。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，由于颜色1和颜色2灰度值应该相同，若偏序则无合法方案。</p><p>接着考虑将最小的颜色从0开始，对于每个偏序条件连一条边，构建一个图，若<script type="math/tex">r_i>r_j,g_i>g_j,b_i>b_j</script>，则从<script type="math/tex">j</script>向<script type="math/tex">i</script>连一条边，并维护每个点的入度。考虑到颜色1和颜色2的灰度值f要相同，我们干脆把f缩成一个点。</p><p>可以发现，由于当两种颜色严格偏序时才有相连的边，且边只会从小的连向到的，因此发现是一个拓扑图，直接跑一个拓扑序。显然，若u连向v，则v的灰度值至少比u大1，每一条边都是一组条件，因此我们每次更新v的灰度值为max(f[v],f[u]+1)跑一边拓扑序即可。</p><p>时间复杂度：<script type="math/tex">O(n^2)</script></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> r, g, b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w)&#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; w.r &amp;&amp; g &lt; w.g &amp;&amp; b &lt; w.b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Node &amp;w)&#123;</span><br><span class="line">        <span class="keyword">return</span> r &gt; w.r &amp;&amp; g &gt; w.g &amp;&amp; b &gt; w.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;c[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> din[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c[i].r &gt;&gt; c[i].g &gt;&gt; c[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">1</span>] &lt; c[<span class="number">2</span>] || c[<span class="number">1</span>] &gt; c[<span class="number">2</span>]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="number">1</span>] &lt; c[i] || c[<span class="number">2</span>] &lt; c[i]) &#123;</span><br><span class="line">            g[<span class="number">2</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">            din[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="number">1</span>] &gt; c[i] || c[<span class="number">2</span>] &gt; c[i]) &#123;</span><br><span class="line">            g[i].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">            din[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i] &lt; c[j]) &#123;</span><br><span class="line">                g[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                din[j]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i] &gt; c[j]) &#123;</span><br><span class="line">                g[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">                din[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(din[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v: g[u])&#123;</span><br><span class="line">            ans[v] = <span class="built_in">max</span>(ans[v], ans[u] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(--din[v] == <span class="number">0</span>) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(*<span class="built_in">max_element</span>(ans + <span class="number">1</span>, ans + <span class="number">1</span> + n) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[<span class="built_in">max</span>(<span class="number">2LL</span>, i)] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Fair-Equation"><a href="#Fair-Equation" class="headerlink" title="Fair Equation"></a>Fair Equation</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定三个数<script type="math/tex">A,B,C</script>，问在这三个数中插入一个数字，是否能使A+B=C成立。若能，则输出Yes，再输出这个方案；否则输出No</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接暴力枚举在每个数的每个位置插0~9的数即可，若能找到则输出方案，都找不到输出No</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> i,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="built_in">pow</span>(<span class="number">10</span>,i)+<span class="number">0.01</span>;</span><br><span class="line">    <span class="type">int</span> t=x%p;</span><br><span class="line">    x-=t;</span><br><span class="line">    x*=<span class="number">10</span>;</span><br><span class="line">    x+=d*p;</span><br><span class="line">    x+=t;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">out</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a+b==c)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">&quot; + &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;c&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;ch&gt;&gt;b&gt;&gt;ch&gt;&gt;c;</span><br><span class="line">    <span class="type">int</span> c1=<span class="built_in">getbit</span>(a),c2=<span class="built_in">getbit</span>(b),c3=<span class="built_in">getbit</span>(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=c1;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==c1&amp;&amp;j==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">f</span>(a,i,j);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">out</span>(t,b,c)) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=c2;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==c2&amp;&amp;j==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">f</span>(b,i,j);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">out</span>(a,t,c)) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=c3;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==c3&amp;&amp;j==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">f</span>(c,i,j);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">out</span>(a,b,t)) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客多校第四场</title>
      <link href="/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%9B%9B%E5%9C%BA/"/>
      <url>/2023/08/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%9B%9B%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bobo-String-Construction"><a href="#Bobo-String-Construction" class="headerlink" title="Bobo String Construction"></a>Bobo String Construction</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数<script type="math/tex">n</script>和字符串<script type="math/tex">t</script>，让你构造一个<script type="math/tex">s</script>，使得连成<script type="math/tex">t+s+t</script>后，除了头尾两个子串t以外不会出现子串为<script type="math/tex">t</script>的情况（可以重叠）</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先说结论，s全为0和全为1一定有一个符合条件。</p><p>不合法的构造会是下面三种情况，</p><p>①单看s串中出现了子串t</p><p>②s的前缀与t的后缀构成了t</p><p>③s的后缀与t的前缀构成了t</p><p>如果是情况①，全0和全1两种构造显然不可能和t都相同。</p><p>如果是情况②和情况③，s的前缀或后缀为什么时才与t的前缀或后缀构成了t。</p><p>例如情况②，t为10010时，与t的后缀产生不合法情况时s的前缀为010，思考也容易想到这与t的相等前后缀有关。t的前缀10和后缀10相等，所以s的前缀为t前缀后面的部分010时会出现了t，同理s的后缀不能为t的相等前后缀中后缀前面的部分100，这两个是否可能出现一个全1一个全0，当两部分有公共部分时，显然不可能。若无公共部分，假设字符串t：abcde，前后缀分别为abc和cde相等，那么a等于c，c等于e，无论如何构造为满足前后缀相等的前提，这两个部分就一定不可能都不同即一个全0，一个全1的情况。</p><p>并且情况①和②③显然出现一个全0，一个全1，因为②③中的t与①中的t相同。</p><p>如此而言，我们只需分别判断全0和全1时是否合法选择合法的情况输出即可。</p><p><strong>时间复杂度：<script type="math/tex">O(n+m)</script></strong></p><p>我用kmp做的，其实不用kmp，直接暴力nm复杂度也可以过</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> t[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    res.<span class="built_in">clear</span>();</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;t+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        s[i]=t[i];</span><br><span class="line">        s[i+m+n]=t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot=m*<span class="number">2</span>+n;</span><br><span class="line">    s[tot+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ne,<span class="number">0</span>,(tot+<span class="number">1</span>)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m+<span class="number">1</span>;i&lt;=m+n;i++)&#123;</span><br><span class="line">        s[i]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//kmp判断是否合法</span></span><br><span class="line">    <span class="comment">//求ne的过程</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;t[i]!=t[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j=ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t[i]==t[j+<span class="number">1</span>]) j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//kmp的匹配过程，将所有模式串在主串出现位置的起始下标保存在res中</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=t[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j=ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==t[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j==m)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i-m);</span><br><span class="line">            j=ne[j];<span class="comment">//为了观察其后续是否还能跟S数组后面的数配对成功</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((<span class="type">int</span>)res.<span class="built_in">size</span>()!=<span class="number">2</span>)&#123;<span class="comment">//若res数量为两个即找到两个子串，则是开头结尾两个符合题意。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=m+<span class="number">1</span>;i&lt;=m+n;i++)&#123;</span><br><span class="line">            s[i]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Election-of-the-King"><a href="#Election-of-the-King" class="headerlink" title="Election of the King"></a>Election of the King</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>有n个候选人选举国王，共n-1轮投票，每轮每人会投离自己政治倾向数值差值最大的那个人，如果有多个则投较大的那个人，一轮中被投票最多的人被淘汰，最终谁会当上国王。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>显然，若将每个人按照政治倾向排序，每轮被淘汰的人只会是政治倾向最小或最大的，因此我们可以用双指针，一个指向最小，一个指向最大，每轮O(1)判断出最小还是最大的淘汰往中间移动指针。</p><p>如何O(1)判断最小的被投票还是最大的被投票？</p><p>当剩下人数为奇数时，由于集合有序，若最中间的人投向最大那么其左边的一定投向最大，否则中间即右边的都投向最小。</p><p>当剩下人数为偶数时，同理，这时我们只需要看中间的两个中左边那个，若他投向最右边那么有一半的人都投向最右，右边指针左移，反之亦然。</p><p><strong>时间复杂度:O(n)</strong></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">PII a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].first;</span><br><span class="line">        a[i].second=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">if</span>((l+r)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[r].first-a[(l+r)/<span class="number">2</span>].first&gt;=a[(l+r)/<span class="number">2</span>].first-a[l].first)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[r].first-a[(l+r)/<span class="number">2</span>].first&gt;=a[(l+r)/<span class="number">2</span>].first-a[l].first)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[l].second&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-the-squares"><a href="#Merge-the-squares" class="headerlink" title="Merge the squares!"></a>Merge the squares!</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个<script type="math/tex">n*n</script>个变成为1的小正方形，每次可以将2到50个正方形合并成一个大正方形，求合并成一个大正方形的方案。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>对于一个正方形，若它的边长小于等于7，直接合并，否则分割成两个正方形和两个长方形，其长方形的长和宽先预处理使得长方形分割完后数量不超过24个，因为最后合并需要24+24+两个正方形。</p><p>如何预处理，一个长方形可以每次切割它最大的边长，这里就变成了类似求gcd的辗转相减可以快速求出一个长方形切割到最后有多少个cnt，我们可以枚举这个长方形的边长，满足<script type="math/tex">cnt\le 24即可</script></p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> sp[N];</span><br><span class="line">vector&lt;Node&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a &lt;= <span class="number">7</span>)&#123;<span class="comment">//边长小于等于7的正方形，直接合并。</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;x, y, a&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(x, y, sp[a], a);<span class="comment">//将正方形切割成两个小长方形</span></span><br><span class="line">        <span class="built_in">solve</span>(x + sp[a], y, a - sp[a], a);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(&#123;x, y, a&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;<span class="comment">//每次截取一个长方形中最大的正方形</span></span><br><span class="line">        <span class="built_in">solve</span>(x, y, b, b);</span><br><span class="line">        <span class="built_in">solve</span>(x + b, y, a - b, b);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//每次截取一个长方形中最大的正方形</span></span><br><span class="line">        <span class="built_in">solve</span>(x, y, a, a);</span><br><span class="line">        <span class="built_in">solve</span>(x, y + a, a, b - a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it: ans) cout &lt;&lt; it.x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it.y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it.w &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">//预处理一个正方形切成怎样的两个小正方形可以使得最终合并块数不多于24</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++)&#123;</span><br><span class="line">            <span class="type">int</span> a = <span class="built_in">max</span>(j, i - j), b = <span class="built_in">min</span>(j, i - j), cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                cnt += a / b;</span><br><span class="line">                a %= b;</span><br><span class="line">                <span class="built_in">swap</span>(a, b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt;= <span class="number">24</span>)&#123;</span><br><span class="line">                sp[i]=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Qu’est-ce-Que-C’est"><a href="#Qu’est-ce-Que-C’est" class="headerlink" title="Qu’est-ce Que C’est?"></a>Qu’est-ce Que C’est?</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>构造一个长度为n的数列，其中每个数的范围都在<script type="math/tex">[-m,m]</script>之间，求使得这个数列满足每个长度大于等于2的连续子序列之和非负的方案数。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>令<script type="math/tex">dp[i][j]</script>为取到第i位的最小后缀和j的合法方案数，由于这里是长度大于等于2的连续子序列之和非负，所以第i位为负数不一定非法，j可以为负数。</p><p>当第i位为负数时，即j就是这个负数，因为i-1位不可能小于0，否则序列非法，不能转移。那么此时从选到i-1位中为-j ~ m转移过来。</p><p>若非负，则从i-1时的-m+j ~ m转移。</p><p>可以发现转移的都是一段连续区间，加上前缀和优化。</p><p>空间较大，这里采用滚动数组。</p><p><strong>时间复杂度：<script type="math/tex">O(nm)</script></strong></p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>,M=N*<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][M];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=-m;i&lt;=m;i++)&#123;</span><br><span class="line">        dp[<span class="number">1</span>][i+N]=i+m+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=-m;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) dp[i&amp;<span class="number">1</span>][j+N]=(dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][m+N]-dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][-j<span class="number">-1</span>+N]+mod)%mod;</span><br><span class="line">            <span class="keyword">else</span> dp[i&amp;<span class="number">1</span>][j+N]=(dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][m+N]-dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][-m<span class="number">-1</span>+j+N]+mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=-m;j&lt;=m;j++) dp[i&amp;<span class="number">1</span>][j+N]=(dp[i&amp;<span class="number">1</span>][j+N]+dp[i&amp;<span class="number">1</span>][j<span class="number">-1</span>+N]+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n&amp;<span class="number">1</span>][m+N]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="We-are-the-Lights"><a href="#We-are-the-Lights" class="headerlink" title="We are the Lights"></a>We are the Lights</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>有n行m列的灯，刚开始这些灯都是关的，接下来有q次操作，每次操作可能是关或开某一列或某一行的灯，问你最后有多少灯开着。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于最终每盏灯的状态必然与最后一次操作到的情况一致，因此我们存储所有操作倒着遍历：</p><p>若操作的那行或那列已经被操作过了，直接跳过。</p><p>否则，</p><p>首先我们初始答案为0，即全关状态。</p><p>例如对第x行进行开灯操作，我们只需要让答案加上一行内的总数，然后减去列操作的数量，在列操作中有两种情况，要么固定那一行一定全开，这里已经算过开灯数量的贡献，要么固定那一行一定全关，之后再对行进行开灯操作自然不需要算上这些一定关的灯。同时还要记录对这个行已经操作过。</p><p>如果是对第x行进行关灯操作，由于初始答案为关灯数，并无对答案的贡献，但同样需标记这行已经被操作过。</p><p>对列操作同理。</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,m,qq;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">bool</span> rc;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">bool</span> op;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> str[N],stc[N];</span><br><span class="line"><span class="comment">//str为行状态，stc为列状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;qq;</span><br><span class="line">    <span class="comment">//最初每行列状态都未确定。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        str[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        stc[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;qq;i++)&#123;<span class="comment">//先把操作都都读进来，离线处理。</span></span><br><span class="line">        string pos;</span><br><span class="line">        cin&gt;&gt;pos;</span><br><span class="line">        <span class="type">int</span> idx;</span><br><span class="line">        cin&gt;&gt;idx;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        q[i].rc=(pos==<span class="string">&quot;column&quot;</span>);</span><br><span class="line">        q[i].pos=idx;</span><br><span class="line">        q[i].op=(op==<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt; ron,con,rof,cof;<span class="comment">//记录对第几行或第几列进行开灯或关灯的状态。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=qq<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//倒着遍历</span></span><br><span class="line">        <span class="type">int</span> rc=q[i].rc,pos=q[i].pos,op=q[i].op;</span><br><span class="line">        <span class="keyword">if</span>(rc&amp;&amp;stc[pos]==<span class="number">-1</span>)&#123;<span class="comment">//列操作，且该列位被操作过，若已被操作过直接continue</span></span><br><span class="line">            stc[pos]=op;</span><br><span class="line">            <span class="keyword">if</span>(op)&#123;</span><br><span class="line">                res+=n-(<span class="type">int</span>)rof.<span class="built_in">size</span>()-(<span class="type">int</span>)ron.<span class="built_in">size</span>();<span class="comment">//减去已经固定了多少行的状态</span></span><br><span class="line">                con[pos]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cof[pos]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!rc&amp;&amp;str[pos]==<span class="number">-1</span>)&#123;</span><br><span class="line">            str[pos]=op;</span><br><span class="line">            <span class="keyword">if</span>(op)&#123;</span><br><span class="line">                res+=m-(<span class="type">int</span>)cof.<span class="built_in">size</span>()-(<span class="type">int</span>)con.<span class="built_in">size</span>();</span><br><span class="line">                ron[pos]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                rof[pos]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑期多校 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的算法模板</title>
      <link href="/2023/08/22/%E6%88%91%E7%9A%84%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/08/22/%E6%88%91%E7%9A%84%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ACM竞赛模板——旧忆"><a href="#ACM竞赛模板——旧忆" class="headerlink" title="ACM竞赛模板——旧忆"></a>ACM竞赛模板——旧忆</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; add = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> a + b;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> add = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> a + b;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h3 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>,j=r+<span class="number">1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q,l,j),<span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序求区间第k小数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到q[l~r]中第k小的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> q[l];</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>,j=r+<span class="number">1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j-l+<span class="number">1</span>&gt;=k) <span class="keyword">return</span> <span class="built_in">quick_sort</span>(q,l,j,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r,k-(j-l+<span class="number">1</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,l,mid),<span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="type">int</span> i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++) q[l+i]=tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求区间逆序对数量</strong></p><p>应用：把一个无序的序列变成有序的序列，每次操作可以交换相邻两个数，最少需要的操作次数是这个序列的逆序对数量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;q,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    LL res=<span class="built_in">merge_sort</span>(q,l,mid)+<span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="type">int</span> i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmp[k++]=q[j++];</span><br><span class="line">            res+=mid-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++) q[l+i]=tmp[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_l</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_r</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getbit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (a &gt;&gt; b) &amp; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="comment">// 将 a 的第 b 位设置为 0 ，最低位编号为 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">unsetbit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &amp; ~(<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"><span class="comment">// 将 a 的第 b 位设置为 1 ，最低位编号为 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setbit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a | (<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"><span class="comment">// 将 a 的第 b 位取反 ，最低位编号为 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">flapbit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a ^ (<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"><span class="comment">//快速判断x是否是2的幂次</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_pow2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x &amp; (x - <span class="number">1</span>) == <span class="number">0</span>); &#125;</span><br><span class="line"><span class="comment">//得到一个数最低的一个1及其后面的所有位</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="comment">//统计x二进制表示下1的个数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">count1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        x = x &amp; (x - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//x -= lowbit(x);</span></span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>去掉最后一位 | (101101-&gt;10110) | x &gt;&gt; 1</strong><br><strong>在最后加一个0 | (101101-&gt;1011010) | x &lt; &lt; 1</strong><br><strong>在最后加一个1 | (101101-&gt;1011011) | x &lt; &lt; 1+1</strong><br><strong>把最后一位变成1 | (101100-&gt;101101) | x | 1</strong><br><strong>把最后一位变成0 | (101101-&gt;101100) | x | 1-1</strong><br><strong>最后一位取反 | (101101-&gt;101100) | x ^ 1</strong><br><strong>把右数第k位变成1 | (101001-&gt;101101,k=3) | x | (1 &lt; &lt; (k-1))</strong><br><strong>把右数第k位变成0 | (101101-&gt;101001,k=3) | x &amp; ~ (1 &lt; &lt; (k-1))</strong><br><strong>右数第k位取反 | (101001-&gt;101101,k=3) | x ^ (1 &lt; &lt; (k-1))</strong><br><strong>取末三位 | (1101101-&gt;101) | x &amp; 7</strong><br><strong>取末k位 | (1101101-&gt;1101,k=5) | x &amp; ((1 &lt; &lt; k)-1)</strong><br><strong>取右数第k位 | (1101101-&gt;1,k=4) | x &gt;&gt; (k-1) &amp; 1</strong><br><strong>把末k位变成1 | (101001-&gt;101111,k=4) | x | (1 &lt; &lt; k-1)</strong><br><strong>末k位取反 | (101001-&gt;100110,k=4) | x ^ (1 &lt; &lt; k-1)</strong><br><strong>把右边连续的1变成0 | (100101111-&gt;100100000) | x &amp; (x+1)</strong><br><strong>把右起第一个0变成1 | (100101111-&gt;100111111) | x | (x+1)</strong><br><strong>把右边连续的0变成1 | (11011000-&gt;11011111) | x | (x-1)</strong><br><strong>取右边连续的1 | (100101111-&gt;1111) | (x ^ (x+1)) &gt;&gt; 1</strong><br><strong>去掉右起第一个1的左边 | (100101000-&gt;1000) | x &amp; (x ^ (x-1))</strong><br><strong>判断奇数 (x&amp;1)==1</strong><br><strong>判断偶数 (x&amp;1)==0</strong><br><strong>取右边第一个1所在位置 x&amp;-x</strong></p><ul><li><p>十进制a、b，判断是否存在a的第i位为0，b的第i位为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((a&amp;b)&lt;b) 存在a的第i位为<span class="number">0</span>，b的第i位为<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> 不存在</span><br></pre></td></tr></table></figure></li><li><p>异或性质：</p><ul><li><p>与加法的关系：$a+b≡a\oplus(mod\ 2)$</p><p>注意奇偶性</p></li></ul></li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b[i]表示以i为右端点的连续k个数的最小值</span></span><br><span class="line"><span class="type">int</span> n,k,a[N],b[N];</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;a[i]&lt;=a[q.<span class="built_in">back</span>()]) q.<span class="built_in">pop_back</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(i-k&gt;=<span class="number">1</span>&amp;&amp;i-k==q.<span class="built_in">front</span>()) q.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=k) b[i]=a[q.<span class="built_in">front</span>()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lmin[i]表示a[i]左边第一个比它小的数</span></span><br><span class="line"><span class="type">int</span> a[N],stk[N],tt,lmin[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=a[i]) tt--;</span><br><span class="line">    <span class="keyword">if</span>(!tt) lmin[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> lmin[i]=stk[tt];</span><br><span class="line">    stk[++tt]=a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><h4 id="并查集基础"><a href="#并查集基础" class="headerlink" title="并查集基础"></a>并查集基础</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, siz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">p</span>(n+<span class="number">1</span>), <span class="built_in">siz</span>(n+<span class="number">1</span>, <span class="number">1</span>) &#123; <span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        p[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)]; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, siz, d;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">p</span>(n+<span class="number">1</span>), <span class="built_in">siz</span>(n+<span class="number">1</span>, <span class="number">1</span>), <span class="built_in">d</span>(n+<span class="number">1</span>) &#123; <span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[x]!=x)&#123;</span><br><span class="line">            <span class="type">int</span> rt=<span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x]+=d[p[x]];</span><br><span class="line">            p[x]=rt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        code:...</span><br><span class="line">        p[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)]; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><h4 id="莫队算法"><a href="#莫队算法" class="headerlink" title="莫队算法"></a>莫队算法</h4><p>例题：HH的项链</p><p>题意：n个数，多次询问区间不同数的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, M = <span class="number">2e5</span> + <span class="number">10</span>, K = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[K], sum;</span><br><span class="line"><span class="type">int</span> block;</span><br><span class="line"><span class="type">int</span> ans[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">&#125;q[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Query&amp; a, <span class="type">const</span> Query&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">get</span>(a.l), j = <span class="built_in">get</span>(b.l);</span><br><span class="line">    <span class="keyword">if</span>(i != j) <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">1</span> ? a.r &lt; b.r : a.r &gt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++cnt[x] == <span class="number">1</span>) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(--cnt[x] == <span class="number">0</span>) &#123;</span><br><span class="line">        sum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    block = <span class="built_in">max</span>(<span class="number">1LL</span>, (<span class="type">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span> * n * n / m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l) &#123;</span><br><span class="line">            <span class="built_in">add</span>(a[--l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r) &#123;</span><br><span class="line">            <span class="built_in">add</span>(a[++r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l) &#123;</span><br><span class="line">            <span class="built_in">del</span>(a[l++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r) &#123;</span><br><span class="line">            <span class="built_in">del</span>(a[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i].id] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h3><p>给定 $n$ 个元素（编号 $1 \sim n$），其中第 $i$ 个元素具有 $a_i,b_i,c_i$ 三种属性。 设 $f(i)$ 表示满足以下 $4$ 个条件： 1.  $a_j \le a_i$ 2.  $b_j \le b_i$ 3.  $c_j \le c_i$ 4.  $j \neq i$ 的 $j$ 的数量。 对于 $d \in [0,n)$，求满足 $f(i) = d$ 的 $i$ 的数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(Node&amp; w) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a != w.a || b != w.b || c != w.c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpA</span><span class="params">(Node&amp; x, Node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.a != y.a) <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">    <span class="keyword">if</span>(x.b != y.b) <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">    <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpB</span><span class="params">(Node&amp; x, Node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.b != y.b) <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">    <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, ans[<span class="number">100005</span>];</span><br><span class="line">Node e[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=k;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDQ</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">CDQ</span>(l, mid), <span class="built_in">CDQ</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">sort</span>(e + l, e + mid + <span class="number">1</span>, cmpB), <span class="built_in">sort</span>(e + mid + <span class="number">1</span>, e + r + <span class="number">1</span>, cmpB);</span><br><span class="line">    <span class="type">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; e[i].b &lt;= e[j].b) &#123;</span><br><span class="line">            <span class="built_in">add</span>(e[i].c, e[i].cnt);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        e[j].res += <span class="built_in">sum</span>(e[j].c);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt; i; k++) <span class="built_in">add</span>(e[k].c, -e[k].cnt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> Q = n;</span><br><span class="line">    map&lt;array&lt;<span class="type">int</span>, 3&gt;, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        mp[&#123;a, b, c&#125;]++;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x, cnt]: mp) &#123;</span><br><span class="line">        e[++n] = &#123;x[<span class="number">0</span>], x[<span class="number">1</span>], x[<span class="number">2</span>], cnt, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + <span class="number">1</span> + n, cmpA);</span><br><span class="line">    <span class="built_in">CDQ</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans[e[i].res + e[i].cnt - <span class="number">1</span>] += e[i].cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="树的基础"><a href="#树的基础" class="headerlink" title="树的基础"></a>树的基础</h4><h5 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h5><p>概念：以树的重心为整棵树的根时，它的最大子树最小（也就是删除该点后最大联通块最小）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="type">int</span> ans=N;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:v[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            <span class="type">int</span> s=<span class="built_in">dfs</span>(i);</span><br><span class="line">            res=<span class="built_in">max</span>(res,s);</span><br><span class="line">            sum+=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res=<span class="built_in">max</span>(res,n-sum);</span><br><span class="line">    ans=<span class="built_in">min</span>(res,ans);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector建图</span></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//返回的ans即为树的重心</span></span><br></pre></td></tr></table></figure><h6 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h6><p>树的直径，是指树上最长的一条链。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;PII&gt;&gt; v;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dist=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d1=<span class="number">0</span>,d2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:v[u])&#123;</span><br><span class="line">        <span class="type">int</span> j=it.first,w=it.second;</span><br><span class="line">        <span class="keyword">if</span>(j==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> d=<span class="built_in">dfs</span>(j,u)+w;</span><br><span class="line">        dist=<span class="built_in">max</span>(dist,d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(d&gt;=d1) d2=d1,d1=d;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d&gt;d2) d2=d;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,d1+d2);</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多组数据初始化ans=0</span></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//ans即为树的直径</span></span><br></pre></td></tr></table></figure><h6 id="树的中心"><a href="#树的中心" class="headerlink" title="树的中心"></a>树的中心</h6><p><strong>概念：以树的中心为整棵树的根时，从该根到每个叶子节点的最长路径最短</strong></p><p>该点到树中其他结点的最远距离最近</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 树的中心</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/1075/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; edge[N];</span><br><span class="line"><span class="type">int</span> d1[N], d2[N], p1[N], up[N];</span><br><span class="line"><span class="type">bool</span> is_leaf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_d</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line">d1[u] = d2[u] = -INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [v, w]: edge[u]) &#123;</span><br><span class="line"><span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs_d</span>(v, u);</span><br><span class="line"><span class="keyword">if</span>(d1[v] + w &gt;= d1[u]) &#123;</span><br><span class="line">d2[u] = d1[u], d1[u] = d1[v] + w;</span><br><span class="line">p1[u] = v;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(d1[v] + w &gt; d2[u]) &#123;</span><br><span class="line">d2[u] = d1[v] + w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d1[u] == -INF) &#123;</span><br><span class="line">d1[u] = d2[u] = <span class="number">0</span>;</span><br><span class="line">is_leaf[u] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_u</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [v, w]: edge[u]) &#123;</span><br><span class="line"><span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(p1[u] == v) up[v] = w + <span class="built_in">max</span>(up[u], d2[u]);</span><br><span class="line"><span class="keyword">else</span> up[v] = w + <span class="built_in">max</span>(up[u], d1[u]);</span><br><span class="line"><span class="built_in">dfs_u</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">edge[a].<span class="built_in">push_back</span>(&#123;b, c&#125;);</span><br><span class="line">edge[b].<span class="built_in">push_back</span>(&#123;a, c&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_d</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs_u</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> ct, res = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(res &gt; <span class="built_in">max</span>(d1[i], up[i])) &#123;</span><br><span class="line">res = <span class="built_in">max</span>(d1[i], up[i]);</span><br><span class="line">ct = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="LCA（最近公共祖先）"><a href="#LCA（最近公共祖先）" class="headerlink" title="LCA（最近公共祖先）"></a>LCA（最近公共祖先）</h6><ul><li><strong>倍增法：祖孙询问</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为结点数量，M=log2(N),一般多开2个，开成log2(N)+2</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;<span class="comment">//vector存图</span></span><br><span class="line"><span class="type">int</span> fa[N][M],depth[N];<span class="comment">//fa[i][j]表示结点i往上跳2^j步后的结点，depth[i]表示结点i的深度</span></span><br><span class="line"><span class="comment">//预处理出depth数组和fa数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    depth[<span class="number">0</span>]=<span class="number">0</span>,depth[root]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[v]&gt;depth[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                fa[v][<span class="number">0</span>]=u;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=M<span class="number">-1</span>;k++)&#123;<span class="comment">//注意这里的M-1(第1/3处)</span></span><br><span class="line">                    fa[v][k]=fa[fa[v][k<span class="number">-1</span>]][k<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回结点a,b的祖孙关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第2/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]]&gt;=depth[b])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第3/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(fa[a][k]!=fa[b][k])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">            b=fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bfs</span>(root);</span><br><span class="line"><span class="type">int</span> p=<span class="built_in">lca</span>(a,b);</span><br><span class="line"><span class="keyword">if</span>(p==a) a是b的祖先</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p==b) b是a的祖先</span><br><span class="line"><span class="keyword">else</span> a和b的祖先是p</span><br></pre></td></tr></table></figure><ul><li><p><strong>Tarjan算法求多次询问树上任意两点的最短距离（离线）</strong></p><p><strong>时间复杂度O（n+q)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为结点个数，M为询问个数</span></span><br><span class="line"><span class="type">int</span> res[M],dist[N],p[N],st[N];</span><br><span class="line"><span class="comment">//res[i]为第i-1个询问的结果，dist[i]为结点i到根节点距离，p[i]为并查集数组</span></span><br><span class="line"><span class="comment">//st[i]为0表示还没被搜索过，为1表示正在被搜索，为2表示已经被搜索过</span></span><br><span class="line">vector&lt;PII&gt; query[M];<span class="comment">//存储每个询问</span></span><br><span class="line">vector&lt;vector&lt;PII&gt;&gt; edge;<span class="comment">//存储边</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//缩点</span></span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x) <span class="keyword">return</span> p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;<span class="comment">//预处理每个点到根节点距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+w;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">        <span class="keyword">if</span>(!st[v])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            p[v]=u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:query[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=it.first,id=it.second;</span><br><span class="line">        <span class="keyword">if</span>(st[v]==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> ans=<span class="built_in">find</span>(v);</span><br><span class="line">            res[id]=dist[u]+dist[v]<span class="number">-2</span>*dist[ans];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,k;cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(&#123;y,k&#125;);</span><br><span class="line">        edge[y].<span class="built_in">push_back</span>(&#123;x,k&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">            query[a].<span class="built_in">push_back</span>(&#123;b,i&#125;);<span class="comment">//离线处理询问</span></span><br><span class="line">            query[b].<span class="built_in">push_back</span>(&#123;a,i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cout&lt;&lt;res[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="虚树"><a href="#虚树" class="headerlink" title="虚树"></a>虚树</h4><p>虚树的构建<br>1.先预处理原树的lca和dfs序，然后用栈维护关键点，构造虚树。</p><p>2． 对k个查询点按dfs序排序，先加入根节点，再按顺序加入查询点。3．栈维护从根向下的一条链上的关键点，按深度从小到大存储。<br>当加入a[x]后，满足s[1]= root,s[top] = a[x], s[x]为s[x 一1]的后代。4．现在考虑加入查询点a[i]，设lca= LCA(s[top],a[i])，分两类讨论:</p><p>(1) lca = s[top]，即a[i]是s[top]子树内的节点。直接把a[i]入栈。</p><p>(2) lca ≠ s[top]，即a[i]不是 s[top]子树内的节点（如图)。<br>lca下面路径上的关键点都应出栈， 出栈时从s[top -1]向s[top]连边。注意:当dep[s[top-1]]&lt;dep[lca]时，停止出栈。此时，<br>①如果lca = s[top]，说明lca已在栈中，那么直接把a[i]入栈。</p><p>②如果lca ≠ s[top]，说明lca不在栈中, s[top]依然在lca的下面。<br>先从lca向s[top]连一条边，再把 s[top]出栈，把lca入栈，把a[i]入栈。</p><p>枚举结束后，还要把最后一条链上的关键点连边，出栈。</p><p>例题：</p><p>给定一个树，q次询问：</p><p>每个询问包括点的个数k，接下来是k个点。</p><p>从这棵树中选一点使得到这k个点的最大距离最小，求这个最小值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">19</span>;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ve;</span><br><span class="line"><span class="type">int</span> dfn[N], tms;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[N][M],depth[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    depth[<span class="number">0</span>]=<span class="number">0</span>,depth[root]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[v]&gt;depth[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                fa[v][<span class="number">0</span>]=u;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=M<span class="number">-1</span>;k++)&#123;<span class="comment">//注意这里的M-1(第1/3处)</span></span><br><span class="line">                    fa[v][k]=fa[fa[v][k<span class="number">-1</span>]][k<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第2/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]]&gt;=depth[b])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第3/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(fa[a][k]!=fa[b][k])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">            b=fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++tms;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v: adj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;PII&gt; nadj[N];</span><br><span class="line"><span class="type">int</span> stk[N], top;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dp</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [v, w]: nadj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_dp</span>(v, u);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[u] + dp[v] + w);</span><br><span class="line">        dp[u] = <span class="built_in">max</span>(dp[u], dp[v] + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    nadj[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">    nadj[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// for(auto tmp: ve) &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; tmp &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; 1 &lt;&lt; &#x27;\n&#x27;; return;</span></span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[a] &lt; dfn[b];</span><br><span class="line">    &#125;);</span><br><span class="line">    stk[top = <span class="number">1</span>] = ve[<span class="number">0</span>];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rec = ve;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; ve.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> cur = ve[i];</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(cur, stk[top]);</span><br><span class="line">        <span class="keyword">if</span>(l == stk[top]) &#123;</span><br><span class="line">            stk[++top] = cur;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(depth[stk[top - <span class="number">1</span>]] &gt;= depth[l]) &#123;</span><br><span class="line">                <span class="built_in">add</span>(stk[top - <span class="number">1</span>], stk[top], depth[stk[top]] - depth[stk[top - <span class="number">1</span>]]);</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l == stk[top]) &#123;</span><br><span class="line">                stk[++top] = cur;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">add</span>(l, stk[top], depth[stk[top]] - depth[l]);</span><br><span class="line">                --top;</span><br><span class="line">                stk[++top] = l;</span><br><span class="line">                rec.<span class="built_in">push_back</span>(l);</span><br><span class="line">                stk[++top] = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(top &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">add</span>(stk[top], stk[top - <span class="number">1</span>], depth[stk[top]] - depth[stk[top - <span class="number">1</span>]]);</span><br><span class="line">        --top;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs_dp</span>(rec[<span class="number">0</span>], <span class="number">-1</span>);</span><br><span class="line">    cout &lt;&lt; (ans + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: rec) &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; x &lt;&lt; &quot;: \n&quot;;</span></span><br><span class="line">        <span class="comment">// for(auto [v, w]: nadj[x]) &#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; v &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        nadj[x].<span class="built_in">clear</span>();</span><br><span class="line">        dp[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    adj.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        ve.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            ve.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve_q</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h4><h5 id="一维树状数组"><a href="#一维树状数组" class="headerlink" title="一维树状数组"></a>一维树状数组</h5><h6 id="单点修改区间查询（树状数组的基本功能）"><a href="#单点修改区间查询（树状数组的基本功能）" class="headerlink" title="单点修改区间查询（树状数组的基本功能）"></a>单点修改区间查询（树状数组的基本功能）</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为维护的数列长度</span></span><br><span class="line"><span class="type">int</span> a[N],tr[N];<span class="comment">//tr[]维护a[]本身</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">add</span>(i,a[i]);<span class="comment">//初始化原数组</span></span><br><span class="line"><span class="built_in">add</span>(u,d);<span class="comment">//tr[u]增加d</span></span><br><span class="line"><span class="built_in">sum</span>(r)-<span class="built_in">sum</span>(l<span class="number">-1</span>)<span class="comment">//求tr[l..r]的和</span></span><br></pre></td></tr></table></figure><h6 id="区间修改单点查询"><a href="#区间修改单点查询" class="headerlink" title="区间修改单点查询"></a>区间修改单点查询</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为维护的数列长度</span></span><br><span class="line"><span class="type">int</span> a[N],tr[N];<span class="comment">//tr[]数组维护a[]的差分数组</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">add</span>(i,a[i]-a[i<span class="number">-1</span>]);<span class="comment">//初始化原数组</span></span><br><span class="line"><span class="built_in">add</span>(l,d),<span class="built_in">add</span>(r+<span class="number">1</span>,-d);<span class="comment">//将区间[l,r]分别加上d</span></span><br><span class="line"><span class="built_in">sum</span>(u);<span class="comment">//单点查询u</span></span><br></pre></td></tr></table></figure><h6 id="区间修改区间查询"><a href="#区间修改区间查询" class="headerlink" title="区间修改区间查询"></a>区间修改区间查询</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;T&gt; tr1,tr2;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n):<span class="built_in">tr1</span>(n+<span class="number">1</span>),<span class="built_in">tr2</span>(n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n,T a[]):<span class="built_in">tr1</span>(n+<span class="number">1</span>),<span class="built_in">tr2</span>(n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">add</span>(tr1,i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="built_in">add</span>(tr2,i,i*(a[i]-a[i<span class="number">-1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">prefix_sum</span>(r)-<span class="built_in">prefix_sum</span>(l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,T d)</span></span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(tr1,l,d),<span class="built_in">add</span>(tr1,r+<span class="number">1</span>,-d);</span><br><span class="line">        <span class="built_in">add</span>(tr2,l,l*d),<span class="built_in">add</span>(tr2,r+<span class="number">1</span>,(r+<span class="number">1</span>)*-d);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(vector&lt;T&gt; &amp;tr,<span class="type">int</span> x,T c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">            tr[i]+=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(vector&lt;T&gt; &amp;tr,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        T res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">            res+=tr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">prefix_sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(tr1,x)*(x+<span class="number">1</span>)-<span class="built_in">sum</span>(tr2,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="权值树状数组查询第k小"><a href="#权值树状数组查询第k小" class="headerlink" title="权值树状数组查询第k小"></a><strong>权值树状数组查询第k小</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权值树状数组查询第 k 小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">log2</span>(n); ~i; --i) &#123;</span><br><span class="line">    x += <span class="number">1</span> &lt;&lt; i;                    <span class="comment">// 尝试扩展</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= n || sum + t[x] &gt;= k)  <span class="comment">// 如果扩展失败</span></span><br><span class="line">      x -= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sum += t[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2050</span>;</span><br><span class="line"><span class="type">int</span> n,m; </span><br><span class="line"><span class="type">int</span> t1[N][N],t2[N][N],t3[N][N],t4[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=y;j&lt;=m;j+=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">            t1[i][j] += d;    t2[i][j] += x*d;</span><br><span class="line">            t3[i][j] += y*d;  t4[i][j] += x*y*d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=y;j&gt;<span class="number">0</span>;j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">ans += (x+<span class="number">1</span>)*(y+<span class="number">1</span>)*t1[i][j] - (y+<span class="number">1</span>)*t2[i][j] - (x+<span class="number">1</span>)*t3[i][j] + t4[i][j];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x2,y2)+<span class="built_in">sum</span>(x1<span class="number">-1</span>,y1<span class="number">-1</span>)-<span class="built_in">sum</span>(x1<span class="number">-1</span>,y2)-<span class="built_in">sum</span>(x2,y1<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x1,y1,d);<span class="built_in">add</span>(x2+<span class="number">1</span>,y2+<span class="number">1</span>,d);</span><br><span class="line">    <span class="built_in">add</span>(x1,y2+<span class="number">1</span>,-d);<span class="built_in">add</span>(x2+<span class="number">1</span>,y1,-d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h4><h5 id="不带懒标记的线段树"><a href="#不带懒标记的线段树" class="headerlink" title="不带懒标记的线段树"></a>不带懒标记的线段树</h5><p><strong>模板（区间最大子段和）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line">    <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">SegmentTree</span><span class="params">(vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="built_in">vector</span>(n_ + <span class="number">1</span>, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        n = init_.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        info.<span class="built_in">assign</span>(n * <span class="number">4</span> + <span class="number">5</span>, <span class="built_in">Info</span>());</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                info[p] = &#123;init_[l], init_[l], init_[l], init_[l]&#125;;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pushup</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, pos, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mx = -INF, lmx = -INF, rmx = -INF;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    <span class="type">int</span> sum = a.sum + b.sum;</span><br><span class="line">    <span class="type">int</span> mx = <span class="built_in">max</span>(&#123;a.mx, b.mx, a.rmx + b.lmx&#125;);</span><br><span class="line">    <span class="type">int</span> lmx = <span class="built_in">max</span>(&#123;a.lmx, a.sum + b.lmx&#125;);</span><br><span class="line">    <span class="type">int</span> rmx = <span class="built_in">max</span>(&#123;a.rmx + b.sum, b.rmx&#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;sum, mx, lmx, rmx&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="带懒标记的线段树"><a href="#带懒标记的线段树" class="headerlink" title="带懒标记的线段树"></a><strong>带懒标记的线段树</strong></h5><p><strong>模板（区间修改区间加减区间求最值）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line">    vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">LazySegmentTree</span><span class="params">(vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="built_in">vector</span>(n_ + <span class="number">1</span>, v_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(vector&lt;T&gt; init_)</span> </span>&#123;</span><br><span class="line">        n = init_.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        info.<span class="built_in">assign</span>(n * <span class="number">4</span> + <span class="number">5</span>, <span class="built_in">Info</span>());</span><br><span class="line">        tag.<span class="built_in">assign</span>(n * <span class="number">4</span> + <span class="number">5</span>, <span class="built_in">Tag</span>());</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                info[p] = &#123;init_[l]&#125;;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pushup</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, y, v);</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>, to = INF;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123; <span class="comment">//两个懒标记结合</span></span><br><span class="line">        <span class="keyword">if</span>(t.to != INF) &#123;</span><br><span class="line">            add = <span class="number">0</span>, to = t.to;</span><br><span class="line">        &#125;</span><br><span class="line">        add += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> mx = -INF;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>&#123; <span class="comment">//懒标记作用到信息上</span></span><br><span class="line">        <span class="keyword">if</span>(t.to != INF) &#123;</span><br><span class="line">            mx = t.to;</span><br><span class="line">        &#125;</span><br><span class="line">        mx += t.add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="built_in">max</span>(a.mx, b.mx)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区间加减区间求和</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum,add;</span><br><span class="line">&#125;tr[N*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum=tr[ls].sum+tr[rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].add)&#123;</span><br><span class="line">        tr[ls].add+=tr[u].add,tr[ls].sum+=(tr[ls].r-tr[ls].l+<span class="number">1</span>)*tr[u].add;</span><br><span class="line">        tr[rs].add+=tr[u].add,tr[rs].sum+=(tr[rs].r-tr[rs].l+<span class="number">1</span>)*tr[u].add;</span><br><span class="line">        tr[u].add=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) tr[u]=&#123;l,r,w[r],<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(ls,l,mid),<span class="built_in">build</span>(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">        tr[u].sum+=(tr[u].r-tr[u].l+<span class="number">1</span>)*d;</span><br><span class="line">        tr[u].add+=d;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(ls,l,r,d);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(rs,l,r,d);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum=<span class="built_in">query</span>(ls,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) sum+=<span class="built_in">query</span>(rs,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    <span class="type">int</span> l,r,d;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,d);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区间赋值区间求和</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum, flag;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].flag != <span class="number">-1</span>)&#123;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].sum = tr[u].flag * (tr[u &lt;&lt; <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum = tr[u].flag * (tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].flag = tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].flag = tr[u].flag;</span><br><span class="line">        tr[u].flag = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[u] = &#123;l, r, a[r], <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)&#123;</span><br><span class="line">        tr[u].flag = x;</span><br><span class="line">        tr[u].sum = tr[u].flag * (tr[u].r - tr[u].l + <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) sum += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) sum += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(q --)&#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, l, r)&lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    <span class="type">int</span> to = INF;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>+=(Tag t) &#123; <span class="comment">//两个懒标记结合</span></span><br><span class="line">        <span class="keyword">if</span>(t.to != INF) &#123;</span><br><span class="line">            to = t.to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">friend</span> Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a.sum + b.sum, a.l, b.r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>+=(Tag t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(t.to != INF) &#123;</span><br><span class="line">            sum = t.to * (r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line">    vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        info[u] = info[u &lt;&lt; <span class="number">1</span>] + info[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        info[u].l = l, info[u].r = r;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">            <span class="comment">// info[u] = &#123;&#125;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, m), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_):<span class="built_in">n</span>(n_) &#123;</span><br><span class="line">        info.<span class="built_in">assign</span>(n_ * <span class="number">4</span> + <span class="number">5</span>, <span class="built_in">Info</span>());</span><br><span class="line">        tag.<span class="built_in">assign</span>(n_ * <span class="number">4</span> + <span class="number">5</span>, <span class="built_in">Tag</span>());</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        info[u &lt;&lt; <span class="number">1</span>] += tag[u];</span><br><span class="line">        tag[u &lt;&lt; <span class="number">1</span>] += tag[u];</span><br><span class="line">        info[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[u];</span><br><span class="line">        tag[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[u];</span><br><span class="line">        tag[u] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            <span class="keyword">return</span> info[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(u &lt;&lt; <span class="number">1</span>, l, m, x, y) + <span class="built_in">rangeQuery</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, Tag v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= x &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            tag[u] += v;</span><br><span class="line">            info[u] += v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="built_in">rangeApply</span>(u &lt;&lt; <span class="number">1</span>, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, x, y, v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, Tag v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>区间乘区间加区间求和</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,p,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum,add,mul;</span><br><span class="line">&#125;tr[N*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum=(tr[ls].sum+tr[rs].sum)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(Node &amp;t,<span class="type">int</span> add,<span class="type">int</span> mul)</span></span>&#123;</span><br><span class="line">    t.sum=(t.sum*mul+(t.r-t.l+<span class="number">1</span>)*add)%p;</span><br><span class="line">    t.mul=t.mul*mul%p;</span><br><span class="line">    t.add=(t.add*mul+add)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(tr[ls],tr[u].add,tr[u].mul);</span><br><span class="line">    <span class="built_in">eval</span>(tr[rs],tr[u].add,tr[u].mul);</span><br><span class="line">    tr[u].add=<span class="number">0</span>,tr[u].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) tr[u]=&#123;l,r,w[r],<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(ls,l,mid),<span class="built_in">build</span>(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> add,<span class="type">int</span> mul)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="built_in">eval</span>(tr[u],add,mul);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(ls,l,r,add,mul);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(rs,l,r,add,mul);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) sum=<span class="built_in">query</span>(ls,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) sum=(sum+<span class="built_in">query</span>(rs,l,r))%p;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> t,l,r,d;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin&gt;&gt;t&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;d;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,<span class="number">0</span>,d);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line">            cin&gt;&gt;d;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,d,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区间整体query的例子</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[u];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;=mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Node res;</span><br><span class="line">            Node left=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r),right=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="built_in">pushup</span>(res,left,right);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可持久化线段树（主席树）"><a href="#可持久化线段树（主席树）" class="headerlink" title="可持久化线段树（主席树）"></a>可持久化线段树（主席树）</h5><p><strong>求区间第k小数（静态）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N * <span class="number">4</span> + N * <span class="number">17</span>];</span><br><span class="line"><span class="type">int</span> root[N], idx;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++idx;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid),tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = ++ idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[q].cnt ++;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[q].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> q, <span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="type">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i<span class="number">-1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m -- )&#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        cout &lt;&lt; nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, k)] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线段树套线段树"><a href="#线段树套线段树" class="headerlink" title="线段树套线段树"></a>线段树套线段树</h5><p><strong>矩阵查最值</strong></p><p><strong>封装</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree2d</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Vx, Vy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">friend</span> Info <span class="keyword">operator</span>+(Info a, Info b) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="built_in">max</span>(a.mx, b.mx)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        Info info;</span><br><span class="line">    &#125;tr[<span class="number">1000000</span>]; </span><br><span class="line">    <span class="type">int</span> root1 = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> root[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> Vx_, <span class="type">int</span> Vy_)</span> </span>&#123;</span><br><span class="line">        Vx = Vx_, Vy = Vy_;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx; i++) &#123;</span><br><span class="line">            root[i] = <span class="number">0</span>;</span><br><span class="line">            tr[i] = <span class="built_in">Tree</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        root1 = idx = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cgy</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> y1, <span class="type">int</span> y2, <span class="type">int</span> y3, Info info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) u = ++idx;</span><br><span class="line">        <span class="keyword">if</span>(y1 == y2) &#123;</span><br><span class="line">            tr[u].info = tr[u].info + info;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (y1 + y2) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y3 &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">cgy</span>(tr[u].l, y1, mid, y3, info);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cgy</span>(tr[u].r, mid + <span class="number">1</span>, y2, y3, info);</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].info = tr[tr[u].l].info + tr[tr[u].r].info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cgx</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> y1, <span class="type">int</span> y2, <span class="type">int</span> x3, <span class="type">int</span> y3, Info info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) u = ++idx;</span><br><span class="line">        <span class="built_in">cgy</span>(root[u], y1, y2, y3, info);</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = (x1 + x2) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x3 &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">cgx</span>(tr[u].l, x1, mid, y1, y2, x3, y3, info);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cgx</span>(tr[u].r, mid + <span class="number">1</span>, x2, y1, y2, x3, y3, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">queryy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> y1, <span class="type">int</span> y2, <span class="type">int</span> qy1, <span class="type">int</span> qy2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        <span class="keyword">if</span>(qy1 &lt;= y1 &amp;&amp; y2 &lt;= qy2) <span class="keyword">return</span> tr[u].info;</span><br><span class="line">        <span class="type">int</span> mid = (y1 + y2) / <span class="number">2</span>;</span><br><span class="line">        Info res;</span><br><span class="line">        <span class="keyword">if</span>(qy1 &lt;= mid) &#123;</span><br><span class="line">            Info tmp = <span class="built_in">queryy</span>(tr[u].l, y1, mid, qy1, qy2);</span><br><span class="line">            res = res + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(qy2 &gt; mid) &#123;</span><br><span class="line">            Info tmp = <span class="built_in">queryy</span>(tr[u].r, mid + <span class="number">1</span>, y2, qy1, qy2);</span><br><span class="line">            res = res + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">queryx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> y1, <span class="type">int</span> y2, <span class="type">int</span> qx1, <span class="type">int</span> qx2, <span class="type">int</span> qy1, <span class="type">int</span> qy2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        <span class="keyword">if</span>(qx1 &lt;= x1 &amp;&amp; x2 &lt;= qx2) <span class="keyword">return</span> <span class="built_in">queryy</span>(root[u], y1, y2, qy1, qy2);</span><br><span class="line">        <span class="type">int</span> mid = (x1 + x2) / <span class="number">2</span>;</span><br><span class="line">        Info res;</span><br><span class="line">        <span class="keyword">if</span>(qx1 &lt;= mid) &#123;</span><br><span class="line">            Info tmp = <span class="built_in">queryx</span>(tr[u].l, x1, mid, y1, y2, qx1, qx2, qy1, qy2);</span><br><span class="line">            res = res + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(qx2 &gt; mid) &#123;</span><br><span class="line">            Info tmp = <span class="built_in">queryx</span>(tr[u].r, mid + <span class="number">1</span>, x2, y1, y2, qx1, qx2, qy1, qy2);</span><br><span class="line">            res = res + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> qx1, <span class="type">int</span> qx2, <span class="type">int</span> qy1, <span class="type">int</span> qy2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">queryx</span>(root1, <span class="number">1</span>, Vx, <span class="number">1</span>, Vy, qx1, qx2, qy1, qy2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Info info)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cgx</span>(root1, <span class="number">1</span>, Vx, <span class="number">1</span>, Vy, x, y, info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span> * <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, v;</span><br><span class="line">&#125;g[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> mx = -INF, mn = INF;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, mx = -INF, mn = INF;</span><br><span class="line">&#125;t1[N], t2[N]; <span class="comment">//N * logV</span></span><br><span class="line"><span class="type">int</span> root1, root[N], idx1, idx2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cgy</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) u = ++idx2;</span><br><span class="line">    <span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">        t2[u].mx = <span class="built_in">max</span>(t2[u].mx, g[i].v);</span><br><span class="line">        t2[u].mn = <span class="built_in">min</span>(t2[u].mn, g[i].v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> MID = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[i].r &lt;= MID) &#123;</span><br><span class="line">        <span class="built_in">cgy</span>(t2[u].l, L, MID, i);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cgy</span>(t2[u].r, MID + <span class="number">1</span>, R, i);</span><br><span class="line">    &#125;</span><br><span class="line">    t2[u].mx = <span class="built_in">max</span>(t2[t2[u].l].mx, t2[t2[u].r].mx);</span><br><span class="line">    t2[u].mn = <span class="built_in">min</span>(t2[t2[u].l].mn, t2[t2[u].r].mn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cgx</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) u = ++idx1;</span><br><span class="line">    <span class="built_in">cgy</span>(root[u], <span class="number">1</span>, <span class="number">3000</span>, i);</span><br><span class="line">    <span class="keyword">if</span>(L == R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> MID = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[i].l &lt;= MID) &#123;</span><br><span class="line">        <span class="built_in">cgx</span>(t1[u].l, L, MID, i);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cgx</span>(t1[u].r, MID + <span class="number">1</span>, R, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Info <span class="title">queryy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> qly, <span class="type">int</span> qry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">    <span class="keyword">if</span>(qly &lt;= L &amp;&amp; R &lt;= qry) <span class="keyword">return</span> &#123;t2[u].mx, t2[u].mn&#125;;</span><br><span class="line">    <span class="type">int</span> MID = (L + R) / <span class="number">2</span>;</span><br><span class="line">    Info res;</span><br><span class="line">    <span class="keyword">if</span>(qly &lt;= MID) &#123;</span><br><span class="line">        Info tmp = <span class="built_in">queryy</span>(t2[u].l, L, MID, qly, qry);</span><br><span class="line">        res = &#123;<span class="built_in">max</span>(res.mx, tmp.mx), <span class="built_in">min</span>(res.mn, tmp.mn)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qry &gt; MID) &#123;</span><br><span class="line">        Info tmp = <span class="built_in">queryy</span>(t2[u].r, MID + <span class="number">1</span>, R, qly, qry);</span><br><span class="line">        res = &#123;<span class="built_in">max</span>(res.mx, tmp.mx), <span class="built_in">min</span>(res.mn, tmp.mn)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Info <span class="title">queryx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> qlx, <span class="type">int</span> qrx, <span class="type">int</span> qly, <span class="type">int</span> qry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">    <span class="keyword">if</span>(qlx &lt;= L &amp;&amp; R &lt;= qrx) <span class="keyword">return</span> <span class="built_in">queryy</span>(root[u], <span class="number">1</span>, <span class="number">3000</span>, qly, qry);</span><br><span class="line">    <span class="type">int</span> MID = (L + R) / <span class="number">2</span>;</span><br><span class="line">    Info res;</span><br><span class="line">    <span class="keyword">if</span>(qlx &lt;= MID) &#123;</span><br><span class="line">        Info tmp = <span class="built_in">queryx</span>(t1[u].l, L, MID, qlx, qrx, qly, qry);</span><br><span class="line">        res = &#123;<span class="built_in">max</span>(res.mx, tmp.mx), <span class="built_in">min</span>(res.mn, tmp.mn)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qrx &gt; MID) &#123;</span><br><span class="line">        Info tmp = <span class="built_in">queryx</span>(t1[u].r, MID + <span class="number">1</span>, R, qlx, qrx, qly, qry);</span><br><span class="line">        res = &#123;<span class="built_in">max</span>(res.mx, tmp.mx), <span class="built_in">min</span>(res.mn, tmp.mn)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">500000</span> * <span class="built_in">log2</span>(<span class="number">5e5</span>) * <span class="built_in">log2</span>(<span class="number">5e5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; g[i].l &gt;&gt; g[i].r &gt;&gt; g[i].v;</span><br><span class="line">        <span class="built_in">cgx</span>(root1, <span class="number">1</span>, <span class="number">3000</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; g[i].l &gt;&gt; g[i].r &gt;&gt; g[i].v;</span><br><span class="line">            g[i].l ^= last, g[i].r ^= last;</span><br><span class="line">            <span class="built_in">cgx</span>(root1, <span class="number">1</span>, <span class="number">3000</span>, i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> ql, qr;</span><br><span class="line">            cin &gt;&gt; ql &gt;&gt; qr;</span><br><span class="line">            ql ^= last, qr ^= last;</span><br><span class="line">            Info val = <span class="built_in">queryx</span>(root1, <span class="number">1</span>, <span class="number">3000</span>, ql, qr, ql, qr);</span><br><span class="line">            last = val.mx - val.mn;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(last) &gt; INF) &#123;</span><br><span class="line">                last = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; last &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">2</span>], p, v;</span><br><span class="line">    <span class="type">int</span> rev, same;</span><br><span class="line">    <span class="type">int</span> size, sum, ms, ls, rs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _v, <span class="type">int</span> _p)</span> </span>&#123;</span><br><span class="line">        s[<span class="number">0</span>] = s[<span class="number">1</span>] = <span class="number">0</span>, p = _p, v = _v;</span><br><span class="line">        rev = same = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">1</span>, sum = ms = v;</span><br><span class="line">        ls = rs = <span class="built_in">max</span>(v, <span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> root, nodes[N], tt;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;u = tr[x], &amp;l = tr[u.s[<span class="number">0</span>]], &amp;r = tr[u.s[<span class="number">1</span>]];</span><br><span class="line">    u.size = l.size + r.size + <span class="number">1</span>;</span><br><span class="line">    u.sum = l.sum + r.sum + u.v;</span><br><span class="line">    u.ls = <span class="built_in">max</span>(l.ls, l.sum + u.v + r.ls);</span><br><span class="line">    u.rs = <span class="built_in">max</span>(r.rs, r.sum + u.v + l.rs);</span><br><span class="line">    u.ms = <span class="built_in">max</span>(<span class="built_in">max</span>(l.ms, r.ms), l.rs + u.v + r.ls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;u = tr[x], &amp;l = tr[u.s[<span class="number">0</span>]], &amp;r = tr[u.s[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span> (u.same)</span><br><span class="line">    &#123;</span><br><span class="line">        u.same = u.rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">0</span>]) l.same = <span class="number">1</span>, l.v = u.v, l.sum = l.v * l.size;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">1</span>]) r.same = <span class="number">1</span>, r.v = u.v, r.sum = r.v * r.size;</span><br><span class="line">        <span class="keyword">if</span> (u.v &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (u.s[<span class="number">0</span>]) l.ms = l.ls = l.rs = l.sum;</span><br><span class="line">            <span class="keyword">if</span> (u.s[<span class="number">1</span>]) r.ms = r.ls = r.rs = r.sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (u.s[<span class="number">0</span>]) l.ms = l.v, l.ls = l.rs = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (u.s[<span class="number">1</span>]) r.ms = r.v, r.ls = r.rs = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u.rev)</span><br><span class="line">    &#123;</span><br><span class="line">        u.rev = <span class="number">0</span>, l.rev ^= <span class="number">1</span>, r.rev ^= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(l.ls, l.rs), <span class="built_in">swap</span>(r.ls, r.rs);</span><br><span class="line">        <span class="built_in">swap</span>(l.s[<span class="number">0</span>], l.s[<span class="number">1</span>]), <span class="built_in">swap</span>(r.s[<span class="number">0</span>], r.s[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">    <span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].p = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tr[x].p != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">        <span class="keyword">if</span> (z != k)</span><br><span class="line">            <span class="keyword">if</span> ((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!k) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">while</span> (u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size &gt;= k) u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span> == k) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> k -= tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span>, u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> u = nodes[tt -- ];</span><br><span class="line">    tr[u].<span class="built_in">init</span>(w[mid], p);</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid) tr[u].s[<span class="number">0</span>] = <span class="built_in">build</span>(l, mid - <span class="number">1</span>, u);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r) tr[u].s[<span class="number">1</span>] = <span class="built_in">build</span>(mid + <span class="number">1</span>, r, u);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// int mid = l + r &gt;&gt; 1;</span></span><br><span class="line">    <span class="comment">// int u = ++idx;</span></span><br><span class="line">    <span class="comment">// tr[u].init(mid, p);</span></span><br><span class="line">    <span class="comment">// if (l &lt; mid) tr[u].s[0] = build(l, mid - 1, u);</span></span><br><span class="line">    <span class="comment">// if (mid &lt; r) tr[u].s[1] = build(mid + 1, r, u);</span></span><br><span class="line">    <span class="comment">// push_up(u);</span></span><br><span class="line">    <span class="comment">// return u;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].s[<span class="number">0</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(tr[u].s[<span class="number">1</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">1</span>]);</span><br><span class="line">    nodes[++tt] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) nodes[++tt] = i;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    tr[<span class="number">0</span>].ms = w[<span class="number">0</span>] = w[n + <span class="number">1</span>] = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; w[i];</span><br><span class="line">    root = <span class="built_in">build</span>(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    string op;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;INSERT&quot;</span>) &#123;<span class="comment">//插入一个序列</span></span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            cin &gt;&gt; posi &gt;&gt; tot;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i++) cin &gt;&gt; w[i];</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">kth</span>(posi + <span class="number">1</span>), r = <span class="built_in">kth</span>(posi + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">build</span>(<span class="number">0</span>, tot - <span class="number">1</span>, r);</span><br><span class="line">            tr[r].s[<span class="number">0</span>] = u;</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;DELETE&quot;</span>) &#123;<span class="comment">//删除一段区间</span></span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            cin &gt;&gt; posi &gt;&gt; tot;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">kth</span>(posi), r = <span class="built_in">kth</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="built_in">dfs</span>(tr[r].s[<span class="number">0</span>]);</span><br><span class="line">            tr[r].s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;MAKE-SAME&quot;</span>) &#123;<span class="comment">//整体修改为一个树</span></span><br><span class="line">            <span class="type">int</span> posi, tot, c;</span><br><span class="line">            cin &gt;&gt; posi &gt;&gt; tot &gt;&gt; c;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">kth</span>(posi), r = <span class="built_in">kth</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="keyword">auto</span> &amp;son = tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">            son.same = <span class="number">1</span>, son.v = c, son.sum = c * son.size;</span><br><span class="line">            <span class="keyword">if</span>(c &gt; <span class="number">0</span>) son.ms = son.ls = son.rs = son.sum;</span><br><span class="line">            <span class="keyword">else</span> son.ms = c, son.ls = son.rs = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;REVERSE&quot;</span>) &#123;<span class="comment">//翻转区间</span></span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            cin &gt;&gt; posi &gt;&gt; tot;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">kth</span>(posi), r = <span class="built_in">kth</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="keyword">auto</span> &amp;son = tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">            son.rev ^= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">swap</span>(son.ls, son.rs);</span><br><span class="line">            <span class="built_in">swap</span>(son.s[<span class="number">0</span>], son.s[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;GET-SUM&quot;</span>) &#123;<span class="comment">//区间求和</span></span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            cin &gt;&gt; posi &gt;&gt; tot;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">kth</span>(posi), r = <span class="built_in">kth</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            cout &lt;&lt; tr[tr[r].s[<span class="number">0</span>]].sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> cout &lt;&lt; tr[root].ms &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//求总的最大子段和</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h4><p><strong>树剖+线段树</strong></p><p>给定一棵树，树中包含 n 个节点（编号 1∼n），其中第 i 个节点的权值为 ai。</p><p>初始时，11 号节点为树的根节点。</p><p>现在要对该树进行 m 次操作，操作分为以下 44 种类型：</p><ul><li><code>1 u v k</code>，修改路径上节点权值，将节点 u 和节点 v 之间路径上的所有节点（包括这两个节点）的权值增加 k。</li><li><code>2 u k</code>，修改子树上节点权值，将以节点 u 为根的子树上的所有节点的权值增加 k。</li><li><code>3 u v</code>，询问路径，询问节点 u 和节点 v 之间路径上的所有节点（包括这两个节点）的权值和。</li><li><code>4 u</code>，询问子树，询问以节点 u 为根的子树上的所有节点的权值和。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x1 x111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 y111111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x0 x00000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 y00000</span></span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">/*====================*/</span></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">int</span> id[N],nw[N],cnt;</span><br><span class="line"><span class="type">int</span> dep[N],sz[N],top[N],fa[N],son[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tr</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> add,sum;</span><br><span class="line">&#125;tr[N*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    dep[u]=depth,fa[u]=father,sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u,depth+<span class="number">1</span>);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    id[u]=++cnt,nw[cnt]=w[u],top[u]=t;</span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum=tr[u&lt;&lt;<span class="number">1</span>].sum+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;root=tr[u],&amp;left=tr[u&lt;&lt;<span class="number">1</span>],&amp;right=tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(root.add)&#123;</span><br><span class="line">        left.add+=root.add,left.sum+=root.add*(left.r-left.l+<span class="number">1</span>);</span><br><span class="line">        right.add+=root.add,right.sum+=root.add*(right.r-right.l+<span class="number">1</span>);</span><br><span class="line">        root.add=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">        tr[u]=&#123;l,r,<span class="number">0</span>,nw[r]&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[u]=&#123;l,r&#125;;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r)&#123;</span><br><span class="line">        tr[u].add+=k;</span><br><span class="line">        tr[u].sum+=k*(tr[u].r-tr[u].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tree</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>,id[u],id[u]+sz[u]<span class="number">-1</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_path</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>,id[top[u]],id[u],k);</span><br><span class="line">        u=fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>,id[v],id[u],k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) res+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_path</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        res+=<span class="built_in">query</span>(<span class="number">1</span>,id[top[u]],id[u]);</span><br><span class="line">        u=fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    res+=<span class="built_in">query</span>(<span class="number">1</span>,id[v],id[u]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_tree</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>,id[u],id[u]+sz[u]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i];</span><br><span class="line">    edge.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        edge[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        edge[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> t,u,v,k;</span><br><span class="line">        cin&gt;&gt;t&gt;&gt;u;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;v&gt;&gt;k;</span><br><span class="line">            <span class="built_in">update_path</span>(u,v,k);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">update_tree</span>(u,k);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">3</span>)&#123;</span><br><span class="line">            cin&gt;&gt;v;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query_path</span>(u,v)&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query_tree</span>(u)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="珂朵莉树-ODT"><a href="#珂朵莉树-ODT" class="headerlink" title="珂朵莉树(ODT)"></a>珂朵莉树(ODT)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ODT</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> ODT &amp;x) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ODT</span>(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> V):<span class="built_in">l</span>(L),<span class="built_in">r</span>(R),<span class="built_in">v</span>(V)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;ODT&gt; s;</span><br><span class="line"><span class="comment">//将包含pos的区间分开成l到pos-1和pos到r</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it=s.<span class="built_in">lower_bound</span>(<span class="built_in">ODT</span>(pos,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==pos) <span class="keyword">return</span> it;</span><br><span class="line">it--;</span><br><span class="line"><span class="type">int</span> l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;</span><br><span class="line">s.<span class="built_in">erase</span>(it);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">ODT</span>(l,pos<span class="number">-1</span>,v));</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">insert</span>(<span class="built_in">ODT</span>(pos,r,v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将l到r赋值为v</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">s.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">ODT</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//l到r区间加x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=itl;it!=itr;it++)&#123;</span><br><span class="line">it-&gt;v+=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求从l到r的和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=itl;it!=itr;it++)&#123;</span><br><span class="line">res+=(it-&gt;v)*(it-&gt;r-it-&gt;l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求从l到r的第k大数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=itl;it!=itr;it++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(&#123;it-&gt;v, it-&gt;r - it-&gt;l + <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= v[i].second) <span class="keyword">return</span> v[i].first;</span><br><span class="line">k -= v[i].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">a%=p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求从l到r的平方和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=itl;it!=itr;it++)&#123;</span><br><span class="line">ans = (ans + <span class="built_in">qpow</span>(it-&gt;v, x, mod) * (it-&gt;r - it-&gt;l + <span class="number">1</span>)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树上启发式合并-dsu-on-tree"><a href="#树上启发式合并-dsu-on-tree" class="headerlink" title="树上启发式合并(dsu on tree)"></a>树上启发式合并(dsu on tree)</h4><p>例题：Lomsat gelral</p><p>树的节点有颜色$c_i$，一种颜色占领了一个子树，当且仅当没有其他颜色在这个子树中出现得比它多（可能有多个）。求占领每个子树的所有颜色之和。</p><p>核心：先求每个轻儿子所在子树的信息每次求完清空，最后求重儿子所在子树求完不清空回溯到当前结点时保留这个重儿子所在子树的颜色信息，然后再累加上每个轻儿子所在子树的信息。</p><p><strong>时间复杂度$O(nlogn)$</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define int long long</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">bool multi = 0;</span><br><span class="line"></span><br><span class="line">const int N = 1e5 + 10;</span><br><span class="line">int n;</span><br><span class="line">int c[N], son[N], sz[N];</span><br><span class="line">int sum, mx, cnt[N], ans[N];</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; adj;</span><br><span class="line"></span><br><span class="line">void dfs_son(int u, int father) &#123;</span><br><span class="line">    sz[u] = 1;</span><br><span class="line">    for(auto v: adj[u]) &#123;</span><br><span class="line">        if(v == father) continue;</span><br><span class="line">        dfs_son(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        if(sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(int u, int father, int sgn, int pson) &#123;</span><br><span class="line">    cnt[c[u]] += sgn;</span><br><span class="line">    if(cnt[c[u]] &gt; mx) mx = cnt[c[u]], sum = c[u];</span><br><span class="line">    else if(cnt[c[u]] == mx) sum += c[u];</span><br><span class="line"></span><br><span class="line">    for(auto v: adj[u]) &#123;</span><br><span class="line">        if(v == father || v == pson) continue;</span><br><span class="line">        update(v, u, sgn, pson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(int u, int father, int op) &#123;</span><br><span class="line">    for(auto v: adj[u]) &#123;</span><br><span class="line">        if(v == father || v == son[u]) continue;</span><br><span class="line">        dfs(v, u, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    if(son[u]) dfs(son[u], u, 1);</span><br><span class="line">    update(u, father, 1, son[u]);</span><br><span class="line">    ans[u] = sum;</span><br><span class="line">    if(!op) update(u, father, -1, 0), sum = mx = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve()&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; c[i];</span><br><span class="line">    adj.assign(n + 1, vector&lt;int&gt;());</span><br><span class="line">    for(int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        int u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].push_back(v);</span><br><span class="line">        adj[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs_son(1, -1);</span><br><span class="line">    dfs(1, -1, 1);</span><br><span class="line">    for(int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; &quot; \n&quot; [i == n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main()&#123;</span><br><span class="line">    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span><br><span class="line">    int T = 1;</span><br><span class="line">    if(multi) cin &gt;&gt; T;</span><br><span class="line">    while(T--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表-RMQ问题"><a href="#ST表-RMQ问题" class="headerlink" title="ST表(RMQ问题)"></a>ST表(RMQ问题)</h3><p>求区间最大/ 小数</p><p><strong>时间复杂度：预处理O($nlogn$) 在线查找O($1$)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为原数组个数，M为log2(N),一般多开2个，开成log2(N)+2</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RMQ</span>&#123;</span><br><span class="line">    vector&lt;vector&lt;T&gt;&gt; f;</span><br><span class="line">    <span class="built_in">RMQ</span>(<span class="type">int</span> n, T w[]):<span class="built_in">f</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;T&gt;(<span class="built_in">log2</span>(n)+<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="built_in">log2</span>(n)+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;t;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!j)&#123;</span><br><span class="line">                    f[i][j]=w[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i][j]=<span class="built_in">max</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=r-l+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">log2</span>(len);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(f[l][k],f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">RMQ&lt;<span class="type">int</span>&gt; <span class="title">rmq</span><span class="params">(n,a)</span></span>;</span><br><span class="line">rmq.<span class="built_in">query</span>(l,r);</span><br><span class="line"><span class="comment">//注意：原数组要从1开始存储</span></span><br><span class="line"><span class="comment">//区间[a,b]的最大/小值:query(a,b)</span></span><br></pre></td></tr></table></figure><p>维护区间最大次大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, H = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> f[N][H], f1[N][H], l[N][H], r[N][H];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; H; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> t = i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)), fl = f[i][j - <span class="number">1</span>], fr = f[t][j - <span class="number">1</span>];</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(fl, fr);</span><br><span class="line">            <span class="keyword">if</span> (fl == fr) l[i][j] = l[i][j - <span class="number">1</span>], r[i][j] = r[t][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (fl &gt; fr) l[i][j] = l[i][j - <span class="number">1</span>], r[i][j] = r[i][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> l[i][j] = l[t][j - <span class="number">1</span>], r[i][j] = r[t][j - <span class="number">1</span>];</span><br><span class="line">            f1[i][j] = <span class="built_in">max</span>(f1[i][j - <span class="number">1</span>], f1[t][j - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (fl != fr) f1[i][j] = <span class="built_in">max</span>(f1[i][j], <span class="built_in">min</span>(fl, fr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="function">pii <span class="title">qry</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">log2</span>(y - x + <span class="number">1</span>), tt = y - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>, fl = f[x][t], fr = f[tt][t];</span><br><span class="line">    <span class="type">int</span> max1 = <span class="built_in">max</span>(fl, fr), max2 = <span class="built_in">max</span>(f1[x][t], f1[tt][t]);</span><br><span class="line">    <span class="keyword">if</span> (fl != fr) max2 = <span class="built_in">max</span>(max2, <span class="built_in">min</span>(fl, fr));</span><br><span class="line">    <span class="type">bool</span> mul_max1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fl == fr) mul_max1 = l[x][t] != r[tt][t];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fl &gt; fr) mul_max1 = l[x][t] != r[x][t];</span><br><span class="line">    <span class="keyword">else</span> mul_max1 = l[tt][t] != r[tt][t];</span><br><span class="line">    <span class="keyword">if</span> (mul_max1) max2 = max1;</span><br><span class="line">    <span class="keyword">return</span> &#123;max1, max2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios :: <span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, q; cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; f[i][<span class="number">0</span>], l[i][<span class="number">0</span>] = r[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        pii t = <span class="built_in">qry</span>(x, y); cout &lt;&lt; t.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; t.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h3><h4 id="矩形面积并"><a href="#矩形面积并" class="headerlink" title="矩形面积并"></a>矩形面积并</h4><ul><li><strong>线段树（时间复杂度<script type="math/tex">nlogn</script>)</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y1, y2;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Seg &amp;w) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; w.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg[N * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">double</span> len;</span><br><span class="line">&#125;tr[N * <span class="number">8</span>];</span><br><span class="line">vector&lt;<span class="type">double</span>&gt; ys;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>(), y) - ys.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u]=&#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l != r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].cnt) tr[u].len = ys[tr[u].r + <span class="number">1</span>] - ys[tr[u].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[u].l != tr[u].r) &#123;</span><br><span class="line">        tr[u].len = tr[u &lt;&lt; <span class="number">1</span>].len + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    &#125;<span class="keyword">else</span> tr[u].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[u].cnt += k;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Test case #&quot;</span> &lt;&lt; T &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Total explored area: &quot;</span>;</span><br><span class="line">    ys.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">double</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        seg[m++] = &#123;x1, y1, y2, <span class="number">1</span>&#125;;</span><br><span class="line">        seg[m++] = &#123;x2, y1, y2, <span class="number">-1</span>&#125;;</span><br><span class="line">        ys.<span class="built_in">push_back</span>(y1), ys.<span class="built_in">push_back</span>(y2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>());</span><br><span class="line">    ys.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ys.<span class="built_in">begin</span>(), ys.<span class="built_in">end</span>()), ys.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, ys.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">sort</span>(seg, seg + m);</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i) res += tr[<span class="number">1</span>].len * (seg[i].x -seg[i - <span class="number">1</span>].x);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(seg[i].y1), <span class="built_in">find</span>(seg[i].y2) - <span class="number">1</span>, seg[i].k);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; res &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n, n)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        T++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>计算几何（时间复杂度<script type="math/tex">n^2logn</script>)</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Point &amp;B) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;B.x||x==B.x&amp;&amp;y&lt;B.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;l[N], r[N], q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; xs;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">range_area</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(l[i].x &lt;= a &amp;&amp; r[i].x &gt;= b)</span><br><span class="line">            q[cnt++] = &#123;l[i].y, r[i].y&#125;;</span><br><span class="line">    <span class="keyword">if</span>(!cnt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + cnt);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> st = q[<span class="number">0</span>].x, ed = q[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].x &lt;= ed) ed = <span class="built_in">max</span>(ed, q[i].y);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res += ed - st;</span><br><span class="line">            st = q[i].x, ed = q[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res += ed - st;</span><br><span class="line">    <span class="keyword">return</span> res * (b - a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; l[i].x &gt;&gt; l[i].y &gt;&gt; r[i].x &gt;&gt; r[i].y;</span><br><span class="line">        xs.<span class="built_in">push_back</span>(l[i].x); xs.<span class="built_in">push_back</span>(r[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(xs.<span class="built_in">begin</span>(),xs.<span class="built_in">end</span>());</span><br><span class="line">    xs.<span class="built_in">erase</span>(<span class="built_in">unique</span>(xs.<span class="built_in">begin</span>(),xs.<span class="built_in">end</span>()),xs.<span class="built_in">end</span>());</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; xs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        res += <span class="built_in">range_area</span>(xs[i], xs[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数点"><a href="#二维数点" class="headerlink" title="二维数点"></a>二维数点</h4><p><strong>二位前缀和思想+树状数组（离线）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tr[N], ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, sgn, id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; w.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">presum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;Node&gt; op;</span><br><span class="line">vector&lt;PII&gt; p;<span class="comment">//被数点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_op</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> id)</span> </span>&#123;<span class="comment">//存入所有[x1,y1,x2,y2]的矩形</span></span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x2, y2, <span class="number">1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, <span class="number">1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x1 - <span class="number">1</span>, y2, <span class="number">-1</span>, id&#125;);</span><br><span class="line">op.<span class="built_in">push_back</span>((Node)&#123;x2, y1 - <span class="number">1</span>, <span class="number">-1</span>, id&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count_point</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(op.<span class="built_in">begin</span>(), op.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [x, y, sgn, id]: op) &#123;</span><br><span class="line"><span class="keyword">while</span>(cur &lt; (<span class="type">int</span>)p.<span class="built_in">size</span>() &amp;&amp; p[cur].first &lt;= x) <span class="built_in">add</span>(p[cur++].second, <span class="number">1</span>);</span><br><span class="line">ans[id] += sgn * <span class="built_in">presum</span>(y);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; sgn * presum(y) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="建图优化"><a href="#建图优化" class="headerlink" title="建图优化"></a>建图优化</h3><h4 id="线段树建图优化"><a href="#线段树建图优化" class="headerlink" title="线段树建图优化"></a>线段树建图优化</h4><p>例题：n个点，m条边，s是起点，问点s到点1~n的最短距离</p><p>有三种边：接下来的 <em>q</em> 行表示 <em>q</em> 种方案。</p><ul><li>输入 <code>1 v u w</code> 表示第一种方案，从v向u连边，权值为w</li><li>输入 <code>2 v l r w</code> 表示第二种方案，从v向$[l,r]$区间连边，权值为w</li><li>输入 <code>3 v l r w</code> 表示第三种方案，从$[l,r]$区间向v连边，权值为w</li></ul><p><strong>这里的线段树实际上有两个，分别为u和u+D,左树从上往下，右数从下往上，区间向点连边从右树结点连出，点向区间连入到左树结点。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Legacy</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 406 (Div. 1)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/786/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">1e6</span> + <span class="number">10</span>, D = <span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; g[M];</span><br><span class="line"><span class="type">int</span> dist[M], leaf[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u] = &#123;l, r&#125;;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">leaf[l] = u;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v, <span class="type">int</span> w, <span class="type">int</span> op)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span>(op) g[u + D].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line"><span class="keyword">else</span> g[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, leaf[s]&#125;);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[leaf[s]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = t.second, distance = t.first;</span><br><span class="line">        <span class="keyword">if</span>(dist[u]&lt;distance) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:g[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)&#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">g[leaf[u]].<span class="built_in">push_back</span>(&#123;leaf[v], w&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> v, l, r, w;</span><br><span class="line">cin &gt;&gt; v &gt;&gt; l &gt;&gt; r &gt;&gt; w;</span><br><span class="line"><span class="built_in">connect</span>(<span class="number">1</span>, l, r, leaf[v], w, op % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">g[leaf[i]].<span class="built_in">push_back</span>(&#123;leaf[i] + D, <span class="number">0</span>&#125;),g[leaf[i] + D].<span class="built_in">push_back</span>(&#123;leaf[i], <span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[leaf[i]] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; dist[leaf[i]] &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前后缀建图优化"><a href="#前后缀建图优化" class="headerlink" title="前后缀建图优化"></a>前后缀建图优化</h4><p>例题：以2-SAT为背景。你有 <em>n</em> 张卡片，第 <em>i</em> 张卡片正面写着一个数字 a<em>i</em>，反面写着一个数字 b<em>i</em>，现在你可以摆放卡片（规定每张卡片朝上的面），询问是否存在一种摆放方式，使得任意两张不同的卡片朝上面所写的数字都是互质的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: F - Coprime Solitaire</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 210</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc210/tasks/abc210_f</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">2000005</span>],ispr[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> prime[<span class="number">2000005</span>],pcnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[pcnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">30005</span>], b[<span class="number">30005</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> nw;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20000005</span>, M = <span class="number">20000005</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], ts, stk[N], top;</span><br><span class="line"><span class="type">int</span> id[N], cnt;</span><br><span class="line"><span class="type">bool</span> ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++ ts;</span><br><span class="line">stk[++top] = u, ins[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[j]) &#123;</span><br><span class="line"><span class="built_in">tarjan</span>(j);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u] == dfn[u]) &#123;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y = stk[top--], ins[y] = <span class="literal">false</span>, id[y] = cnt;</span><br><span class="line">&#125;<span class="keyword">while</span>(y != u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; n ? x - n : x + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">get_primes</span>(<span class="number">2000002</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pcnt; i++) &#123;</span><br><span class="line">ispr[prime[i]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">nw = n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i] / j; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ispr[j]) v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ispr[a[i] / j]) v[a[i] / j].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[i] / j; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ispr[j]) v[j].<span class="built_in">push_back</span>(i + n);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ispr[b[i] / j]) v[b[i] / j].<span class="built_in">push_back</span>(i + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">++nw;</span><br><span class="line"><span class="built_in">add</span>(nw, <span class="built_in">nt</span>(v[i][j]));</span><br><span class="line"><span class="keyword">if</span>(j) <span class="built_in">add</span>(v[i][j], nw - <span class="number">1</span>), <span class="built_in">add</span>(nw, nw - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = (<span class="type">int</span>)v[i].<span class="built_in">size</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">++nw;</span><br><span class="line"><span class="built_in">add</span>(nw, <span class="built_in">nt</span>(v[i][j]));</span><br><span class="line"><span class="keyword">if</span>(j &lt; (<span class="type">int</span>)v[i].<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">add</span>(v[i][j], nw - <span class="number">1</span>), <span class="built_in">add</span>(nw, nw - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; id[i] &lt;&lt; &#x27; &#x27; &lt;&lt; id[i + n] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="keyword">if</span>(id[i] == id[i + n]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树链剖分-线段树优化建图"><a href="#树链剖分-线段树优化建图" class="headerlink" title="树链剖分+线段树优化建图"></a>树链剖分+线段树优化建图</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">8e5</span> + <span class="number">10</span>, D = <span class="number">4e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[M];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; g[M];</span><br><span class="line"><span class="type">int</span> dist[M], leaf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u] = &#123;l, r&#125;;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">leaf[l] = u;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line">g[(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) + D].<span class="built_in">push_back</span>(&#123;u + D, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v, <span class="type">int</span> w, <span class="type">int</span> op)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span>(op) g[u + D].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line"><span class="keyword">else</span> g[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) <span class="built_in">connect</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v, w, op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, leaf[s]&#125;);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[leaf[s]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = t.second, distance = t.first;</span><br><span class="line">        <span class="keyword">if</span>(dist[u]&lt;distance) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:g[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)&#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id[N],nw[N],cnt;</span><br><span class="line"><span class="type">int</span> dep[N],sz[N],top[N],fa[N],son[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    dep[u]=depth,fa[u]=father,sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u,depth+<span class="number">1</span>);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    id[u]=++cnt,top[u]=t;</span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_path</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        <span class="built_in">connect</span>(<span class="number">1</span>, id[top[u]], id[u], leaf[id[a]], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        u=fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="built_in">connect</span>(<span class="number">1</span>, id[v], id[u], leaf[id[a]], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">edge[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">g[leaf[i]].<span class="built_in">push_back</span>(&#123;leaf[i] + D, <span class="number">0</span>&#125;),g[leaf[i] + D].<span class="built_in">push_back</span>(&#123;leaf[i], <span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">update_path</span>(u, v, u);</span><br><span class="line"><span class="built_in">update_path</span>(u, v, v);</span><br><span class="line">&#125;</span><br><span class="line">s = id[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[leaf[id[i]]] == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; dist[leaf[id[i]]] &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h3><h4 id="有向图的强连通分量"><a href="#有向图的强连通分量" class="headerlink" title="有向图的强连通分量"></a>有向图的强连通分量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">vector&lt;vector&lt;PII&gt;&gt; g,ng;</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],timestamp;</span><br><span class="line"><span class="type">int</span> stk[N],top;</span><br><span class="line"><span class="type">bool</span> in_stk[N];</span><br><span class="line"><span class="type">int</span> id[N],scc_cnt,sz[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u,in_stk[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:g[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=it.first;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(in_stk[v])&#123;</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">        ++scc_cnt;</span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            v=stk[top--];</span><br><span class="line">            in_stk[v]=<span class="literal">false</span>;</span><br><span class="line">            id[v]=scc_cnt;</span><br><span class="line">            sz[scc_cnt]++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line">        <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:g[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=it.first,w=it.second;</span><br><span class="line">        <span class="type">int</span> a=id[i],b=id[j];</span><br><span class="line">        <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">            ng[a].<span class="built_in">push_back</span>(&#123;b,w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无向图的双连通分量"><a href="#无向图的双连通分量" class="headerlink" title="无向图的双连通分量"></a>无向图的双连通分量</h4><p><strong>边的双连通分量</strong></p><p>边的双连通分量：图中任意两不同点之间都有至少两条边不重复的路径。</p><p>求将无向图转化为边的双连通分量需要连接的最少边数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">l<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>,M=<span class="number">20010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],timestamp;</span><br><span class="line"><span class="type">int</span> stk[N],top;</span><br><span class="line"><span class="type">int</span> id[N],dcc_cnt;</span><br><span class="line"><span class="type">bool</span> is_bridge[M];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> from)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j,i);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[u]&lt;low[j])&#123;</span><br><span class="line">                is_bridge[i]=is_bridge[i^<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i!=(from^<span class="number">1</span>))&#123;</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">        ++dcc_cnt;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top--];</span><br><span class="line">            id[y]=dcc_cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        <span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;idx;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_bridge[i]) </span><br><span class="line">            d[id[e[i]]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dcc_cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">1</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(cnt+<span class="number">1</span>)/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>点的双连通分量</strong></p><p>点的双连通分量：图中任意两不同点之间都有至少两条点不重复的路径。</p><p>求将无向图转化为点的双连通分量需要连接的最少边数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>,M=<span class="number">30010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],timestamp;</span><br><span class="line"><span class="type">int</span> root,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">            <span class="keyword">if</span>(low[j]&gt;=dfn[u]) cnt++;</span><br><span class="line">        &#125;<span class="keyword">else</span> low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(u!=root) cnt++;</span><br><span class="line"></span><br><span class="line">    ans=<span class="built_in">max</span>(ans,cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    idx=timestamp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b),<span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(root=<span class="number">0</span>;root&lt;n;root++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[root])&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="built_in">tarjan</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans+cnt<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m,n||m)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑序"><a href="#拓扑序" class="headerlink" title="拓扑序"></a>拓扑序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//点的入度</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;<span class="comment">//存储拓扑序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;<span class="comment">//将拓扑序存入res中</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:edge[t])&#123;</span><br><span class="line">            d[i]--;</span><br><span class="line">            <span class="keyword">if</span>(d[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读边时需要记录每个点的入度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    d[b]++,edge[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">topsort</span>();</span><br></pre></td></tr></table></figure><h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><p><strong>floyd算法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) d[i][j] = (i == j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">    <span class="type">int</span> u, v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    d[u][v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">if</span>(d[i][k])</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                    <span class="keyword">if</span>(d[k][j])</span><br><span class="line">                        d[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><h4 id="Dijkstra-仅有正权边"><a href="#Dijkstra-仅有正权边" class="headerlink" title="Dijkstra(仅有正权边)"></a>Dijkstra(仅有正权边)</h4><ul><li><em>*朴素版本O($n^{2}$)</em></li><li>稠密图常用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N],dist[N];<span class="comment">//</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[j]&lt;dist[t]))&#123;</span><br><span class="line">                t=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st[t]=<span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            dist[j]=<span class="built_in">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f3f3f3f3f</span>)&#123;<span class="comment">//如果是int应该为0x3f3f3f3f</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="comment">//读入边</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    g[a][b]=g[b][a]=<span class="built_in">min</span>(g[a][b],c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">dijkstra</span>()&lt;&lt;endl;</span><br></pre></td></tr></table></figure><ul><li><p>堆优化版O($mlogn$)</p></li><li><p>稀疏图常用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; edge;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = t.second, distance = t.first;</span><br><span class="line">        <span class="keyword">if</span>(dist[u]&lt;distance) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)&#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f3f3f3f3f</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">edge[a].<span class="built_in">push_back</span>(&#123;b,c&#125;);</span><br><span class="line">cout&lt;&lt;<span class="built_in">disjkstra</span>()&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Bellman-ford（存在负权边，有边数限制）"><a href="#Bellman-ford（存在负权边，有边数限制）" class="headerlink" title="Bellman-ford（存在负权边，有边数限制）"></a>Bellman-ford（存在负权边，有边数限制）</h4><p><strong>时间复杂度O(nm)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> dist[N],last[N];<span class="comment">//N为结点数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">&#125;edges[M];<span class="comment">//M为边数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(last,dist,<span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> e=edges[i];</span><br><span class="line">            dist[e.b]=<span class="built_in">min</span>(dist[e.b],last[e.a]+e.c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    edge[i]=&#123;x,y,z&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bellman_ford</span>();</span><br><span class="line">如果dist[n]&gt;<span class="number">0x3f3f3f3f</span>/<span class="number">2</span>，说明k步内不可达，反之可达，dist[n]即为最短路</span><br></pre></td></tr></table></figure><h4 id="Spfa-存在负权边，可判断负环）"><a href="#Spfa-存在负权边，可判断负环）" class="headerlink" title="Spfa(存在负权边，可判断负环）"></a>Spfa(存在负权边，可判断负环）</h4><p><strong>时间复杂度最好O(n),最坏O(nm)</strong></p><ul><li>spfa求最短路</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//判断结点是否在队列中</span></span><br><span class="line">vector&lt;vector&lt;PII&gt;&gt; edge;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+w)&#123;</span><br><span class="line">                dist[v]=dist[u]+w;</span><br><span class="line">                <span class="keyword">if</span>(!st[v])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    st[v]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">spfa</span>();</span><br><span class="line">如果t==<span class="number">0x3f3f3f3f</span>，说明不可达，反之不可达，t即为最短路</span><br></pre></td></tr></table></figure><ul><li><p>判断负环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dist[N],cnt[N];<span class="comment">//注意把dist[0]建成超级源点，</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//如果被数据卡TLE，可尝试换成stack</span></span><br><span class="line">    <span class="comment">//这步相当于建了一个分别连向1~n，边权为0的虚拟源点0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        st[i]=<span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[j]&gt;dist[u]+w[i])&#123;</span><br><span class="line">                dist[j]=dist[u]+w[i];</span><br><span class="line">                cnt[j]=cnt[u]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[j]&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">注意：建边</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">spfa</span>()) 存在负环</span><br><span class="line"><span class="keyword">else</span> 不存在负环</span><br></pre></td></tr></table></figure></li></ul><h4 id="Floyd-预处理出任意两边距离"><a href="#Floyd-预处理出任意两边距离" class="headerlink" title="Floyd(预处理出任意两边距离)"></a>Floyd(预处理出任意两边距离)</h4><p><strong>时间复杂度O($n^3$)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                d[i][j]=<span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) d[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> d[i][j]=INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读入边</span></span><br><span class="line"><span class="type">int</span> x,y,z;cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">d[x][y]=<span class="built_in">min</span>(d[x][y],z);</span><br><span class="line"><span class="built_in">floyd</span>();</span><br><span class="line"><span class="comment">//[x][y]&gt;INF/2,说明x不能到达y，反正最短路为d[x][y]</span></span><br></pre></td></tr></table></figure><h4 id="无向图求最小环-Floyd"><a href="#无向图求最小环-Floyd" class="headerlink" title="无向图求最小环(Floyd)"></a>无向图求最小环(Floyd)</h4><p>注意这里INF不能取0x3f3f3f3f3f3f3f3f，因为3*INF会爆long long。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e13</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dist[N][N], edge[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j) dist[i][j] = edge[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        dist[u][v] = dist[v][u] = edge[u][v] = edge[v][u] = <span class="built_in">min</span>(dist[u][v], w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; k; j++) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, dist[i][j] + edge[i][k] + edge[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans == INF) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No solution.\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p><strong>时间复杂度O（$n^2$)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[t]&gt;dist[j])) t=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist[t]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        res+=dist[t];</span><br><span class="line">        st[t]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) dist[j]=<span class="built_in">min</span>(dist[j],g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="comment">//读入边</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">g[u][v]=g[v][u]=<span class="built_in">min</span>(g[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">prim</span>();</span><br><span class="line">如果<span class="built_in">prim</span>()==<span class="number">0x3f3f3f3f</span>,说明不能形成最小生成树，反之t即最小生成树</span><br></pre></td></tr></table></figure><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><p><strong>时间复杂度O($mlogm$)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//N为最大结点数，M为最大边数</span></span><br><span class="line"><span class="type">int</span> fa[N],res;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge&amp; E) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&lt;E.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]!=x) <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> pa=<span class="built_in">find</span>(edg[i].a),pb=<span class="built_in">find</span>(edg[i].b);</span><br><span class="line">        <span class="keyword">if</span>(pa!=pb)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            res+=edg[i].w;</span><br><span class="line">            p[pa]=pb;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用并查集记得初始化fa数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b,w;cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class="line">    edge[i]=&#123;a,b,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(edge,edge+m);</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) 说明不能形成最小生成树</span><br><span class="line"><span class="keyword">else</span> res是最小生成树</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Kruskal重构树"><a href="#Kruskal重构树" class="headerlink" title="Kruskal重构树"></a>Kruskal重构树</h5><p>性质：原图中的两点u、v在Kruskal重构树上的LCA的点权是原图中u到v的所有路径中最大边的最小值（从小到大排序边）（最小边的最大值，从大到小排序边）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOG = <span class="number">19</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> p[N * <span class="number">2</span>], depth[N * <span class="number">2</span>], fa[N * <span class="number">2</span>][LOG];</span><br><span class="line"><span class="type">int</span> w[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt; w.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G[M];</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> stt)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(stt);</span><br><span class="line">    depth[stt] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v: adj[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[v] &gt; depth[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                depth[v] = depth[u] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                fa[v][<span class="number">0</span>] = u;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt; LOG; k++) &#123;</span><br><span class="line">                    fa[v][k] = fa[fa[v][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a] &lt; depth[b])  <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = LOG - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]] &gt;= depth[b]) &#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = LOG - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k]) &#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    adj.<span class="built_in">resize</span>(n * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        depth[i] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        G[i] = &#123;a, b, c&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(G, G + m);</span><br><span class="line">    <span class="type">int</span> tot = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a = G[i].a, b = G[i].b, c = G[i].c;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(pa != pb) &#123;</span><br><span class="line">            p[pa] = p[pb] = ++tot;</span><br><span class="line">            w[tot] = c;</span><br><span class="line">            adj[tot].<span class="built_in">push_back</span>(pa);</span><br><span class="line">            adj[tot].<span class="built_in">push_back</span>(pb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i] == i &amp;&amp; depth[i] == INF) &#123;</span><br><span class="line">            <span class="built_in">bfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(pa != pb) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; w[<span class="built_in">lca</span>(a, b)] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: G. Vlad and the Mountains</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 888 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1851/problem/G</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 5000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, M = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;w) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c &lt; w.c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;G[N];</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> depth[N], fa[N][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    depth[<span class="number">0</span>]=<span class="number">0</span>,depth[root]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[v]&gt;depth[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                fa[v][<span class="number">0</span>]=u;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=M<span class="number">-1</span>;k++)&#123;<span class="comment">//注意这里的M-1(第1/3处)</span></span><br><span class="line">                    fa[v][k]=fa[fa[v][k<span class="number">-1</span>]][k<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第2/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]]&gt;=depth[b])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//注意这里的M-1(第3/3处)</span></span><br><span class="line">        <span class="keyword">if</span>(fa[a][k]!=fa[b][k])&#123;</span><br><span class="line">            a=fa[a][k];</span><br><span class="line">            b=fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">w[i] = <span class="number">0</span>;</span><br><span class="line">depth[i] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">fa[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">adj.<span class="built_in">clear</span>();</span><br><span class="line">adj.<span class="built_in">resize</span>(n * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n * <span class="number">2</span>; i++) p[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; h[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">cin &gt;&gt; G[i].a &gt;&gt; G[i].b;</span><br><span class="line">G[i].c = <span class="built_in">max</span>(h[G[i].a], h[G[i].b]);</span><br><span class="line">&#125;</span><br><span class="line">tot = n;</span><br><span class="line"><span class="built_in">sort</span>(G, G + m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> a = G[i].a, b = G[i].b, c = G[i].c;</span><br><span class="line"><span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line"><span class="keyword">if</span>(pa != pb) &#123;</span><br><span class="line"></span><br><span class="line">++tot;</span><br><span class="line">p[pa] = p[pb] = tot;</span><br><span class="line">w[tot] = c;</span><br><span class="line">adj[tot].<span class="built_in">push_back</span>(pa);</span><br><span class="line">adj[tot].<span class="built_in">push_back</span>(pb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p[i] == i &amp;&amp; depth[i] == INF) &#123;</span><br><span class="line"><span class="built_in">bfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">cin &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="type">int</span> a, b, e;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; e;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(a) != <span class="built_in">find</span>(b) || w[<span class="built_in">lca</span>(a, b)] &gt; h[a] + e) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><h4 id="二分图判定（染色法）"><a href="#二分图判定（染色法）" class="headerlink" title="二分图判定（染色法）"></a>二分图判定（染色法）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> color[N];</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;<span class="comment">//vector建图</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v:edge[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!color[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(v, <span class="number">3</span> - c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[v] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历每个结点，分别对每一个为染色的点进行染色</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    <span class="keyword">if</span> (!color[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (flag) 给定图是二分图</span><br><span class="line"><span class="keyword">else</span> 给定图不是二分图</span><br></pre></td></tr></table></figure><h4 id="匈牙利算法（二分图的最大匹配）"><a href="#匈牙利算法（二分图的最大匹配）" class="headerlink" title="匈牙利算法（二分图的最大匹配）"></a>匈牙利算法（二分图的最大匹配）</h4><p>必须从1开始计数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> match[N];<span class="comment">//match[i]表示左半部第i个结点匹配的右半部结点</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//st[i]表示左半部点i是否已经匹配上</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[v])&#123;</span><br><span class="line">            st[v]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">find</span>(match[v]))&#123;</span><br><span class="line">                match[v]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建边：只建单向边</span></span><br><span class="line"><span class="comment">//如：接下来 m 行，每行包含两个整数 u 和 v，表示左半部点集中的点 u 和右半部点集中的点 v</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找二分图最大匹配</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n1;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(i)) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到的cnt即为二分图的最大匹配</span></span><br></pre></td></tr></table></figure><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h4><h5 id="Dinic算法求最大流"><a href="#Dinic算法求最大流" class="headerlink" title="Dinic算法求最大流"></a>Dinic算法求最大流</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = , M = , INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> m,n,S,T;</span><br><span class="line"><span class="type">int</span> h[N],e[M],f[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> q[N],d[N],cur[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx]=b,f[idx]=c,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">    e[idx]=a,f[idx]=<span class="number">0</span>,ne[idx]=h[b],h[b]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    q[<span class="number">0</span>]=S,d[S]=<span class="number">0</span>,cur[S]=h[S];</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt)&#123;</span><br><span class="line">        <span class="type">int</span> t=q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[t];~i;i=ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> ver=e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[ver]==<span class="number">-1</span>&amp;&amp;f[i])&#123;</span><br><span class="line">                d[ver]=d[t]+<span class="number">1</span>;</span><br><span class="line">                cur[ver]=h[ver];</span><br><span class="line">                <span class="keyword">if</span>(ver==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt]=ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T) <span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=cur[u];~i&amp;&amp;flow&lt;limit;i=ne[i])&#123;</span><br><span class="line">        cur[u]=i;</span><br><span class="line">        <span class="type">int</span> ver=e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[ver]==d[u]+<span class="number">1</span>&amp;&amp;f[i])&#123;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">find</span>(ver,<span class="built_in">min</span>(f[i],limit-flow));</span><br><span class="line">            <span class="keyword">if</span>(!t) d[ver]=<span class="number">-1</span>;</span><br><span class="line">            f[i]-=t,f[i^<span class="number">1</span>]+=t,flow+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">find</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//源点是S，汇点是T</span></span><br><span class="line"><span class="comment">//注意初始化：memset(h,-1,sizeof h);</span></span><br></pre></td></tr></table></figure><h5 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, M = (<span class="number">10200</span> + N) * <span class="number">2</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], l[M], ne[M], idx;<span class="comment">//l数组记录每条边的容量下界</span></span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N], A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = d - c, l[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (d[ver] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + <span class="number">1</span>;</span><br><span class="line">                cur[ver] = h[ver];</span><br><span class="line">                <span class="keyword">if</span> (ver == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[ ++ tt] = ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T) <span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> ver = e[i];</span><br><span class="line">        <span class="keyword">if</span> (d[ver] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(ver, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span> (!t) d[ver] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t, flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) <span class="keyword">while</span> (flow = <span class="built_in">find</span>(S, INF)) r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    S=<span class="number">0</span>,T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c,d);</span><br><span class="line">        A[a]-=c,A[b]+=c;<span class="comment">//A数组记录点i所有入边的容量下界之和减去出边的容量下界之和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//保证流量守恒</span></span><br><span class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>) <span class="built_in">add</span>(S,i,<span class="number">0</span>,A[i]),tot+=A[i];<span class="comment">//tot为源点的出边容量之和</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]&lt;<span class="number">0</span>) <span class="built_in">add</span>(i,T,<span class="number">0</span>,-A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dinic</span>()!=tot) cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m*<span class="number">2</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;f[i^<span class="number">1</span>]+l[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;<span class="comment">//该边的流量加上该边的流量下界</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有源汇上下界最大流"><a href="#有源汇上下界最大流" class="headerlink" title="有源汇上下界最大流"></a>有源汇上下界最大流</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, M = (N + <span class="number">10000</span>) * <span class="number">2</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N], A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (d[ver] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + <span class="number">1</span>;</span><br><span class="line">                cur[ver] = h[ver];</span><br><span class="line">                <span class="keyword">if</span> (ver == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[ ++ tt] = ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T) <span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> ver = e[i];</span><br><span class="line">        <span class="keyword">if</span> (d[ver] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(ver, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span> (!t) d[ver] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t, flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) <span class="keyword">while</span> (flow = <span class="built_in">find</span>(S, INF)) r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    S=<span class="number">0</span>,T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        <span class="built_in">add</span>(a,b,d-c);</span><br><span class="line">        A[a]-=c,A[b]+=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>) <span class="built_in">add</span>(S,i,A[i]),tot+=A[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]&lt;<span class="number">0</span>) <span class="built_in">add</span>(i,T,-A[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(t,s,INF);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dinic</span>()&lt;tot) cout&lt;&lt;<span class="string">&quot;No Solution&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> res=f[idx<span class="number">-1</span>];</span><br><span class="line">        S=s,T=t;</span><br><span class="line">        f[idx<span class="number">-1</span>]=f[idx<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line">        cout&lt;&lt;res+<span class="built_in">dinic</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有源汇上下界最小流"><a href="#有源汇上下界最小流" class="headerlink" title="有源汇上下界最小流"></a>有源汇上下界最小流</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>, M = (N + <span class="number">125003</span>) * <span class="number">2</span>, INF = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N], A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (d[ver] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + <span class="number">1</span>;</span><br><span class="line">                cur[ver] = h[ver];</span><br><span class="line">                <span class="keyword">if</span> (ver == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[ ++ tt] = ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == T) <span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> ver = e[i];</span><br><span class="line">        <span class="keyword">if</span> (d[ver] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(ver, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span> (!t) d[ver] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t, flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) <span class="keyword">while</span> (flow = <span class="built_in">find</span>(S, INF)) r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    S=<span class="number">0</span>,T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        <span class="built_in">add</span>(a,b,d-c);</span><br><span class="line">        A[a]-=c,A[b]+=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>) <span class="built_in">add</span>(S,i,A[i]),tot+=A[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]&lt;<span class="number">0</span>) <span class="built_in">add</span>(i,T,-A[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(t,s,INF);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dinic</span>()&lt;tot) cout&lt;&lt;<span class="string">&quot;No Solution&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> res=f[idx<span class="number">-1</span>];</span><br><span class="line">        S=t,T=s;</span><br><span class="line">        f[idx<span class="number">-1</span>]=f[idx<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line">        cout&lt;&lt;res-<span class="built_in">dinic</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多源汇最大流"><a href="#多源汇最大流" class="headerlink" title="多源汇最大流"></a>多源汇最大流</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sc,tc;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;sc&gt;&gt;tc;</span><br><span class="line">    S=<span class="number">0</span>,T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(sc--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="built_in">add</span>(S,x,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tc--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="built_in">add</span>(x,T,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">dinic</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="关键边"><a href="#关键边" class="headerlink" title="关键边"></a>关键边</h5><p>定义：只给其扩大容量之后整个流网络的最大流能够变大，对于这样的边我们称之为关键边。</p><p>求关键边的数量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">bool</span> st[], <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i ^ t, ver = e[i];<span class="comment">//t=1时为反向边，反之为正向边</span></span><br><span class="line">        <span class="keyword">if</span> (f[j] &amp;&amp; !st[ver])</span><br><span class="line">            <span class="built_in">dfs</span>(ver, st, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dinic</span>();<span class="comment">//跑一遍最大流</span></span><br><span class="line">    <span class="built_in">dfs</span>(S, vis_s, <span class="number">0</span>);<span class="comment">//记录所有能从S经过残留网络中流量大于0的边能到的点</span></span><br><span class="line">    <span class="built_in">dfs</span>(T, <span class="type">vis_t</span>, <span class="number">1</span>);<span class="comment">////记录所有能从T经过残留网络中流量大于0的边能到的点,这里走的就是反向边</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;<span class="comment">//遍历所有正向边，如果这条边的起点能被S走到且终点能走到T并且这条边在残留网络中为正即没有满流则说明这条边是关键边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m * <span class="number">2</span>; i += <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (!f[i] &amp;&amp; vis_s[e[i ^ <span class="number">1</span>]] &amp;&amp; <span class="type">vis_t</span>[e[i]])</span><br><span class="line">            res ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h4><h5 id="Dinic算法求最小割"><a href="#Dinic算法求最小割" class="headerlink" title="Dinic算法求最小割"></a>Dinic算法求最小割</h5><p>代码与Dinic算法求最大流相同，因为<strong>最大流=最小割</strong>。</p><h5 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h5><p>定义：所有闭合子图中点权之和最大的图，闭合图指图中所有点沿着边能到达的所有点都必须在该点集中。</p><p>建图：源点S向所有正权边连一条容量为该点权的边，所有负权边向汇点连一条容量为该点权相反数的边，图中原有边容量为正无穷。正权点点权和减去最小割即为最大权闭合子图的最大权值。</p><h5 id="最大密度子图"><a href="#最大密度子图" class="headerlink" title="最大密度子图"></a>最大密度子图</h5><p>定义：给定无向图$G=(V,E)$，其子图记为$G’=(V’,E’)$，在所有子图构成的集合中，密度$D=\frac {E’} {V’}$最大的元素称为最大密度子图。</p><h5 id="最小点权覆盖集"><a href="#最小点权覆盖集" class="headerlink" title="最小点权覆盖集"></a>最小点权覆盖集</h5><p>定义：图中所有边的两个端点至少有一个在点集中所构成的点权之和最小的点的集合。</p><p>这个问题是NP完全问题，只能通过爆搜完成，而最小割模型的最小点权覆盖集是对于一个二分图而言的。</p><p>建图：首先该图是个二分图，分成左右两部分点集，只有左右两个点集之间右边。从源点向所有左部结点连一条容量为该点权值的边，从右部结点向汇点连一条容量为该点权值的边，中间的边容量为正无穷。求出的最小割即为最小权点覆盖。</p><p>如何找方案：从源点沿着残留网络容量大于0的边搜到的点记为集合S，剩下的点记为集合T，若边E（根据割边的定义，这里只枚举正向边）的两点a,b分别在S,T集合，则该边为割边。</p><h5 id="最大点权独立集"><a href="#最大点权独立集" class="headerlink" title="最大点权独立集"></a>最大点权独立集</h5><p>定义：任意两点中间不存在边的点权之和最大的点的集合。</p><p>同“最小点权覆盖集”，也是NP完全问题，这里的最小割模型同样对于二分图而言。</p><p>最大点权独立集= 所有点的权值之和 - 最小点权覆盖集（同上）</p><h4 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h4><h5 id="EK-spfa求最小费用最大流"><a href="#EK-spfa求最小费用最大流" class="headerlink" title="EK+spfa求最小费用最大流"></a>EK+spfa求最小费用最大流</h5><p>求最小费用最大流转为最大费用最大流时：</p><ul><li><p>可以将spfa中的memset(d, 0x3f, sizeof d);改为memset(d, -0x3f, sizeof d);，以及松弛操作符号取反即可。</p></li><li><p>或者直接将费用取反。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>, M = <span class="number">100010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="keyword">sizeof</span> incf);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span> (hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line">        <span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (f[i] &amp;&amp; d[ver] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + w[i];</span><br><span class="line">                pre[ver] = i;</span><br><span class="line">                incf[ver] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span> (!st[ver])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt ++ ] = ver;</span><br><span class="line">                    <span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[ver] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EK</span><span class="params">(<span class="type">int</span>&amp; flow, <span class="type">int</span>&amp; cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        flow += t, cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">EK</span>(flow, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, flow, cost);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] += f[i ^ <span class="number">1</span>], f[i ^ <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        w[i] = -w[i], w[i ^ <span class="number">1</span>] = -w[i ^ <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, -<span class="built_in">EK</span>(flow, cost));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分图最优匹配"><a href="#二分图最优匹配" class="headerlink" title="二分图最优匹配"></a>二分图最优匹配</h5><p>例题：有 $n$ 件工作要分配给 $n $个人做。第 $i$ 个人做第 $j$件工作产生的效益为 $c[i][j]$试设计一个将 $n$ 件工作分配给 $n$ 个人做的分配方案。对于给定的 $n$ 件工作和 $n$ 个人，计算最优分配方案和最差分配方案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">5210</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="keyword">sizeof</span> incf);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span> (hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line">        <span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (f[i] &amp;&amp; d[ver] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + w[i];</span><br><span class="line">                pre[ver] = i;</span><br><span class="line">                incf[ver] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span> (!st[ver])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt ++ ] = ver;</span><br><span class="line">                    <span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[ver] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    S = <span class="number">0</span>, T = n * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(S, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">add</span>(n + i, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">            <span class="built_in">add</span>(i, n + j, <span class="number">1</span>, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">EK</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] += f[i ^ <span class="number">1</span>], f[i ^ <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        w[i] = -w[i], w[i ^ <span class="number">1</span>] = -w[i ^ <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, -<span class="built_in">EK</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最大权不相交路径"><a href="#最大权不相交路径" class="headerlink" title="最大权不相交路径"></a>最大权不相交路径</h5><p>用容量控制经过该点（拆点）或该边的次数，用费用表示经过该点累加的权值，求最大费用最大流。</p><h5 id="网格图模型"><a href="#网格图模型" class="headerlink" title="网格图模型"></a>网格图模型</h5><p>对于某个点可以走无限次次但只有一次能获得价值可以采用拆点，然后分成两个边，其中一个边容量为1，费用为该点价值；另一条边容量为正无穷，费用为0。</p><h4 id="网络流模型的常用技巧"><a href="#网络流模型的常用技巧" class="headerlink" title="网络流模型的常用技巧"></a>网络流模型的常用技巧</h4><h5 id="拆点技巧"><a href="#拆点技巧" class="headerlink" title="拆点技巧"></a>拆点技巧</h5><p>对于限制点的经过次数，我们可以把一个点拆成入点和出点，从入点向出点连一条容量为能经过该点的次数。</p><h5 id="还原流网络"><a href="#还原流网络" class="headerlink" title="还原流网络"></a>还原流网络</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; idx; k += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    f[k] += f[k ^ <span class="number">1</span>];</span><br><span class="line">    f[k ^ <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h3><p>输入第一行包含一个整数<script type="math/tex">t</script>，t=1为无向图，t=2为有向图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> type;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">bool</span> used[M];</span><br><span class="line"><span class="type">int</span> ans[M], cnt;</span><br><span class="line"><span class="type">int</span> din[N], dout[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;i = h[u]; ~i;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i])</span><br><span class="line">        &#123;</span><br><span class="line">            i = ne[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) used[i ^ <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = i / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>) t = -t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> t = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        i = ne[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line"></span><br><span class="line">        ans[ ++ cnt] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;type);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) <span class="built_in">add</span>(b, a);</span><br><span class="line">        din[b] ++ , dout[a] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (din[i] + dout[i] &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (din[i] != dout[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (h[i] != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt; i; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h3><p><strong>时间复杂度:O(n+m)</strong></p><p>建图：当u被选择时，v一定被选择，则u向v连边。</p><p>第一行包含两个整数 n,m。接下来 m 行，每行包含四个整数 i,a,j,b，用来描述一个条件，表示 “xi 为 a 或 xj 为 b”。输出任意一组解或报告无解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define x first</span></span><br><span class="line"><span class="comment">//#define y second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">10</span>,M=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],ts,stk[N],top;</span><br><span class="line"><span class="type">int</span> id[N],cnt;</span><br><span class="line"><span class="type">bool</span> ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++ts;</span><br><span class="line">    stk[++top]=u,ins[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top--],ins[y]=<span class="literal">false</span>,id[y]=cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> i,a,j,b;</span><br><span class="line">        cin&gt;&gt;i&gt;&gt;a&gt;&gt;j&gt;&gt;b;</span><br><span class="line">        i--,j--;</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">2</span>*i+!a,<span class="number">2</span>*j+b);</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">2</span>*j+!b,<span class="number">2</span>*i+a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(id[i*<span class="number">2</span>]==id[i*<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;IMPOSSIBLE&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;POSSIBLE&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(id[i*<span class="number">2</span>]&lt;id[i*<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;0 &quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;1 &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h3><p><strong>存在负环时无解</strong><br><strong>记得建立一个超级源点，连向所有点</strong></p><ul><li><p><strong>最长路:</strong></p><p><strong>求最小差值(至少)</strong><br><strong>A-B&lt;=W$\Longrightarrow$连一条由B-&gt;A，边权为W的边</strong><br><strong>A&gt;=C$\Longrightarrow$连一条0-&gt;A，边权为C的边</strong></p></li><li><p><strong>最短路：</strong></p><p><strong>求最大差值(最多)</strong><br><strong>A-B&lt;=W$\Longrightarrow$连一条由B-&gt;A，边权为W的边</strong><br><strong>A&lt;=C$\Longrightarrow$连一条0-&gt;A，边权为C的边</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cnt[N],dist[N];;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;<span class="comment">//求最长路</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//若TLE可尝试改成stack</span></span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span> dist);<span class="comment">//最长路：-0x3f,最短路:0x3f</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    st[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//count若tle可尝试去掉有关count的注释，运行一定次数提前跳出循环</span></span><br><span class="line">    <span class="comment">//int count=0;</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:edge[u])&#123;</span><br><span class="line">            <span class="type">int</span> v=it.first,w=it.second;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&lt;dist[u]+w)&#123;<span class="comment">//最长路：小于号,最短路:大于号</span></span><br><span class="line">                dist[v]=dist[u]+w;</span><br><span class="line">                cnt[v]=cnt[u]+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//if(++count&gt;1000000) return false;</span></span><br><span class="line">                <span class="keyword">if</span>(cnt[v]&gt;=n+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st[v])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    st[v]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">    <span class="type">int</span> x,a,b;cin&gt;&gt;x&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    edge[a].<span class="built_in">push_back</span>(&#123;b,<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0号点为超级源点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) edge[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;i,<span class="number">1</span>&#125;);<span class="comment">//求最长路情况下：xi&gt;=x0+1(而x0=0，即所有xi&gt;=0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">spfa</span>()) 无解</span><br><span class="line"><span class="keyword">else</span> 所有dist[i]即x[i]的一组解</span><br></pre></td></tr></table></figure><h3 id="仙人掌"><a href="#仙人掌" class="headerlink" title="仙人掌"></a>仙人掌</h3><p>给一个N个点M条边的仙人掌。仙人掌定义如下：</p><p>任意一条边至多只出现在一条简单回路的无向连通图称为仙人掌。</p><p>有 Q 组询问，每次询问两点之间的最短路径。</p><p>第一行包含三个整数，分别表示 N,M,Q。</p><p>下接 M 行，每行三个整数 v,u,w 表示一条无向边 v−u，长度为 w。</p><p>最后 Q 行，每行两个整数 v,u 表示一组询问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12010</span>, M = N * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, Q, new_n;</span><br><span class="line"><span class="type">int</span> h1[N], h2[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], cnt;</span><br><span class="line"><span class="type">int</span> s[N], stot[N], fu[N], fw[N], fe[N];</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">14</span>], depth[N], d[N];</span><br><span class="line"><span class="type">int</span> A,B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> h[], <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_circle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = y; k != x; k = fu[k])&#123;</span><br><span class="line">        s[k] = sum;</span><br><span class="line">        sum += fw[k];</span><br><span class="line">    &#125;</span><br><span class="line">    s[x] = stot[x] = sum;</span><br><span class="line">    <span class="built_in">add</span>(h2, x, ++new_n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = y; k != x; k = fu[k])&#123;</span><br><span class="line">        stot[k] = sum;</span><br><span class="line">        <span class="built_in">add</span>(h2, new_n, k, <span class="built_in">min</span>(s[k], sum - s[k]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> from)</span></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h1[u]; ~i; i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            fu[j] = u, fw[j] = w[i], fe[j] = i;</span><br><span class="line">            <span class="built_in">tarjan</span>(j, i);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[u] &lt; low[j]) <span class="built_in">add</span>(h2, u, j, w[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i != (from ^ <span class="number">1</span>)) low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h1[u]; ~i; i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(dfn[u] &lt; dfn[j] &amp;&amp; fe[j] != i)</span><br><span class="line">            <span class="built_in">build_circle</span>(u, j, w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">    depth[u] = depth[father] + <span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>] = father;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">13</span>; k++)</span><br><span class="line">        fa[u][k] = fa[fa[u][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h2[u]; ~i; i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        d[j] = d[u] + w[i];</span><br><span class="line">        <span class="built_in">dfs_lca</span>(j, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a] &lt; depth[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">13</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]] &gt;= depth[b])</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">13</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])&#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    A = a, B = b;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q;</span><br><span class="line">    new_n = n;</span><br><span class="line">    <span class="built_in">memset</span>(h1, <span class="number">-1</span>, <span class="keyword">sizeof</span> h1);</span><br><span class="line">    <span class="built_in">memset</span>(h2, <span class="number">-1</span>, <span class="keyword">sizeof</span> h2);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(h1, a, b, c), <span class="built_in">add</span>(h1, b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs_lca</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">lca</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span>(p &lt;= n) cout &lt;&lt; d[a] + d[b] - d[p] * <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> da = d[a] - d[A], db= d[b] - d[B];</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">abs</span>(s[A] - s[B]);</span><br><span class="line">            <span class="type">int</span> dm = <span class="built_in">min</span>(l, stot[A] - l);</span><br><span class="line">            cout &lt;&lt; da + dm + db &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><h4 id="龟速乘"><a href="#龟速乘" class="headerlink" title="龟速乘"></a>龟速乘</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            res = (res + a) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>, a = (a * <span class="number">2</span>) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a ^ b mod p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="矩阵快速幂加速递推"><a href="#矩阵快速幂加速递推" class="headerlink" title="矩阵快速幂加速递推"></a>矩阵快速幂加速递推</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> m[N][N]; </span><br><span class="line">    <span class="built_in">matrix</span>() &#123; <span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="keyword">sizeof</span> m); &#125;</span><br><span class="line">&#125;;</span><br><span class="line">matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;a, <span class="type">const</span> matrix &amp;b)&#123;</span><br><span class="line">    matrix c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">                c.m[i][j] = ( c.m[i][j] + a.m[i][k] * b.m[k][j]) % mod;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">pow_matrix</span><span class="params">(matrix a, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    matrix ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) ans.m[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h4><h5 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h5><p>求$a^{-1}$%p</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">qpow</span>(a,p<span class="number">-2</span>,p);</span><br></pre></td></tr></table></figure><h5 id="扩展欧几里得求逆元"><a href="#扩展欧几里得求逆元" class="headerlink" title="扩展欧几里得求逆元"></a>扩展欧几里得求逆元</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">INV</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> P)</span></span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> a,b;</span><br><span class="line">            <span class="built_in">exgcd</span>(x,P,a,b);</span><br><span class="line">            <span class="keyword">return</span> (a%P+P)%P;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> &amp;x,<span class="type">long</span> <span class="type">long</span> &amp;y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">                x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">            y-=a/b*x;</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回1~x中与x互质的数的个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>) res=res/x*(x<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N],cnt,<span class="type">int</span> euler[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    euler[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            euler[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            <span class="type">int</span> t=primes[j]*i;</span><br><span class="line">            st[t]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                euler[t]=euler[i]*primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            euler[t]=euler[i]*(primes[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h4><h5 id="试除法判断质数"><a href="#试除法判断质数" class="headerlink" title="试除法判断质数"></a>试除法判断质数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">divide</span>(<span class="type">int</span> x)&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; divs;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>) cnt++,x/=i; </span><br><span class="line">            divs.<span class="built_in">push_back</span>(&#123;i,cnt&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>) divs.<span class="built_in">push_back</span>(&#123;x,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> divs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h5><p>1.<strong>朴素做法O(nlogn)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j+=i)&#123;</span><br><span class="line">            st[j]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>诶氏筛法 O(nloglogn)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j+=i) st[j]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>线性筛O(n)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h4><h6 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; divs;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/i;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            divs.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(n/i!=i) divs.<span class="built_in">push_back</span>(n/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(divs.<span class="built_in">begin</span>(),divs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> divs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="gcd-lcm"><a href="#gcd-lcm" class="headerlink" title="gcd/lcm"></a>gcd/lcm</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcd:</span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">__gcd(a,b);</span><br><span class="line">lcm:</span><br><span class="line">a*b/__gcd(a,b);</span><br></pre></td></tr></table></figure><h4 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h4><p><strong>定理引入：</strong></p><p>裴蜀定理：设a, b是不全为零的整数，则存在整数x, y使得a<em>x+b</em>y=gcd(a,b)      ——OIWIKI</p><ul><li><p><strong>扩展欧几里得算法</strong></p><p>求$a<em>x+b</em>y=gcd(a,b)$的一组可行解</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回gcd(a,b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a,b,x,y;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">exgcd</span>(a,b,x,y);<span class="comment">//x,y即为方程的一组解</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>求解更一般的方程$ax+by=c$</strong></p><p>设$d=gcd(a,b)$，当且仅当$d|c$时有解   $c\bmod gcd(a,mb)$</p><p>通解=特解+齐次解</p><p><strong>特解：</strong></p><p>$x_1=x_0<em>c/d,y_1=y_0</em>c/d$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>;<span class="comment">//函数同上</span></span><br><span class="line"><span class="type">int</span> a,b,x0,y0,x,y;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(a,b,x0,y0);</span><br><span class="line"></span><br><span class="line"><span class="comment">//x0和y0为ax+by=gcd(a,b)的一组解</span></span><br><span class="line"><span class="comment">//x1和y1为ax+by=c的一组特解</span></span><br><span class="line">通解：</span><br><span class="line">x=x1+k*b/d,y=y1-k*a/d,k∈z</span><br></pre></td></tr></table></figure><p><strong>齐次解：</strong></p><p>即$ax+by=0$的解</p><p><strong>通解：</strong></p><p>通解=特解+齐次解</p><p>$x=x_1+k<em>b/d,y=y_1-k</em>a/d,k∈z$</p><p>令$t=b/d(x=x’+kt)$,则对于x的最小非负整数解为$(x’\bmod t+t)\bmod t$</p></li><li><p><strong>求解一次线性同余方程$ax≡b(\bmod m)$</strong></p><p>等价于求：$ax+my=b$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>;<span class="comment">//函数同上</span></span><br><span class="line"><span class="type">int</span> a,b,m,x,y;cin&gt;&gt;a&gt;&gt;b&gt;&gt;m;</span><br><span class="line"><span class="built_in">exgcd</span>(a,m,x,y);</span><br><span class="line">x*a/b即为一组合法解</span><br></pre></td></tr></table></figure></li></ul><h4 id="同余方程组"><a href="#同余方程组" class="headerlink" title="同余方程组"></a>同余方程组</h4><h5 id="中国剩余定理-孙子定理"><a href="#中国剩余定理-孙子定理" class="headerlink" title="中国剩余定理(孙子定理)"></a>中国剩余定理(孙子定理)</h5><p>求解同余方程组形如：</p><p>$x \equiv a_1 (\mod m_1)$</p><p>$x \equiv a_2 (\mod m_2)$</p><p>$\dots$</p><p>$x \equiv a_k (\mod m_k)$</p><p>条件：$m_1,m_2,\dots,m_k$两两互质.</p><p>令$M=\prod_{i=1}^k m_i$，$M_i=\frac M{m_i}$</p><p>$t_i$是$M_i$关于$m_i$的逆元，即$M_i\times t_i\equiv 1(\mod m_i)$</p><p>$x=\sum_{i=1}^n a_iM_it_i + Mi * k, k∈Z$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 曹冲养猪</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/1300/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> M = <span class="number">1</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">A</span><span class="params">(n)</span>, <span class="title">B</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; A[i] &gt;&gt; B[i];</span><br><span class="line">M *= A[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> Mi = M / A[i];</span><br><span class="line"><span class="type">int</span> ti, x;</span><br><span class="line"><span class="built_in">exgcd</span>(Mi, A[i], ti, x);</span><br><span class="line">res += B[i] * Mi * ti;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (res % M + M) % M &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h5><p>中国剩余定理的扩展版，不需要满足$m_1,m_2,\dots,m_k$两两互质。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 表达整数的奇怪方式</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/206/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的等式为x ≡ mi(mod ai)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a1, m1;</span><br><span class="line">cin &gt;&gt; a1 &gt;&gt; m1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> a2, m2;</span><br><span class="line">cin &gt;&gt; a2 &gt;&gt; m2;</span><br><span class="line"><span class="type">int</span> k1, k2;</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">exgcd</span>(a1, a2, k1, k2);</span><br><span class="line"><span class="keyword">if</span>((m2 - m1) % d) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">k1 *= (m2 - m1) / d;</span><br><span class="line"><span class="type">int</span> t = a2 / d;</span><br><span class="line">k1 = (k1 % t + t) % t;</span><br><span class="line">m1 = m1 + a1 * k1;</span><br><span class="line">a1 = <span class="built_in">abs</span>(a1 * a2 / d);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (m1 % a1 + a1) % a1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h4><p>条件：$a,p$互质</p><p>求$a^x \equiv b(\mod p)$</p><p>时间复杂度：<strong>O($\sqrt p$)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: BSGS</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/3127/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="comment">//a ^ x ≡ b(mod p)</span></span><br><span class="line"><span class="type">int</span> a, p, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsgs</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> % p == b % p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = b % p; i &lt; k; i++) &#123;</span><br><span class="line">mp[j] = i;</span><br><span class="line">j = j * a % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ak = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) ak = ak * a % p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = ak; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(j)) <span class="keyword">return</span> i * k - mp[j];</span><br><span class="line">j = j * ak % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="built_in">bsgs</span>(a, b, p);</span><br><span class="line"><span class="keyword">if</span>(res == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; p &gt;&gt; b, a || p || b) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展BSGS"><a href="#扩展BSGS" class="headerlink" title="扩展BSGS"></a>扩展BSGS</h4><p>求$a^x \equiv b(\mod p)$</p><p>不需要满足$a,p$互质的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 扩展BSGS</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/3128/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="comment">//a ^ x ≡ b (mod p)</span></span><br><span class="line"><span class="type">int</span> a, p, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsgs</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> % p == b % p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = b % p; i &lt; k; i++) &#123;</span><br><span class="line">mp[j] = i;</span><br><span class="line">j = j * a % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ak = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) ak = ak * a % p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = ak; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(j)) <span class="keyword">return</span> i * k - mp[j];</span><br><span class="line">j = j * ak % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exbsgs</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">b = (b % p + p) % p;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> % p == b % p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">exgcd</span>(a, p, x, y);</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(b % d) <span class="keyword">return</span> -INF;</span><br><span class="line"><span class="built_in">exgcd</span>(a / d, p / d, x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">exbsgs</span>(a, b / d * x % (p / d), p / d) + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">bsgs</span>(a, b, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="built_in">exbsgs</span>(a, b, p);</span><br><span class="line"><span class="keyword">if</span>(res &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; p &gt;&gt; b, a || p || b) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pollard-rho"><a href="#Pollard-rho" class="headerlink" title="Pollard rho"></a>Pollard rho</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function">i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;__int128&gt;(a) * b % m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">i64 <span class="title">power</span><span class="params">(i64 a, i64 b, i64 m)</span> </span>&#123;</span><br><span class="line">    i64 res = <span class="number">1</span> % m;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="built_in">mul</span>(a, a, m))</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="built_in">mul</span>(res, a, m);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(i64 n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> A[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="type">int</span> s = __builtin_ctzll(n - <span class="number">1</span>);</span><br><span class="line">    i64 d = (n - <span class="number">1</span>) &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        i64 x = <span class="built_in">power</span>(a, d, n);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span> || x == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            x = <span class="built_in">mul</span>(x, x, n);</span><br><span class="line">            <span class="keyword">if</span> (x == n - <span class="number">1</span>) &#123;</span><br><span class="line">                ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">factorize</span><span class="params">(i64 n)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;i64&gt; p;</span><br><span class="line">    std::function&lt;<span class="type">void</span>(i64)&gt; f = [&amp;](i64 n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (; n % i == <span class="number">0</span>; n /= i)</span><br><span class="line">                    p.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">                p.<span class="built_in">push_back</span>(n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprime</span>(n)) &#123;</span><br><span class="line">            p.<span class="built_in">push_back</span>(n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> g = [&amp;](i64 x) &#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">mul</span>(x, x, n) + <span class="number">1</span>) % n;</span><br><span class="line">        &#125;;</span><br><span class="line">        i64 x0 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            i64 x = x0;</span><br><span class="line">            i64 y = x0;</span><br><span class="line">            i64 d = <span class="number">1</span>;</span><br><span class="line">            i64 power = <span class="number">1</span>, lam = <span class="number">0</span>;</span><br><span class="line">            i64 v = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (d == <span class="number">1</span>) &#123;</span><br><span class="line">                y = <span class="built_in">g</span>(y);</span><br><span class="line">                ++lam;</span><br><span class="line">                v = <span class="built_in">mul</span>(v, std::<span class="built_in">abs</span>(x - y), n);</span><br><span class="line">                <span class="keyword">if</span> (lam % <span class="number">127</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    d = std::<span class="built_in">gcd</span>(v, n);</span><br><span class="line">                    v = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (power == lam) &#123;</span><br><span class="line">                    x = y;</span><br><span class="line">                    power *= <span class="number">2</span>;</span><br><span class="line">                    lam = <span class="number">0</span>;</span><br><span class="line">                    d = std::<span class="built_in">gcd</span>(v, n);</span><br><span class="line">                    v = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (d != n) &#123;</span><br><span class="line">                <span class="built_in">f</span>(d);</span><br><span class="line">                <span class="built_in">f</span>(n / d);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++x0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">f</span>(n);</span><br><span class="line">    std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数论函数"><a href="#数论函数" class="headerlink" title="数论函数"></a>数论函数</h4><h5 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> mobius[N];</span><br><span class="line"><span class="comment">// 线性筛法，求莫比乌斯函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    mobius[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            mobius[i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            <span class="type">int</span> t=primes[j]*i;</span><br><span class="line">            st[t]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                mobius[t]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mobius[t]=mobius[i]*<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><h4 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h4><p><strong>模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">lb</span>&#123;</span><br><span class="line">ll d[<span class="number">64</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">62</span>;i++)<span class="keyword">if</span>(d[i])<span class="built_in">printf</span>(<span class="string">&quot;%d:%lld\n&quot;</span>,i,d[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">lb</span>()&#123;<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));&#125;</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span> +=(ll x)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(x&amp;(<span class="number">1ll</span>&lt;&lt;i)))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(d[i])x^=d[i];</span><br><span class="line"><span class="keyword">else</span>&#123;d[i]=x;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll&amp; <span class="keyword">operator</span> [](<span class="type">int</span> x)&#123;</span><br><span class="line"><span class="keyword">return</span> d[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span> +=(lb &amp;x)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(x[i])*<span class="keyword">this</span>+=x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> lb <span class="keyword">operator</span> +(lb &amp;x,lb &amp;y)&#123;</span><br><span class="line">lb z=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(y[i])z+=y[i];</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">()</span></span>&#123;<span class="comment">//calculate maximum possible</span></span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>((res^d[i])&gt;res)res^=d[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>贪心法求线性基</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag0 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> lin[<span class="number">60</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">51</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!lin[i]) &#123;</span><br><span class="line">                lin[i] = x;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> x ^= lin[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag0 = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">51</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!lin[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> x ^= lin[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">ins</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">51</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, ans ^ lin[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>高斯消元求线性基</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gauss</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> &amp;n)</span></span>&#123;              <span class="comment">//高斯消元求线性基</span></span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">1</span>;             <span class="comment">//k标记当前第几行</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> j = (<span class="type">long</span> <span class="type">long</span>)<span class="number">1</span>&lt;&lt;<span class="number">62</span>;      <span class="comment">//注意不是63，因为a[i]&amp;(1&lt;&lt;0)时为第1位</span></span><br><span class="line">    <span class="keyword">for</span>(;j;j&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=k;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;j)  <span class="keyword">break</span>;      <span class="comment">//找到第j位是1的a[]</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) <span class="keyword">continue</span>;      <span class="comment">//没有第j位是1的a[]</span></span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[k]);             <span class="comment">//把这一行换到上面</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)            <span class="comment">//生成简化阶梯矩阵</span></span><br><span class="line">            <span class="keyword">if</span>(i != k &amp;&amp; a[i]&amp;j)     a[i]^=a[k];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    k--;</span><br><span class="line">    n = k;                           <span class="comment">//线性基中元素的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求从n个整数序列选取一些（至少一个）数（每个数最多选一次）进行异或运算的所有结果中第k小的结果。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">bool</span> zero;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gauss</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> &amp;n)</span></span>&#123;              <span class="comment">//高斯消元求线性基</span></span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">1</span>;             <span class="comment">//k标记当前第几行</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> j = (<span class="type">long</span> <span class="type">long</span>)<span class="number">1</span>&lt;&lt;<span class="number">62</span>;      <span class="comment">//注意不是63</span></span><br><span class="line">    <span class="keyword">for</span>(;j;j&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=k;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;j)  <span class="keyword">break</span>;      <span class="comment">//找到第j位是1的a[]</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) <span class="keyword">continue</span>;      <span class="comment">//没有第j位是1的a[]</span></span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[k]);             <span class="comment">//把这一行换到上面</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)            <span class="comment">//生成简化阶梯矩阵</span></span><br><span class="line">            <span class="keyword">if</span>(i != k &amp;&amp; a[i]&amp;j)     a[i]^=a[k];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">if</span>(k!=n)  zero = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span>      zero = <span class="literal">false</span>;</span><br><span class="line">    n = k;                           <span class="comment">//线性基中元素的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n,<span class="type">long</span> <span class="type">long</span> k)</span></span>&#123;          <span class="comment">//第k小异或和</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(zero) k--;</span><br><span class="line">    <span class="keyword">if</span>(!k)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans^=a[i];</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;t&lt;&lt;<span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">    <span class="type">int</span> n,q;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">Gauss</span>(a,n);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">Query</span>(a,n,k)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">        <span class="built_in">solve</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h3><h4 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h4><h5 id="杨辉三角预处理所有组合数"><a href="#杨辉三角预处理所有组合数" class="headerlink" title="杨辉三角预处理所有组合数"></a>杨辉三角预处理所有组合数</h5><p>c[a][b]表示$C_{a}^{b}$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求单个组合数"><a href="#求单个组合数" class="headerlink" title="求单个组合数"></a>求单个组合数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fact,infact;</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">fact</span>(n+<span class="number">1</span>),<span class="built_in">infact</span>(n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            fact[i]=(<span class="type">long</span> <span class="type">long</span>)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">            infact[i]=(<span class="type">long</span> <span class="type">long</span>)infact[i<span class="number">-1</span>]*<span class="built_in">qpow</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span>)fact[a]*infact[a-b]%mod*infact[b]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>%p;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">            a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Lucas定理求组合数"><a href="#Lucas定理求组合数" class="headerlink" title="Lucas定理求组合数"></a>Lucas定理求组合数</h5><p>适用于p不固定的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> up=<span class="number">1</span>,down=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=a;i&lt;=b;i++,j--)&#123;</span><br><span class="line">        up=up*j%p;</span><br><span class="line">        down=down*i%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> up*<span class="built_in">qmi</span>(down,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;p&amp;&amp;b&lt;p) <span class="keyword">return</span> <span class="built_in">C</span>(a,b,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(a%p,b%p,p)*<span class="built_in">lucas</span>(a/p,b/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line">求<span class="built_in">C</span>(a,b):<span class="built_in">lucas</span>(a,b,p)</span><br></pre></td></tr></table></figure><h5 id="求组合数（高精度）"><a href="#求组合数（高精度）" class="headerlink" title="求组合数（高精度）"></a>求组合数（高精度）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">res=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a-b+<span class="number">1</span>,a+<span class="number">1</span>):</span><br><span class="line">    res*=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,b+<span class="number">1</span>):</span><br><span class="line">    res//=j</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//==0每次漏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对p的各个&lt;=a的次数算整除下取整倍数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=n/p;</span><br><span class="line">        n/=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高精度乘</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// while(C.size()&gt;1 &amp;&amp; C.back()==0) C.pop_back();//考虑b==0时才有pop多余的0 b!=0不需要这行</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">get_primes</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = primes[i];</span><br><span class="line">        sum[i] = <span class="built_in">get</span>(a,p)-<span class="built_in">get</span>(a-b,p)-<span class="built_in">get</span>(b,p);<span class="comment">//是a-b不是b-a</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum[i]; j ++ )<span class="comment">//primes[i]的次数</span></span><br><span class="line">            res = <span class="built_in">mul</span>(res, primes[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h3><h4 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h4><p><strong>例题：n堆石子，每次操作玩家从任意一堆拿去石子，每次拿取的石子数列必须包含于集合s，最后无法操作的人失败。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> s[N],f[N];</span><br><span class="line"><span class="comment">//s数组表示每次可以拿的数量，f数组表示每个状态SG的值。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=s[i]) S.<span class="built_in">insert</span>(<span class="built_in">sg</span>(x-s[i])); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i))&#123;</span><br><span class="line">            <span class="keyword">return</span> f[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;s[i];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        res^=<span class="built_in">sg</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><h4 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: 多项式乘法</span></span><br><span class="line"><span class="comment">// Contest: AcWing</span></span><br><span class="line"><span class="comment">// URL: https://www.acwing.com/problem/content/3125/</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; t) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + t.x, y + t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>- (<span class="type">const</span> Complex&amp; t) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>* (<span class="type">const</span> Complex&amp; t) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x * t.x - y * t.y, x * t.y + y * t.x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N], b[N], c[N];</span><br><span class="line"><span class="type">int</span> rev[N], bit, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(Complex a[], <span class="type">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> w1 = <span class="built_in">Complex</span>(&#123;<span class="built_in">cos</span>(PI / mid), inv * <span class="built_in">sin</span>(PI / mid)&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i += mid * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> wk = <span class="built_in">Complex</span>(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; mid; j ++, wk = wk * w1)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> x = a[i + j], y = wk * a[i + j + mid];</span><br><span class="line">                a[i + j] = x + y, a[i + j + mid] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) cin &gt;&gt; a[i].x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) cin &gt;&gt; b[i].x;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; n + m + <span class="number">1</span>) bit++;</span><br><span class="line">tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i++)</span><br><span class="line">rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i++) c[i] = a[i] * b[i];</span><br><span class="line"><span class="built_in">fft</span>(c, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)(c[i].x / tot + <span class="number">0.5</span>) &lt;&lt; <span class="string">&quot; \n&quot;</span> [i == n + m];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (multi) cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h3><ul><li><strong>版本1</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[N],t[N];<span class="comment">//s为主串，t为模式串</span></span><br><span class="line"><span class="type">int</span> ne[N];<span class="comment">//ne[]对应t[]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CalcKMPNext</span><span class="params">(<span class="type">char</span> t[],<span class="type">int</span> ne[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">strlen</span>(t+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>||t[j]==t[k])&#123;</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">            ne[j]=k;</span><br><span class="line">        &#125;<span class="keyword">else</span> k=ne[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMPIndex</span><span class="params">(<span class="type">char</span> s[],<span class="type">char</span> t[])</span></span>&#123;<span class="comment">//若匹配成功，返回第一个匹配的位置，若匹配不成功，返回0</span></span><br><span class="line">    <span class="type">int</span> ns=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> nt=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=ns&amp;&amp;j&lt;=nt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||s[i]==t[j]) i++,j++;</span><br><span class="line">        <span class="keyword">else</span> j=ne[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;nt) <span class="keyword">return</span> i-nt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：s和t的存储从1开始</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>版本2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ne[N];<span class="comment">//前后缀相等且长度最长</span></span><br><span class="line"><span class="type">char</span> p[N],s[M];<span class="comment">//p是主串，s是模式串</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="comment">//求ne的过程</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>])&#123;</span><br><span class="line">        j=ne[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">    ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//kmp的匹配过程，将所有模式串在主串出现位置的起始下标保存在res中</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>])&#123;</span><br><span class="line">        j=ne[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">    <span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(i-n);</span><br><span class="line">        j=ne[j];<span class="comment">//为了观察其后续是否还能跟S数组后面的数配对成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串哈希（双模正反向哈希）"><a href="#字符串哈希（双模正反向哈希）" class="headerlink" title="字符串哈希（双模正反向哈希）"></a>字符串哈希（双模正反向哈希）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; <span class="title">P</span><span class="params">(<span class="number">131</span>, <span class="number">13331</span>)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod1 = <span class="number">1e9</span> + <span class="number">7</span>, mod2 = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line">PII <span class="keyword">operator</span>+(<span class="type">const</span> PII &amp;a, <span class="type">const</span> PII &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;(a.first + b.first) % mod1, (a.second + b.second) % mod2&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>-(<span class="type">const</span> PII &amp;a, <span class="type">const</span> PII &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;(a.first - b.first + mod1) % mod1, (a.second - b.second + mod2) % mod2&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>*(<span class="type">const</span> PII &amp;a, <span class="type">const</span> PII &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.first * b.first % mod1, a.second * b.second % mod2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">strHash</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt; hz,hf,pz,pf;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strHash</span>(<span class="type">int</span> n,string &amp;str): <span class="built_in">hz</span>(n+<span class="number">2</span>),<span class="built_in">pz</span>(n+<span class="number">2</span>),<span class="built_in">hf</span>(n+<span class="number">2</span>),<span class="built_in">pf</span>(n+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        pz[<span class="number">0</span>]=&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hz[i]=hz[i<span class="number">-1</span>]*P+(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;)&#123;str[i], str[i]&#125;;</span><br><span class="line">            pz[i]=pz[i<span class="number">-1</span>]*P;</span><br><span class="line">        &#125;</span><br><span class="line">        pf[n+<span class="number">1</span>]=&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            hf[i]=hf[i+<span class="number">1</span>]*P+(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;)&#123;str[i], str[i]&#125;;</span><br><span class="line">            pf[i]=pf[i+<span class="number">1</span>]*P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findz</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hz[r]-hz[l<span class="number">-1</span>]*pz[r-l+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findf</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hf[l]-hf[r+<span class="number">1</span>]*pf[n-r+l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">strHash</span>&#123;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; vmod = &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">241</span>, <span class="number">271</span>, <span class="number">289</span>, <span class="number">297</span>, <span class="number">321</span>, <span class="number">349</span>, <span class="number">363</span>, <span class="number">403</span>, <span class="number">409</span>, <span class="number">411</span>, <span class="number">427</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">447</span>, <span class="number">453</span>, <span class="number">459</span>, <span class="number">483</span>, <span class="number">513</span>, <span class="number">531</span>, <span class="number">579</span>, <span class="number">607</span>, <span class="number">613</span>, <span class="number">637</span>, <span class="number">663</span>, <span class="number">711</span>, <span class="number">753</span>, <span class="number">787</span>, <span class="number">801</span>, <span class="number">829</span>, <span class="number">861</span>, <span class="number">871</span>, <span class="number">891</span>, <span class="number">901</span>, <span class="number">919</span>, <span class="number">931</span>, <span class="number">933</span>&#125;;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> P1=<span class="number">131</span>,mod1,P2=<span class="number">13331</span>,mod2;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; hz1,hf1,pz1,pf1,hz2,hf2,pz2,pf2;</span><br><span class="line">    <span class="built_in">strHash</span>(<span class="type">int</span> n,string &amp;str): <span class="built_in">hz1</span>(n+<span class="number">2</span>),<span class="built_in">pz1</span>(n+<span class="number">2</span>),<span class="built_in">hf1</span>(n+<span class="number">2</span>),<span class="built_in">pf1</span>(n+<span class="number">2</span>),<span class="built_in">hz2</span>(n+<span class="number">2</span>),<span class="built_in">pz2</span>(n+<span class="number">2</span>),<span class="built_in">hf2</span>(n+<span class="number">2</span>),<span class="built_in">pf2</span>(n+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">random_shuffle</span>(vmod.<span class="built_in">begin</span>(), vmod.<span class="built_in">end</span>());</span><br><span class="line">        mod1 = <span class="number">1e9</span> + vmod[<span class="number">0</span>], mod2 = <span class="number">1e9</span> + vmod[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        pz1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hz1[i]=(hz1[i<span class="number">-1</span>]*P1+str[i])%mod1;</span><br><span class="line">            pz1[i]=pz1[i<span class="number">-1</span>]*P1%mod1;</span><br><span class="line">        &#125;</span><br><span class="line">        pf1[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            hf1[i]=(hf1[i+<span class="number">1</span>]*P1+str[i])%mod1;</span><br><span class="line">            pf1[i]=pf1[i+<span class="number">1</span>]*P1%mod1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pz2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hz2[i]=(hz2[i<span class="number">-1</span>]*P2+str[i])%mod2;</span><br><span class="line">            pz2[i]=pz2[i<span class="number">-1</span>]*P2%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">        pf2[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            hf2[i]=(hf2[i+<span class="number">1</span>]*P2+str[i])%mod2;</span><br><span class="line">            pf2[i]=pf2[i+<span class="number">1</span>]*P2%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findz</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;((hz1[r]-hz1[l<span class="number">-1</span>]*pz1[r-l+<span class="number">1</span>])%mod1+mod1)%mod1,((hz2[r]-hz2[l<span class="number">-1</span>]*pz2[r-l+<span class="number">1</span>])%mod2+mod2)%mod2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findf</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;((hf1[l]-hf1[r+<span class="number">1</span>]*pf1[n-r+l])%mod1+mod1)%mod1,((hf2[l]-hf2[r+<span class="number">1</span>]*pf2[n-r+l])%mod2+mod2)%mod2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> mod1, mod2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">strHash</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isprime</span>(n)) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> P1=<span class="number">131</span>, P2=<span class="number">13331</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; hz1,hf1,pz1,pf1,hz2,hf2,pz2,pf2;</span><br><span class="line">    <span class="built_in">strHash</span>(<span class="type">int</span> n,string &amp;str): <span class="built_in">hz1</span>(n+<span class="number">2</span>),<span class="built_in">pz1</span>(n+<span class="number">2</span>),<span class="built_in">hf1</span>(n+<span class="number">2</span>),<span class="built_in">pf1</span>(n+<span class="number">2</span>),<span class="built_in">hz2</span>(n+<span class="number">2</span>),<span class="built_in">pz2</span>(n+<span class="number">2</span>),<span class="built_in">hf2</span>(n+<span class="number">2</span>),<span class="built_in">pf2</span>(n+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!mod1) &#123;</span><br><span class="line">            mod1 = <span class="built_in">findPrime</span>(<span class="built_in">rng</span>() % <span class="number">900000000</span> + <span class="number">100000000</span>);</span><br><span class="line">            mod2 = <span class="built_in">findPrime</span>(mod1 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        pz1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hz1[i]=(hz1[i<span class="number">-1</span>]*P1+str[i])%mod1;</span><br><span class="line">            pz1[i]=pz1[i<span class="number">-1</span>]*P1%mod1;</span><br><span class="line">        &#125;</span><br><span class="line">        pf1[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            hf1[i]=(hf1[i+<span class="number">1</span>]*P1+str[i])%mod1;</span><br><span class="line">            pf1[i]=pf1[i+<span class="number">1</span>]*P1%mod1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pz2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hz2[i]=(hz2[i<span class="number">-1</span>]*P2+str[i])%mod2;</span><br><span class="line">            pz2[i]=pz2[i<span class="number">-1</span>]*P2%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">        pf2[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            hf2[i]=(hf2[i+<span class="number">1</span>]*P2+str[i])%mod2;</span><br><span class="line">            pf2[i]=pf2[i+<span class="number">1</span>]*P2%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findz</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;((hz1[r]-hz1[l<span class="number">-1</span>]*pz1[r-l+<span class="number">1</span>])%mod1+mod1)%mod1,((hz2[r]-hz2[l<span class="number">-1</span>]*pz2[r-l+<span class="number">1</span>])%mod2+mod2)%mod2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findf</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;((hf1[l]-hf1[r+<span class="number">1</span>]*pf1[n-r+l])%mod1+mod1)%mod1,((hf2[l]-hf2[r+<span class="number">1</span>]*pf2[n-r+l])%mod2+mod2)%mod2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><h4 id="字符串插入与询问"><a href="#字符串插入与询问" class="headerlink" title="字符串插入与询问"></a>字符串插入与询问</h4><ul><li>N指结点总数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：此处的N指的是输入字符串的字符数量总和</span></span><br><span class="line"><span class="comment">//如：所有输入的字符串总长度不超过1e5,N取1e5+10;</span></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> tr[N][<span class="number">26</span>],cnt[N],idx;</span><br><span class="line"><span class="comment">//往Trie树中插入str字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][u]) tr[p][u]=++idx;</span><br><span class="line">        p=tr[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//询问str字符串个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p=tr[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="comment">//往Trie树中插入str字符串</span></span><br><span class="line"><span class="built_in">insert</span>(str);</span><br><span class="line"><span class="comment">//询问str字符串个数</span></span><br><span class="line"><span class="built_in">query</span>(str);</span><br></pre></td></tr></table></figure><h4 id="最大异或对（存储二进制）"><a href="#最大异或对（存储二进制）" class="headerlink" title="最大异或对（存储二进制）"></a>最大异或对（存储二进制）</h4><p>如：</p><script type="math/tex; mode=display">1 \le N \le 10^5</script><script type="math/tex; mode=display">0 \le A_i<2^{31}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">N=<span class="number">1e5</span>+<span class="number">10</span>,M=N*<span class="number">31</span>;<span class="comment">//M为结点总数，最多可能为数的个数*每个数有31位</span></span><br><span class="line"><span class="type">int</span> a[N],tr[M][<span class="number">2</span>],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> &amp;s=tr[p][x&gt;&gt;i&amp;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(!s) s=++idx;</span><br><span class="line">        p=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> s=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tr[p][!s])&#123;</span><br><span class="line">            res+=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            p=tr[p][!s];</span><br><span class="line">        &#125;<span class="keyword">else</span> p=tr[p][s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">insert</span>(a[i]);<span class="comment">//插入数</span></span><br><span class="line"><span class="built_in">seach</span>(a[i]);<span class="comment">//查找所有数中与a[i]异或的结果最大的数</span></span><br></pre></td></tr></table></figure><h3 id="ac自动机"><a href="#ac自动机" class="headerlink" title="ac自动机"></a>ac自动机</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>,S=<span class="number">55</span>,M=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="comment">//N表示匹配串单词数量，S表示匹配串单词最大长度，M表示原串长度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tr[N*S][<span class="number">26</span>],cnt[N*S],idx;</span><br><span class="line"><span class="type">char</span> str[M];</span><br><span class="line"><span class="type">int</span> ne[N*S];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][t]) tr[p][t]=++idx;</span><br><span class="line">        p=tr[p][t];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(tr[<span class="number">0</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> p=tr[t][i];</span><br><span class="line">            <span class="keyword">if</span>(!p) tr[t][i]=tr[ne[t]][i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ne[p]=tr[ne[t]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="keyword">sizeof</span> tr);</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    <span class="built_in">memset</span>(ne,<span class="number">0</span>,<span class="keyword">sizeof</span> ne);</span><br><span class="line">    idx=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        <span class="built_in">insert</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        j=tr[j][t];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> p=j;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            res+=cnt[p];</span><br><span class="line">            cnt[p]=<span class="number">0</span>;</span><br><span class="line">            p=ne[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h3><p><strong>时间复杂度：<script type="math/tex">O(n)</script></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> b[N];</span><br><span class="line"><span class="type">int</span> p[N];<span class="comment">//p[i]表示&#123;以i为中心的最长回文子串的长度+1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    b[k++]=<span class="string">&#x27;$&#x27;</span>,b[k++]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) b[k++]=a[i],b[k++]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    b[k++]=<span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">    n=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> mr=<span class="number">0</span>,mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;mr) p[i]=<span class="built_in">min</span>(p[mid*<span class="number">2</span>-i],mr-i);</span><br><span class="line">        <span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(b[i-p[i]]==b[i+p[i]]) p[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+p[i]&gt;mr)&#123;</span><br><span class="line">            mr=i+p[i];</span><br><span class="line">            mid=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得字符串s的最小表示法</span></span><br><span class="line"><span class="function">string <span class="title">get_min</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    s+=s;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;n)&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;n&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">        <span class="keyword">if</span>(k==n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i+k]&gt;s[j+k]) i+=k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> j+=k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==j) j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">min</span>(i,j);</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">substr</span>(k,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h2><h3 id="计算几何基础"><a href="#计算几何基础" class="headerlink" title="计算几何基础"></a>计算几何基础</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*----------计算几何模板----------*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>,pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>),INF = <span class="number">1e30</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;                     <span class="comment">//判断x的大小</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">//x==0，返回0</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;              <span class="comment">//x&lt;0返回-1，x&gt;0返回1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dcmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span>&#123;          <span class="comment">//比较两个浮点数 </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//x==y，返回0</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x&lt;y ?<span class="number">-1</span>:<span class="number">1</span>;             <span class="comment">//x&lt;y返回-1，x&gt;y返回1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> x,<span class="type">double</span> y):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>+(Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(x+B.x,y+B.y);&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(x-B.x,y-B.y);&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>*(<span class="type">double</span> k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(x*k,y*k);&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>/(<span class="type">double</span> k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(x/k,y/k);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(x-B.x)==<span class="number">0</span>&amp;&amp;<span class="built_in">sgn</span>(y-B.y)==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Point B)&#123;                  <span class="comment">//用于sort()排序，先按x排序，再按y排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x-B.x)&lt;<span class="number">0</span> || (<span class="built_in">sgn</span>(x-B.x)==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y-B.y)&lt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;<span class="keyword">return</span> A.x*B.x+A.y*B.y;&#125;<span class="comment">//向量点积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;<span class="keyword">return</span> A.x*B.y-A.y*B.x;&#125;<span class="comment">//向量叉积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Distance</span><span class="params">(Point A, Point B)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));&#125;<span class="comment">//两点间距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Len</span><span class="params">(Vector A)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Dot</span>(A,A));&#125;<span class="comment">//向量长度</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Len2</span><span class="params">(Vector A)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Dot</span>(A,A);&#125;<span class="comment">//向量长度的平方</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">Dot</span>(A,B)/<span class="built_in">Len</span>(A)/<span class="built_in">Len</span>(B));&#125;<span class="comment">//向量A与B的夹角</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Cross</span>(B-A,C-A);&#125;<span class="comment">//以A,B,C三点构成的平行四边形的面积</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A, <span class="type">double</span> rad)</span></span>&#123;<span class="comment">//将向量A逆时针旋转角度rad</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad), A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Vector</span>(-A.y/<span class="built_in">Len</span>(A), A.x/<span class="built_in">Len</span>(A));&#125;<span class="comment">//求向量A的单位法向量（逆时针）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Parallel</span><span class="params">(Vector A, Vector B)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(A,B)) == <span class="number">0</span>;&#125;<span class="comment">//判断两个向量是否平行或重合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>&#123;</span><br><span class="line">    Point p1,p2;                  <span class="comment">//（1）线上的两个点</span></span><br><span class="line">    <span class="built_in">Line</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Line</span>(Point p1,Point p2):<span class="built_in">p1</span>(p1),<span class="built_in">p2</span>(p2)&#123;&#125;</span><br><span class="line">    <span class="built_in">Line</span>(Point p,<span class="type">double</span> angle)&#123;    <span class="comment">//（4）根据一个点和倾斜角 angle 确定直线,0&lt;=angle&lt;pi</span></span><br><span class="line">        p1 = p;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sgn</span>(angle - pi/<span class="number">2</span>) == <span class="number">0</span>)&#123;p2 = (p1 + <span class="built_in">Point</span>(<span class="number">0</span>,<span class="number">1</span>));&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;p2 = (p1 + <span class="built_in">Point</span>(<span class="number">1</span>,<span class="built_in">tan</span>(angle)));&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">double</span> a,<span class="type">double</span> b,<span class="type">double</span> c)&#123;     <span class="comment">//（2）ax+by+c=0</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sgn</span>(a) == <span class="number">0</span>)&#123;</span><br><span class="line">            p1 = <span class="built_in">Point</span>(<span class="number">0</span>,-c/b);</span><br><span class="line">            p2 = <span class="built_in">Point</span>(<span class="number">1</span>,-c/b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">sgn</span>(b) == <span class="number">0</span>)&#123;</span><br><span class="line">            p1 = <span class="built_in">Point</span>(-c/a,<span class="number">0</span>);</span><br><span class="line">            p2 = <span class="built_in">Point</span>(-c/a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p1 = <span class="built_in">Point</span>(<span class="number">0</span>,-c/b);</span><br><span class="line">            p2 = <span class="built_in">Point</span>(<span class="number">1</span>,(-c-a)/b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Line Segment;</span><br><span class="line"><span class="comment">//点和直线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point_line_relation</span><span class="params">(Point p, Line v)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(p-v.p1,v.p2-v.p1));</span><br><span class="line">    <span class="keyword">if</span>(c &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;              <span class="comment">//1：p在v的左边</span></span><br><span class="line">    <span class="keyword">if</span>(c &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;              <span class="comment">//2：p在v的右边</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                       <span class="comment">//0：p在v上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点和线段：0 点不在线段v上；1 点在线段v上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Point_on_seg</span><span class="params">(Point p, Line v)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(p-v.p1, v.p2-v.p1)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(p-v.p1,p-v.p2)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求点到直线的距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dis_point_line</span><span class="params">(Point p,Line v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">Cross</span>(p-v.p1,v.p2-v.p1))/<span class="built_in">Distance</span>(v.p1,v.p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">Point_line_proj</span><span class="params">(Point p, Line v)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> k = <span class="built_in">Dot</span>(v.p2-v.p1,p-v.p1)/<span class="built_in">Len2</span>(v.p2-v.p1);</span><br><span class="line">    <span class="keyword">return</span> v.p1+(v.p2-v.p1)*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点关于直线的对称点</span></span><br><span class="line"><span class="function">Point <span class="title">Point_line_symmetry</span><span class="params">(Point p, Line v)</span></span>&#123;</span><br><span class="line">    Point q = <span class="built_in">Point_line_proj</span>(p,v);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(<span class="number">2</span>*q.x-p.x,<span class="number">2</span>*q.y-p.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dis_point_seg</span><span class="params">(Point p, Segment v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Dot</span>(p- v.p1,v.p2-v.p1))&lt;<span class="number">0</span> || <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(p- v.p2,v.p1-v.p2))&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">Distance</span>(p,v.p1),<span class="built_in">Distance</span>(p,v.p2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Dis_point_line</span>(p,v);           <span class="comment">//点的投影在线段上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两条直线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Line_relation</span><span class="params">(Line v1, Line v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Cross</span>(v1.p2-v1.p1,v2.p2-v2.p1)) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Point_line_relation</span>(v1.p1,v2)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//1 重合</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;                                  <span class="comment">//0 平行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;                                           <span class="comment">//2 相交</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两条直线的交点</span></span><br><span class="line"><span class="function">Point <span class="title">Cross_point</span><span class="params">(Point a,Point b,Point c,Point d)</span></span>&#123;  <span class="comment">//Line1:ab,  Line2:cd</span></span><br><span class="line">    <span class="type">double</span> s1 = <span class="built_in">Cross</span>(b-a,c-a);</span><br><span class="line">    <span class="type">double</span> s2 = <span class="built_in">Cross</span>(b-a,d-a);                    <span class="comment">//叉积有正负</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(c.x*s2-d.x*s1,c.y*s2-d.y*s1)/(s2-s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个线段是否相交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Cross_segment</span><span class="params">(Point a,Point b,Point c,Point d)</span></span>&#123;    <span class="comment">//Line1:ab,  Line2:cd</span></span><br><span class="line">    <span class="type">double</span> c1 = <span class="built_in">Cross</span>(b-a,c-a),c2=<span class="built_in">Cross</span>(b-a,d-a);</span><br><span class="line">    <span class="type">double</span> d1 = <span class="built_in">Cross</span>(d-c,a-c),d2=<span class="built_in">Cross</span>(d-c,b-c);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(c1)*<span class="built_in">sgn</span>(c2) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(d1)*<span class="built_in">sgn</span>(d2) &lt; <span class="number">0</span>;  <span class="comment">//1相交；0不相交</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点和多边形的关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point_in_polygon</span><span class="params">(Point pt,Point *p,<span class="type">int</span> n)</span></span>&#123;  <span class="comment">//点pt，多边形Point *p</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;                   <span class="comment">//3：点在多边形的顶点上</span></span><br><span class="line">        <span class="keyword">if</span>(p[i] == pt)  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;                   <span class="comment">//2：点在多边形的边上</span></span><br><span class="line">        Line v=<span class="built_in">Line</span>(p[i],p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Point_on_seg</span>(pt,v)) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j = (i+<span class="number">1</span>)% n;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(pt-p[j],p[i]-p[j]));</span><br><span class="line">        <span class="type">int</span> u = <span class="built_in">sgn</span>(p[i].y - pt.y);</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">sgn</span>(p[j].y - pt.y);</span><br><span class="line">        <span class="keyword">if</span>(c &gt; <span class="number">0</span> &amp;&amp; u &lt; <span class="number">0</span> &amp;&amp; v &gt;=<span class="number">0</span>) num++;</span><br><span class="line">        <span class="keyword">if</span>(c &lt; <span class="number">0</span> &amp;&amp; u &gt;=<span class="number">0</span> &amp;&amp; v &lt; <span class="number">0</span>) num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num != <span class="number">0</span>;                            <span class="comment">//1：点在内部; 0：点在外部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多边形的面积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Polygon_area</span><span class="params">(Point *p, <span class="type">int</span> n)</span></span>&#123;    <span class="comment">//Point *p表示多边形</span></span><br><span class="line">    <span class="type">double</span> area = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        area += <span class="built_in">Cross</span>(p[i],p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">    <span class="keyword">return</span> area/<span class="number">2</span>;                    <span class="comment">//面积有正负，返回时不能简单地取绝对值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">Polygon_center</span><span class="params">(Point *p, <span class="type">int</span> n)</span></span>&#123;        <span class="comment">//求多边形重心</span></span><br><span class="line">    <span class="function">Point <span class="title">ans</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Polygon_area</span>(p,n)==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        ans = ans+(p[i]+p[(i+<span class="number">1</span>)%n])*<span class="built_in">Cross</span>(p[i],p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">    <span class="keyword">return</span> ans/<span class="built_in">Polygon_area</span>(p,n)/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Convex_hull()求凸包。凸包顶点放在ch中，返回值是凸包的顶点数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Convex_hull</span><span class="params">(Point *p,<span class="type">int</span> n,Point *ch)</span></span>&#123;</span><br><span class="line">    n = <span class="built_in">unique</span>(p,p+n)-p;    <span class="comment">//去除重复点    </span></span><br><span class="line">    <span class="built_in">sort</span>(p,p+n);            <span class="comment">//对点排序：按x从小到大排序，如果x相同，按y排序    </span></span><br><span class="line">    <span class="type">int</span> v=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求下凸包。如果p[i]是右拐弯的，这个点不在凸包上，往回退</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(v&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(ch[v<span class="number">-1</span>]-ch[v<span class="number">-2</span>],p[i]-ch[v<span class="number">-1</span>]))&lt;=<span class="number">0</span>) <span class="comment">//把后面ch[v-1]改成ch[v-2]也行</span></span><br><span class="line">            v--;</span><br><span class="line">        ch[v++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=v;</span><br><span class="line">    <span class="comment">//求上凸包</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(v&gt;j &amp;&amp; <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(ch[v<span class="number">-1</span>]-ch[v<span class="number">-2</span>],p[i]-ch[v<span class="number">-1</span>]))&lt;=<span class="number">0</span>) <span class="comment">//把后面ch[v-1]改成ch[v-2]也行</span></span><br><span class="line">            v--;</span><br><span class="line">        ch[v++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) v--;</span><br><span class="line">    <span class="keyword">return</span> v;                      <span class="comment">//返回值v是凸包的顶点数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回p[left]~p[right]的平面最近点对距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Get_Closest_Pair</span><span class="params">(Point p[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(p+left,p+right+<span class="number">1</span>,[](Point A,Point B)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(A.x-B.x)&lt;<span class="number">0</span> || (<span class="built_in">sgn</span>(A.x-B.x)==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(A.y-B.y)&lt;<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="function">vector&lt;Point&gt; <span class="title">tmp_p</span><span class="params">(right-left+<span class="number">10</span>)</span></span>;</span><br><span class="line">    function&lt;<span class="type">double</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; Closest_Pair=[&amp;](<span class="type">int</span> left,<span class="type">int</span> right)&#123;</span><br><span class="line">        <span class="type">double</span> dis = INF;</span><br><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> dis;            <span class="comment">//只剩1个点</span></span><br><span class="line">        <span class="keyword">if</span>(left + <span class="number">1</span> == right) <span class="keyword">return</span> <span class="built_in">Distance</span>(p[left], p[right]);<span class="comment">//只剩2个点</span></span><br><span class="line">        <span class="type">int</span> mid = (left+right)/<span class="number">2</span>;                <span class="comment">//分治</span></span><br><span class="line">        <span class="type">double</span> d1 = <span class="built_in">Closest_Pair</span>(left,mid);      <span class="comment">//求s1内的最近点对</span></span><br><span class="line">        <span class="type">double</span> d2 = <span class="built_in">Closest_Pair</span>(mid+<span class="number">1</span>,right);   <span class="comment">//求s2内的最近点对</span></span><br><span class="line">        dis = <span class="built_in">min</span>(d1,d2);</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;=right;i++)             <span class="comment">//在s1和s2中间附近找可能的最小点对</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(p[mid].x - p[i].x) &lt;= dis)   <span class="comment">//按x坐标来找</span></span><br><span class="line">                tmp_p[k++] = p[i];</span><br><span class="line">        <span class="built_in">sort</span>(&amp;tmp_p[<span class="number">0</span>],&amp;tmp_p[k],[](Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(A.y-B.y)&lt;<span class="number">0</span>;&#125;);         <span class="comment">//按y坐标排序，用于剪枝。这里不能按x坐标排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp_p[j].y - tmp_p[i].y &gt;= dis)  <span class="keyword">break</span>;    <span class="comment">//剪枝</span></span><br><span class="line">                dis = <span class="built_in">min</span>(dis,<span class="built_in">Distance</span>(tmp_p[i],tmp_p[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dis;  <span class="comment">//返回最小距离</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Closest_Pair</span>(left,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HLine</span>&#123;</span><br><span class="line">Point p;      <span class="comment">//直线上一个点</span></span><br><span class="line">Vector v;     <span class="comment">//方向向量，它的左边是半平面</span></span><br><span class="line"><span class="type">double</span> ang;   <span class="comment">//极角，从x正半轴旋转到v的角度</span></span><br><span class="line"><span class="built_in">HLine</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">HLine</span>(Point p, Vector v):<span class="built_in">p</span>(p),<span class="built_in">v</span>(v)&#123;ang = <span class="built_in">atan2</span>(v.y, v.x);&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (HLine &amp;L)&#123;<span class="keyword">return</span> ang &lt; L.ang;&#125;     <span class="comment">//用于排序</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点p在线L左边，即点p在线L在外面：</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OnLeft</span><span class="params">(HLine L,Point p)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(L.v,p-L.p))&gt;<span class="number">0</span>;&#125; </span><br><span class="line"><span class="function">Point <span class="title">Cross_point</span><span class="params">(HLine a,HLine b)</span></span>&#123;    <span class="comment">//两直线交点</span></span><br><span class="line">    Vector u=a.p-b.p;</span><br><span class="line"><span class="type">double</span> t=<span class="built_in">Cross</span>(b.v,u)/<span class="built_in">Cross</span>(a.v,b.v);</span><br><span class="line"><span class="keyword">return</span> a.p+a.v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;Point&gt; <span class="title">HPI</span><span class="params">(vector&lt;HLine&gt; L)</span></span>&#123;     <span class="comment">//求半平面交，返回凸多边形</span></span><br><span class="line"><span class="type">int</span> n=L.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">sort</span>(L.<span class="built_in">begin</span>(),L.<span class="built_in">end</span>());           <span class="comment">//将所有半平面按照极角排序。</span></span><br><span class="line"><span class="type">int</span> first,last;                    <span class="comment">//指向双端队列的第一个和最后一个元素</span></span><br><span class="line"><span class="function">vector&lt;Point&gt; <span class="title">p</span><span class="params">(n)</span></span>;                <span class="comment">//两个相邻半平面的交点</span></span><br><span class="line"><span class="function">vector&lt;HLine&gt; <span class="title">q</span><span class="params">(n)</span></span>;                 <span class="comment">//双端队列</span></span><br><span class="line">vector&lt;Point&gt; ans;                 <span class="comment">//半平面交形成的凸包</span></span><br><span class="line">q[first=last=<span class="number">0</span>]=L[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//情况1：删除尾部的半平面</span></span><br><span class="line"><span class="keyword">while</span>(first&lt;last &amp;&amp; !<span class="built_in">OnLeft</span>(L[i], p[last<span class="number">-1</span>])) last--; </span><br><span class="line"><span class="comment">//情况2：删除首部的半平面：</span></span><br><span class="line"><span class="keyword">while</span>(first&lt;last &amp;&amp; !<span class="built_in">OnLeft</span>(L[i], p[first]))  first++; </span><br><span class="line">q[++last]=L[i];     <span class="comment">//将当前的半平面加入双端队列尾部</span></span><br><span class="line"><span class="comment">//极角相同的两个半平面，保留左边：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(<span class="built_in">Cross</span>(q[last].v,q[last<span class="number">-1</span>].v)) &lt; eps)&#123; </span><br><span class="line">last--;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">OnLeft</span>(q[last],L[i].p)) q[last]=L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算队列尾部半平面交点：</span></span><br><span class="line"><span class="keyword">if</span>(first&lt;last) p[last<span class="number">-1</span>]=<span class="built_in">Cross_point</span>(q[last<span class="number">-1</span>],q[last]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//情况3：删除队列尾部的无用半平面</span></span><br><span class="line"><span class="keyword">while</span>(first&lt;last &amp;&amp; !<span class="built_in">OnLeft</span>(q[first],p[last<span class="number">-1</span>])) last--;</span><br><span class="line"><span class="keyword">if</span>(last-first&lt;=<span class="number">1</span>) <span class="keyword">return</span> ans;   <span class="comment">//空集</span></span><br><span class="line">p[last]=<span class="built_in">Cross_point</span>(q[last],q[first]);  <span class="comment">//计算队列首尾部的交点。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=first;i&lt;=last;i++)  ans.<span class="built_in">push_back</span>(p[i]);   <span class="comment">//复制。</span></span><br><span class="line"><span class="keyword">return</span> ans;               <span class="comment">//返回凸多边形</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    Point c;      <span class="comment">//圆心</span></span><br><span class="line">    <span class="type">double</span> r;     <span class="comment">//半径</span></span><br><span class="line">    <span class="built_in">Circle</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Circle</span>(Point c,<span class="type">double</span> r):<span class="built_in">c</span>(c),<span class="built_in">r</span>(r)&#123;&#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> x,<span class="type">double</span> y,<span class="type">double</span> _r)&#123;c=<span class="built_in">Point</span>(x,y);r = _r;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点与圆的关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point_circle_relation</span><span class="params">(Point p, Circle C)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> dst = <span class="built_in">Distance</span>(p,C.c);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst - C.r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">//0 点在圆内</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst - C.r) ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;       <span class="comment">//1 圆上</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;                               <span class="comment">//2 圆外</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直线与圆的关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Line_circle_relation</span><span class="params">(Line v,Circle C)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> dst = <span class="built_in">Dis_point_line</span>(C.c,v);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst-C.r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">//0 直线和圆相交</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst-C.r) ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;     <span class="comment">//1 直线和圆相切</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;                               <span class="comment">//2 直线在圆外</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段与圆的关系</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Seg_circle_relation</span><span class="params">(Segment v,Circle C)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> dst = <span class="built_in">Dis_point_seg</span>(C.c,v);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst-C.r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;      <span class="comment">//0线段在圆内</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(dst-C.r) ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;      <span class="comment">//1线段和圆相切</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;                           <span class="comment">//2线段在圆外</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pa, pb是交点。返回值是交点个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Line_cross_circle</span><span class="params">(Line v,Circle C,Point &amp;pa,Point &amp;pb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Line_circle_relation</span>(v, C)==<span class="number">2</span>)  <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无交点</span></span><br><span class="line">Point q = <span class="built_in">Point_line_proj</span>(C.c,v);          <span class="comment">//圆心在直线上的投影点</span></span><br><span class="line">   <span class="type">double</span> d = <span class="built_in">Dis_point_line</span>(C.c,v);          <span class="comment">//圆心到直线的距离</span></span><br><span class="line"><span class="type">double</span> k = <span class="built_in">sqrt</span>(C.r*C.r-d*d);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(k) == <span class="number">0</span>)&#123;                            <span class="comment">//1个交点，直线和圆相切</span></span><br><span class="line">        pa = q;pb = q;<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point n=(v.p2-v.p1)/ <span class="built_in">Len</span>(v.p2-v.p1);       <span class="comment">//单位向量</span></span><br><span class="line">    pa = q + n*k;  pb = q - n*k;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;                                  <span class="comment">//2个交点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三点确定圆心</span></span><br><span class="line"><span class="function">Point <span class="title">circle_center</span><span class="params">(<span class="type">const</span> Point a, <span class="type">const</span> Point b, <span class="type">const</span> Point c)</span></span>&#123;</span><br><span class="line">    Point center;</span><br><span class="line">    <span class="type">double</span> a1=b.x-a.x, b1=b.y-a.y, c1=(a1*a1+b1*b1)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> a2=c.x-a.x, b2=c.y-a.y, c2=(a2*a2+b2*b2)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> d =a1*b2-a2*b1;</span><br><span class="line">    center.x =a.x+(c1*b2-c2*b1)/d;</span><br><span class="line">    center.y =a.y+(a1*c2-a2*c1)/d;</span><br><span class="line">    <span class="keyword">return</span> center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求最小圆覆盖</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">min_cover_circle</span><span class="params">(Point *p, <span class="type">int</span> n, Circle &amp;C)</span></span>&#123;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(p, p + n);             <span class="comment">//随机函数，打乱所有点。这一步很重要</span></span><br><span class="line">    Point c=p[<span class="number">0</span>]; </span><br><span class="line">    <span class="type">double</span> r=<span class="number">0</span>;                          <span class="comment">//从第1个点p0开始。圆心为p0，半径为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)                  <span class="comment">//扩展所有点</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Distance</span>(p[i],c)-r)&gt;<span class="number">0</span>)&#123;    <span class="comment">//点pi在圆外部</span></span><br><span class="line">            c=p[i]; r=<span class="number">0</span>;                  <span class="comment">//重新设置圆心为pi，半径为0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)          <span class="comment">//重新检查前面所有的点。</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Distance</span>(p[j],c)-r)&gt;<span class="number">0</span>)&#123;   <span class="comment">//两点定圆</span></span><br><span class="line">                    c.x=(p[i].x + p[j].x)/<span class="number">2</span>;</span><br><span class="line">                    c.y=(p[i].y + p[j].y)/<span class="number">2</span>;</span><br><span class="line">                    r=<span class="built_in">Distance</span>(p[j],c);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;j;k++)</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">sgn</span>(<span class="built_in">Distance</span>(p[k],c)-r)&gt;<span class="number">0</span>)&#123;   <span class="comment">//两点不能定圆，就三点定圆</span></span><br><span class="line">                            c=<span class="built_in">circle_center</span>(p[i],p[j],p[k]);</span><br><span class="line">                            r=<span class="built_in">Distance</span>(p[i], c);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    C=&#123;c,r&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point3</span>&#123;             <span class="comment">//三维点</span></span><br><span class="line">    <span class="type">double</span> x,y,z;</span><br><span class="line">    <span class="built_in">Point3</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Point3</span>(<span class="type">double</span> x,<span class="type">double</span> y,<span class="type">double</span> z):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y),<span class="built_in">z</span>(z)&#123;&#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> + (Point3 B)&#123;<span class="keyword">return</span> <span class="built_in">Point3</span>(x+B.x,y+B.y,z+B.z);&#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> - (Point3 B)&#123;<span class="keyword">return</span> <span class="built_in">Point3</span>(x-B.x,y-B.y,z-B.z);&#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> * (<span class="type">double</span> k)&#123;<span class="keyword">return</span> <span class="built_in">Point3</span>(x*k,y*k,z*k);&#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> / (<span class="type">double</span> k)&#123;<span class="keyword">return</span> <span class="built_in">Point3</span>(x/k,y/k,z/k);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (Point3 B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(x-B.x)==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y-B.y)==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(z-B.z)==<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point3 Vector3;    <span class="comment">//三维向量</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Distance</span><span class="params">(Vector3 A,Vector3 B)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y)+ (A.z-B.z)*(A.z-B.z));    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line3</span>&#123;</span><br><span class="line">    Point3 p1,p2;</span><br><span class="line">    <span class="built_in">Line3</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Line3</span>(Point3 p1,Point3 p2):<span class="built_in">p1</span>(p1),<span class="built_in">p2</span>(p2)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Line3 Segment3;       <span class="comment">//定义线段，两端点是Point p1,p2</span></span><br><span class="line"><span class="comment">//三维点积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dot</span><span class="params">(Vector3 A,Vector3 B)</span></span>&#123;<span class="keyword">return</span> A.x*B.x+A.y*B.y+A.z*B.z;&#125;</span><br><span class="line"><span class="comment">//求向量A的长度</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Len</span><span class="params">(Vector3 A)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Dot</span>(A, A));&#125;</span><br><span class="line"><span class="comment">//求向量A的长度的平方</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Len2</span><span class="params">(Vector3 A)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">Dot</span>(A, A);&#125;</span><br><span class="line"><span class="comment">//求向量A与B的夹角</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Angle</span><span class="params">(Vector3 A,Vector3 B)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">Dot</span>(A,B)/<span class="built_in">Len</span>(A)/<span class="built_in">Len</span>(B));&#125;</span><br><span class="line"><span class="comment">//三维叉积</span></span><br><span class="line"><span class="function">Vector3 <span class="title">Cross</span><span class="params">(Vector3 A,Vector3 B)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point3</span>(A.y*B.z-A.z*B.y, A.z*B.x-A.x*B.z, A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求三个点构成的三角形面积的2倍</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Area2</span><span class="params">(Point3 A,Point3 B,Point3 C)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Len</span>(<span class="built_in">Cross</span>(B-A, C-A));&#125;</span><br><span class="line"><span class="comment">//三维：点在直线上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Point_line_relation</span><span class="params">(Point3 p,Line3 v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>( <span class="built_in">Len</span>(<span class="built_in">Cross</span>(v.p1-p,v.p2-p))) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(v.p1-p,v.p2-p))== <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dis_point_line</span><span class="params">(Point3 p, Line3 v)</span>           <span class="comment">//三维：点到直线距离</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="keyword">return</span> <span class="built_in">Len</span>(<span class="built_in">Cross</span>(v.p2-v.p1,p-v.p1))/<span class="built_in">Distance</span>(v.p1,v.p2); &#125;</span><br><span class="line"><span class="comment">//三维：点到线段距离。</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dis_point_seg</span><span class="params">(Point3 p, Segment3 v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Dot</span>(p- v.p1,v.p2-v.p1)) &lt; <span class="number">0</span> || <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(p- v.p2,v.p1-v.p2)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">Distance</span>(p,v.p1),<span class="built_in">Distance</span>(p,v.p2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Dis_point_line</span>(p,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三维：点 p 在直线上的投影</span></span><br><span class="line"><span class="function">Point3 <span class="title">Point_line_proj</span><span class="params">(Point3 p, Line3 v)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> k=<span class="built_in">Dot</span>(v.p2-v.p1,p-v.p1)/<span class="built_in">Len2</span>(v.p2-v.p1);</span><br><span class="line">    <span class="keyword">return</span> v.p1+(v.p2-v.p1)*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Plane</span>&#123;</span><br><span class="line">    Point3 p1,p2,p3;     <span class="comment">//平面上的三个点</span></span><br><span class="line">    <span class="built_in">Plane</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Plane</span>(Point3 p1,Point3 p2,Point3 p3):<span class="built_in">p1</span>(p1),<span class="built_in">p2</span>(p2),<span class="built_in">p3</span>(p3)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//平面的法向量</span></span><br><span class="line"><span class="function">Point3 <span class="title">Pvec</span><span class="params">(Point3 A, Point3 B, Point3 C)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Cross</span>(B-A,C-A);&#125;</span><br><span class="line"><span class="function">Point3 <span class="title">Pvec</span><span class="params">(Plane f)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">Cross</span>(f.p2-f.p1,f.p3-f.p1);&#125;</span><br><span class="line"><span class="comment">//四点共平面</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Point_on_plane</span><span class="params">(Point3 A,Point3 B,Point3 C,Point3 D)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(<span class="built_in">Pvec</span>(A,B,C),D-A)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两平面平行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Parallel</span><span class="params">(Plane f1, Plane f2)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">Len</span>(<span class="built_in">Cross</span>(<span class="built_in">Pvec</span>(f1),<span class="built_in">Pvec</span>(f2))) &lt; eps; &#125;</span><br><span class="line"><span class="comment">//两平面垂直</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Vertical</span><span class="params">(Plane f1, Plane f2)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(<span class="built_in">Pvec</span>(f1),<span class="built_in">Pvec</span>(f2)))==<span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//直线与平面的交点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Line_cross_plane</span><span class="params">(Line3 u,Plane f,Point3 &amp;p)</span></span>&#123;</span><br><span class="line">    Point3 v = <span class="built_in">Pvec</span>(f);                           <span class="comment">//平面的法向量</span></span><br><span class="line">    <span class="type">double</span> x = <span class="built_in">Dot</span>(v, u.p2-f.p1);</span><br><span class="line">    <span class="type">double</span> y = <span class="built_in">Dot</span>(v, u.p1-f.p1);</span><br><span class="line">    <span class="type">double</span> d = x-y;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//-1：v在f上</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(d) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;                    <span class="comment">//0：v与f平行</span></span><br><span class="line">    p = ((u.p1 * x)-(u.p2 * y))/d;               <span class="comment">//v与f相交</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//四面体有向体积*6</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">volume4</span><span class="params">(Point3 a,Point3 b,Point3 c,Point3 d)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Dot</span>(<span class="built_in">Cross</span>(b-a,c-a),d-a); &#125;</span><br><span class="line"><span class="comment">//最小球覆盖</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">min_cover_ball</span><span class="params">(Point3 *p, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> T=<span class="number">100.0</span>;                    <span class="comment">//初始温度</span></span><br><span class="line">    <span class="type">double</span> delta = <span class="number">0.98</span>;               <span class="comment">//降温系数</span></span><br><span class="line">    Point3 c = p[<span class="number">0</span>];                   <span class="comment">//球心</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">double</span> r;                          <span class="comment">//半径</span></span><br><span class="line">    <span class="keyword">while</span>(T&gt;eps)    &#123;                  <span class="comment">//eps是终止温度</span></span><br><span class="line">        pos = <span class="number">0</span>; r = <span class="number">0</span>;                <span class="comment">//初始：p[0]是球心，半径是0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)         <span class="comment">//迭代：找距离球心最远的点</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Distance</span>(c,p[i])&gt;r)&#123;</span><br><span class="line">                r = <span class="built_in">Distance</span>(c,p[i]);  <span class="comment">//距离球心最远的点肯定在球周上</span></span><br><span class="line">                pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        c.x += (p[pos].x-c.x)/r*T;     <span class="comment">//逼近最后的解</span></span><br><span class="line">        c.y += (p[pos].y-c.y)/r*T;</span><br><span class="line">        c.z += (p[pos].z-c.z)/r*T;</span><br><span class="line">        T *= delta;                    <span class="comment">//降温</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*----------计算几何模板----------*/</span></span><br></pre></td></tr></table></figure><h3 id="自适应辛普森积分"><a href="#自适应辛普森积分" class="headerlink" title="自适应辛普森积分"></a>自适应辛普森积分</h3><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SIMPSON&#123;</span><br><span class="line">    <span class="type">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="comment">//积分函数...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (r - l) * (<span class="built_in">f</span>(l) + <span class="number">4</span> * <span class="built_in">f</span>(mid) + <span class="built_in">f</span>(r)) /<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> s)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">double</span> left = <span class="built_in">simpson</span>(l, mid), right = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(left + right - s) &lt; eps) <span class="keyword">return</span> left + right;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, left) + <span class="built_in">asr</span>(mid, r, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">asr</span>(l, r, <span class="built_in">simpson</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SIMPSON;</span><br></pre></td></tr></table></figure><h4 id="圆面积并"><a href="#圆面积并" class="headerlink" title="圆面积并"></a>圆面积并</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------计算几何模板----------*/</span></span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line"><span class="comment">/*----------计算几何模板----------*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">Circle c[N];</span><br><span class="line">pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; q[N];</span><br><span class="line"><span class="keyword">namespace</span> SIMPSON&#123;</span><br><span class="line">    <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;<span class="comment">//f为积分函数</span></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> X = <span class="built_in">fabs</span>(x - c[i].c.x), R = c[i].r;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dcmp</span>(X, R) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">auto</span> Y = <span class="built_in">sqrt</span>(R * R - X * X);</span><br><span class="line">                q[cnt ++ ] = &#123;c[i].c.y - Y, c[i].c.y + Y&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cnt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(q, q + cnt);</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>, st = q[<span class="number">0</span>].first, ed = q[<span class="number">0</span>].second;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].first &lt;= ed) ed = <span class="built_in">max</span>(ed, q[i].second);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res += ed - st;</span><br><span class="line">                st = q[i].first, ed = q[i].second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res + ed - st;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (r - l) * (<span class="built_in">f</span>(l) + <span class="number">4</span> * <span class="built_in">f</span>(mid) + <span class="built_in">f</span>(r)) /<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> s)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">double</span> left = <span class="built_in">simpson</span>(l, mid), right = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(left + right - s) &lt; eps) <span class="keyword">return</span> left + right;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, left) + <span class="built_in">asr</span>(mid, r, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">asr</span>(l, r, <span class="built_in">simpson</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SIMPSON;</span><br><span class="line">vector&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;&gt; segs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;&gt; &amp;segs)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(),segs.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;&gt; new_segs;</span><br><span class="line">    <span class="type">double</span> l = -INF, r = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; seg: segs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dcmp</span>(seg.first, r) &lt;= <span class="number">0</span>) r = <span class="built_in">max</span>(r, seg.second);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dcmp</span>(l, -INF)) new_segs.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">            l = seg.first, r = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    new_segs.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">    segs = new_segs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c[i].c.x &gt;&gt; c[i].c.y &gt;&gt; c[i].r;</span><br><span class="line">        c[i].c = <span class="built_in">Rotate</span>(c[i].c, <span class="number">1</span>);<span class="comment">//将坐标轴旋转任意角度，避免被卡</span></span><br><span class="line">        segs.<span class="built_in">push_back</span>(&#123;c[i].c.x-c[i].r,c[i].c.x+c[i].r&#125;);<span class="comment">//将每个圆投影到水平线上然后合并区间，求每个区间积分和。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge</span>(segs);</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;seg: segs) &#123;</span><br><span class="line">        res += <span class="built_in">area</span>(seg.first, seg.second);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">12</span>) &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="预备板"><a href="#预备板" class="headerlink" title="预备板"></a>预备板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> multi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fopen</span>(<span class="string">&quot;in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h3><p><strong>duipai.bat</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">g++ baoli.cpp -o baoli</span><br><span class="line">g++ std.cpp -o std</span><br><span class="line">g++ make.cpp -o make</span><br><span class="line"> </span><br><span class="line">:loop</span><br><span class="line">make.exe&gt;make.txt</span><br><span class="line">std.exe&lt;make.txt&gt;std.txt</span><br><span class="line">baoli.exe&lt;make.txt&gt;baoli.txt</span><br><span class="line">fc std.txt baoli.txt</span><br><span class="line"> <span class="keyword">if</span> %errorlevel%==<span class="number">0</span> <span class="keyword">goto</span> loop</span><br><span class="line">pause</span><br><span class="line"><span class="keyword">goto</span> loop</span><br></pre></td></tr></table></figure><p><strong>make.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=l;</span><br><span class="line">r++;</span><br><span class="line">k+=(<span class="number">1.0</span>*<span class="built_in">rand</span>()/RAND_MAX)*(r-l);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">rd</span>(<span class="number">2</span>, <span class="number">4</span>), m = <span class="built_in">rd</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; m &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="type">int</span> l = <span class="built_in">rd</span>(<span class="number">1</span>, n - <span class="number">1</span>), r = <span class="built_in">rd</span>(l + <span class="number">1</span>, n);</span><br><span class="line">cout &lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; r &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">make</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动取模"><a href="#自动取模" class="headerlink" title="自动取模"></a>自动取模</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = a * b - (<span class="type">long</span> <span class="type">long</span>)(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">long</span> <span class="type">long</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLong</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">norm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="type">long</span> <span class="title">long</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MLong res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MLong <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>*=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>+=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>-=(MLong rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>/=(MLong rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>*(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>+(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>/(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MLong</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MLong &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MLong lhs, MLong rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> MLong&lt;<span class="number">0LL</span>&gt;::Mod = (<span class="type">long</span> <span class="type">long</span>)(<span class="number">1E18</span>) + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> : x&#123;</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">int</span> Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>*=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="number">1LL</span> * x * rhs.x % <span class="built_in">getMod</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>+=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>-=(MInt rhs) &amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>/=(MInt rhs) &amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MInt &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int</span> MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> V, <span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="built_in">MInt</span>&lt;P&gt;(V).<span class="built_in">inv</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">1000000007</span>;<span class="comment">//模数</span></span><br><span class="line"><span class="keyword">using</span> Z = MInt&lt;P&gt;;</span><br></pre></td></tr></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> base = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base_digits = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="type">int</span> sign;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bigint</span>() :</span><br><span class="line">    <span class="built_in">sign</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bigint</span>(<span class="type">long</span> <span class="type">long</span> v) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bigint</span>(<span class="type">const</span> string &amp;s) &#123;</span><br><span class="line">        <span class="built_in">read</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        sign = v.sign;</span><br><span class="line">        a = v.a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">long</span> <span class="type">long</span> v) &#123;</span><br><span class="line">        sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            sign = <span class="number">-1</span>, v = -v;</span><br><span class="line">        <span class="keyword">for</span> (; v &gt; <span class="number">0</span>; v = v / base)</span><br><span class="line">            a.<span class="built_in">push_back</span>(v % base);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>+(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign == v.sign) &#123;</span><br><span class="line">            bigint res = v;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; (<span class="type">int</span>) <span class="built_in">max</span>(a.<span class="built_in">size</span>(), v.a.<span class="built_in">size</span>()) || carry; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == (<span class="type">int</span>) res.a.<span class="built_in">size</span>())</span><br><span class="line">                    res.a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">                res.a[i] += carry + (i &lt; (<span class="type">int</span>) a.<span class="built_in">size</span>() ? a[i] : <span class="number">0</span>);</span><br><span class="line">                carry = res.a[i] &gt;= base;</span><br><span class="line">                <span class="keyword">if</span> (carry)</span><br><span class="line">                    res.a[i] -= base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> - (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>-(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign == v.sign) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>() &gt;= v.<span class="built_in">abs</span>()) &#123;</span><br><span class="line">                bigint res = *<span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; (<span class="type">int</span>) v.a.<span class="built_in">size</span>() || carry; ++i) &#123;</span><br><span class="line">                    res.a[i] -= carry + (i &lt; (<span class="type">int</span>) v.a.<span class="built_in">size</span>() ? v.a[i] : <span class="number">0</span>);</span><br><span class="line">                    carry = res.a[i] &lt; <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (carry)</span><br><span class="line">                        res.a[i] += base;</span><br><span class="line">                &#125;</span><br><span class="line">                res.<span class="built_in">trim</span>();</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -(v - *<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> + (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>*=(<span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            sign = -sign, v = -v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a.<span class="built_in">size</span>() || carry; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == (<span class="type">int</span>) a.<span class="built_in">size</span>())</span><br><span class="line">                a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur = a[i] * (<span class="type">long</span> <span class="type">long</span>) v + carry;</span><br><span class="line">            carry = (<span class="type">int</span>) (cur / base);</span><br><span class="line">            a[i] = (<span class="type">int</span>) (cur % base);</span><br><span class="line">            <span class="comment">//asm(&quot;divl %%ecx&quot; : &quot;=a&quot;(carry), &quot;=d&quot;(a[i]) : &quot;A&quot;(cur), &quot;c&quot;(base));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">trim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>*(<span class="type">int</span> v) <span class="type">const</span> &#123;</span><br><span class="line">        bigint res = *<span class="keyword">this</span>;</span><br><span class="line">        res *= v;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">friend</span> pair&lt;bigint, bigint&gt; <span class="title">divmod</span><span class="params">(<span class="type">const</span> bigint &amp;a1, <span class="type">const</span> bigint &amp;b1)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> norm = base / (b1.a.<span class="built_in">back</span>() + <span class="number">1</span>);</span><br><span class="line">        bigint a = a1.<span class="built_in">abs</span>() * norm;</span><br><span class="line">        bigint b = b1.<span class="built_in">abs</span>() * norm;</span><br><span class="line">        bigint q, r;</span><br><span class="line">        q.a.<span class="built_in">resize</span>(a.a.<span class="built_in">size</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a.a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            r *= base;</span><br><span class="line">            r += a.a[i];</span><br><span class="line">            <span class="type">int</span> s1 = r.a.<span class="built_in">size</span>() &lt;= b.a.<span class="built_in">size</span>() ? <span class="number">0</span> : r.a[b.a.<span class="built_in">size</span>()];</span><br><span class="line">            <span class="type">int</span> s2 = r.a.<span class="built_in">size</span>() &lt;= b.a.<span class="built_in">size</span>() - <span class="number">1</span> ? <span class="number">0</span> : r.a[b.a.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> d = ((<span class="type">long</span> <span class="type">long</span>) base * s1 + s2) / b.a.<span class="built_in">back</span>();</span><br><span class="line">            r -= b * d;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; <span class="number">0</span>)</span><br><span class="line">                r += b, --d;</span><br><span class="line">            q.a[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        q.sign = a1.sign * b1.sign;</span><br><span class="line">        r.sign = a1.sign;</span><br><span class="line">        q.<span class="built_in">trim</span>();</span><br><span class="line">        r.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(q, r / norm);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>/(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">divmod</span>(*<span class="keyword">this</span>, v).first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>%(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">divmod</span>(*<span class="keyword">this</span>, v).second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>/=(<span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            sign = -sign, v = -v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = (<span class="type">int</span>) a.<span class="built_in">size</span>() - <span class="number">1</span>, rem = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur = a[i] + rem * (<span class="type">long</span> <span class="type">long</span>) base;</span><br><span class="line">            a[i] = (<span class="type">int</span>) (cur / v);</span><br><span class="line">            rem = (<span class="type">int</span>) (cur % v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">trim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>/(<span class="type">int</span> v) <span class="type">const</span> &#123;</span><br><span class="line">        bigint res = *<span class="keyword">this</span>;</span><br><span class="line">        res /= v;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span>%(<span class="type">int</span> v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = -v;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            m = (a[i] + m * (<span class="type">long</span> <span class="type">long</span>) base) % v;</span><br><span class="line">        <span class="keyword">return</span> m * sign;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>+=(<span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>-=(<span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>*=(<span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>/=(<span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> / v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign != v.sign)</span><br><span class="line">            <span class="keyword">return</span> sign &lt; v.sign;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() != v.a.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">size</span>() * sign &lt; v.a.<span class="built_in">size</span>() * v.sign;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != v.a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] * sign &lt; v.a[i] * sign;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v &lt; *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(v &lt; *<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; v) &amp;&amp; !(v &lt; *<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt; v || v &lt; *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!a.<span class="built_in">empty</span>() &amp;&amp; !a.<span class="built_in">back</span>())</span><br><span class="line">            a.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">empty</span>())</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isZero</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">empty</span>() || (a.<span class="built_in">size</span>() == <span class="number">1</span> &amp;&amp; !a[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        bigint res = *<span class="keyword">this</span>;</span><br><span class="line">        res.sign = -sign;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">bigint <span class="title">abs</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        bigint res = *<span class="keyword">this</span>;</span><br><span class="line">        res.sign *= res.sign;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">longValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            res = res * base + a[i];</span><br><span class="line">        <span class="keyword">return</span> res * sign;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bigint <span class="title">gcd</span><span class="params">(<span class="type">const</span> bigint &amp;a, <span class="type">const</span> bigint &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.<span class="built_in">isZero</span>() ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bigint <span class="title">lcm</span><span class="params">(<span class="type">const</span> bigint &amp;a, <span class="type">const</span> bigint &amp;b)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">        sign = <span class="number">1</span>;</span><br><span class="line">        a.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; (<span class="type">int</span>) s.<span class="built_in">size</span>() &amp;&amp; (s[pos] == <span class="string">&#x27;-&#x27;</span> || s[pos] == <span class="string">&#x27;+&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[pos] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                sign = -sign;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= pos; i -= base_digits) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">max</span>(pos, i - base_digits + <span class="number">1</span>); j &lt;= i; j++)</span><br><span class="line">                x = x * <span class="number">10</span> + s[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">trim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;stream, bigint &amp;v) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        stream &gt;&gt; s;</span><br><span class="line">        v.<span class="built_in">read</span>(s);</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;stream, <span class="type">const</span> bigint &amp;v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.sign == <span class="number">-1</span>)</span><br><span class="line">            stream &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        stream &lt;&lt; (v.a.<span class="built_in">empty</span>() ? <span class="number">0</span> : v.a.<span class="built_in">back</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = (<span class="type">int</span>) v.a.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            stream &lt;&lt; <span class="built_in">setw</span>(base_digits) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; v.a[i];</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> vector&lt;<span class="type">int</span>&gt; <span class="title">convert_base</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> old_digits, <span class="type">int</span> new_digits)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">p</span><span class="params">(max(old_digits, new_digits) + <span class="number">1</span>)</span></span>;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>) p.<span class="built_in">size</span>(); i++)</span><br><span class="line">            p[i] = p[i - <span class="number">1</span>] * <span class="number">10</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur_digits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            cur += a[i] * p[cur_digits];</span><br><span class="line">            cur_digits += old_digits;</span><br><span class="line">            <span class="keyword">while</span> (cur_digits &gt;= new_digits) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>((<span class="type">int</span>)(cur % p[new_digits]));</span><br><span class="line">                cur /= p[new_digits];</span><br><span class="line">                cur_digits -= new_digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>((<span class="type">int</span>) cur);</span><br><span class="line">        <span class="keyword">while</span> (!res.<span class="built_in">empty</span>() &amp;&amp; !res.<span class="built_in">back</span>())</span><br><span class="line">            res.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typedef</span> vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; vll;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> vll <span class="title">karatsubaMultiply</span><span class="params">(<span class="type">const</span> vll &amp;a, <span class="type">const</span> vll &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vll <span class="title">res</span><span class="params">(n + n)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    res[i + j] += a[i] * b[j];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> k = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="function">vll <span class="title">a1</span><span class="params">(a.begin(), a.begin() + k)</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">a2</span><span class="params">(a.begin() + k, a.end())</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b1</span><span class="params">(b.begin(), b.begin() + k)</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b2</span><span class="params">(b.begin() + k, b.end())</span></span>;</span><br><span class="line">        </span><br><span class="line">        vll a1b1 = <span class="built_in">karatsubaMultiply</span>(a1, b1);</span><br><span class="line">        vll a2b2 = <span class="built_in">karatsubaMultiply</span>(a2, b2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            a2[i] += a1[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            b2[i] += b1[i];</span><br><span class="line">        </span><br><span class="line">        vll r = <span class="built_in">karatsubaMultiply</span>(a2, b2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a1b1.<span class="built_in">size</span>(); i++)</span><br><span class="line">            r[i] -= a1b1[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a2b2.<span class="built_in">size</span>(); i++)</span><br><span class="line">            r[i] -= a2b2[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) r.<span class="built_in">size</span>(); i++)</span><br><span class="line">            res[i + k] += r[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a1b1.<span class="built_in">size</span>(); i++)</span><br><span class="line">            res[i] += a1b1[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) a2b2.<span class="built_in">size</span>(); i++)</span><br><span class="line">            res[i + n] += a2b2[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bigint <span class="keyword">operator</span>*(<span class="type">const</span> bigint &amp;v) <span class="type">const</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; a6 = <span class="built_in">convert_base</span>(<span class="keyword">this</span>-&gt;a, base_digits, <span class="number">6</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; b6 = <span class="built_in">convert_base</span>(v.a, base_digits, <span class="number">6</span>);</span><br><span class="line">        <span class="function">vll <span class="title">a</span><span class="params">(a6.begin(), a6.end())</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b</span><span class="params">(b6.begin(), b6.end())</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>())</span><br><span class="line">            a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (b.<span class="built_in">size</span>() &lt; a.<span class="built_in">size</span>())</span><br><span class="line">            b.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (a.<span class="built_in">size</span>() &amp; (a.<span class="built_in">size</span>() - <span class="number">1</span>))</span><br><span class="line">            a.<span class="built_in">push_back</span>(<span class="number">0</span>), b.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        vll c = <span class="built_in">karatsubaMultiply</span>(a, b);</span><br><span class="line">        bigint res;</span><br><span class="line">        res.sign = sign * v.sign;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; (<span class="type">int</span>) c.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur = c[i] + carry;</span><br><span class="line">            res.a.<span class="built_in">push_back</span>((<span class="type">int</span>) (cur % <span class="number">1000000</span>));</span><br><span class="line">            carry = (<span class="type">int</span>) (cur / <span class="number">1000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.a = <span class="built_in">convert_base</span>(res.a, <span class="number">6</span>, base_digits);</span><br><span class="line">        res.<span class="built_in">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="comment">//下标从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),x)-nums.<span class="built_in">begin</span>()+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()),nums.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h3 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h3><h4 id="爬山法"><a href="#爬山法" class="headerlink" title="爬山法"></a>爬山法</h4><h4 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h4><p>二维平面上给定n个点，求这个平面上任选一点到这个n个点的最小距离和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> MAX_TIME=<span class="number">0.8</span>;</span><br><span class="line"><span class="type">bool</span> multi=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PDD q[N];</span><br><span class="line"><span class="type">double</span> ans=<span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">rand</span><span class="params">(<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>)<span class="built_in">rand</span>()/RAND_MAX*(r-l)+l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_dist</span><span class="params">(PDD a,PDD b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> dx=a.x-b.x;</span><br><span class="line">    <span class="type">double</span> dy=a.y-b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(PDD p)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        res+=<span class="built_in">get_dist</span>(p,q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">min</span>(res,ans);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">simulate_anneal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">PDD <span class="title">cur</span><span class="params">(rand(<span class="number">0</span>,<span class="number">10000</span>),rand(<span class="number">0</span>,<span class="number">10000</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">double</span> t=<span class="number">1e4</span>;t&gt;=<span class="number">1e-4</span>;t*=<span class="number">0.99</span>)&#123;</span><br><span class="line">        <span class="function">PDD <span class="title">np</span><span class="params">(rand(cur.x-t,cur.x+t),rand(cur.y-t,cur.y+t))</span></span>;</span><br><span class="line">        <span class="type">double</span> dt=<span class="built_in">calc</span>(np)-<span class="built_in">calc</span>(cur);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span>(-dt/t)&gt;<span class="built_in">rand</span>(<span class="number">0</span>,<span class="number">1</span>)) cur=np;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;q[i].x&gt;&gt;q[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((<span class="type">double</span>)<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;MAX_TIME) <span class="built_in">simulate_anneal</span>();</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">0</span>)&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> TTT=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(multi) cin&gt;&gt;TTT;</span><br><span class="line">    <span class="keyword">while</span>(TTT--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读写相关"><a href="#读写相关" class="headerlink" title="读写相关"></a>读写相关</h3><h4 id="int128读写"><a href="#int128读写" class="headerlink" title="__int128读写"></a>__int128读写</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 X=<span class="number">0</span>,w=<span class="number">0</span>; <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;w|=ch==<span class="string">&#x27;-&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快读快写"><a href="#快读快写" class="headerlink" title="快读快写"></a>快读快写</h4><p><strong>版本1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">read</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> M = <span class="number">1</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">    <span class="type">char</span> buf[M], *S = buf, *P = buf, c, l;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (S == P &amp;&amp; (P = (S = buf) + <span class="built_in">fread</span>(buf, <span class="number">1</span>, M, stdin), S == P) ? EOF : *S++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; read &amp;<span class="keyword">operator</span>&gt;&gt;(T &amp;x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">            l = c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x = (l ^ <span class="number">45</span>) ? x : -x, *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; in;</span><br></pre></td></tr></table></figure><p><strong>版本2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">out</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">out</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10进制转x进制"><a href="#10进制转x进制" class="headerlink" title="10进制转x进制"></a>10进制转x进制</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string dict = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">ten_to_x</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span>  <span class="comment">//十进制转 x 进制函数。 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans += dict[n % x];</span><br><span class="line">n /= x;</span><br><span class="line">&#125;</span><br><span class="line">string t = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ans.<span class="built_in">length</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) t += ans[i];</span><br><span class="line"><span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的算法模板 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/package.json"/>
      <url>/package.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"dependencies":{"aplayer":"^1.10.1","hexo-tag-aplayer":"^3.0.4"}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/README.html"/>
      <url>/node_modules/hexo-tag-aplayer/README.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-tag-aplayer"><a href="#hexo-tag-aplayer" class="headerlink" title="hexo-tag-aplayer"></a>hexo-tag-aplayer</h1><p><img src="https://img.shields.io/npm/v/hexo-tag-aplayer.svg" alt="npm">  <img src="https://img.shields.io/npm/l/hexo-tag-aplayer.svg" alt="npm"></p><p>Embed APlayer(<a href="https://github.com/DIYgod/APlayer">https://github.com/DIYgod/APlayer</a>) in Hexo posts/pages.</p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">中文文档</a></p><!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><ul><li><a href="#installation">Installation</a></li><li><a href="#dependency">Dependency</a></li><li><a href="#usage">Usage</a><ul><li><a href="#option">Option</a></li><li><a href="#with-lyrics">With lyrics</a></li><li><a href="#with-playlist">With playlist</a></li><li><a href="#meingjs-support-new-in-30">MeingJS support (new in 3.0)</a></li><li><a href="#pjax-compatible">PJAX compatible</a></li></ul></li><li><a href="#customization-new-in-30">Customization (new in 3.0)</a></li><li><a href="#troubleshoot">Troubleshoot</a><ul><li><a href="#space-within-arguments">Space within arguments</a></li><li><a href="#duplicate-aplayerjs-loading">Duplicate APlayer.JS loading</a></li></ul></li><li><a href="#license">LICENSE</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><p><img src="http://7jpp1d.com1.z0.glb.clouddn.com/QQ20160202-5.png" alt="plugin screenshot"></p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><pre><code>npm install --save hexo-tag-aplayer</code></pre><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><ul><li>APlayer.js  &gt;= 1.10.0</li><li>Meting.js &gt;= 1.2.0</li></ul><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><pre><code>&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;### Option+ `title` : music title+ `author`: music author+ `url`: music file url+ `picture_url`: optional, music picture url+ `narrow`: optional, narrow style+ `autoplay`: optional, autoplay music, not supported by mobile browsers+ `width:xxx`: optional, prefix `width:`, player's width (default: 100%)+ `lrc:xxx`: optional, prefix `lrc:`, LRC file urlWith [post asset folders](https://hexo.io/docs/asset-folders.html#Tag-Plugins-For-Relative-Path-Referencing) enabled, you can easily place your image, music and LRC file into asset folder, and reference them like:&#123;% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %&#125;### With lyricsBesides 'lrc' option, you can use `aplayerlrc` which has end tag to show lyrics.&#123;% aplayerlrc "title" "author" "url" "autoplay" %&#125;[00:00.00]lrc here&#123;% endaplayerlrc %&#125;</code></pre><h3 id="With-playlist"><a href="#With-playlist" class="headerlink" title="With playlist"></a>With playlist</h3><pre><code>&#123;% aplayerlist %&#125;&#123;    "narrow": false,                          // Optional, narrow style    "autoplay": true,                         // Optional, autoplay song(s), not supported by mobile browsers    "mode": "random",                         // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation`    "showlrc": 3,                             // Optional, show lrc, can be 1, 2, 3    "mutex": true,                            // Optional, pause other players when this player playing    "theme": "#e6d0b2",                      // Optional, theme color, default: #b7daff    "preload": "metadata",                    // Optional, the way to load music, can be 'none' 'metadata' 'auto', default: 'auto'    "listmaxheight": "513px",                 // Optional, max height of play list    "music": [        &#123;            "title": "CoCo",            "author": "Jeff Williams",            "url": "caffeine.mp3",            "pic": "caffeine.jpeg",            "lrc": "caffeine.txt"        &#125;,        &#123;            "title": "アイロニ",            "author": "鹿乃",            "url": "irony.mp3",            "pic": "irony.jpg"        &#125;    ]&#125;&#123;% endaplayerlist %&#125;</code></pre><h3 id="MeingJS-support-new-in-3-0"><a href="#MeingJS-support-new-in-3-0" class="headerlink" title="MeingJS support (new in 3.0)"></a>MeingJS support (new in 3.0)</h3><p>When you use MetingJS, your blog can play musics from Tencent, Netease, Xiami, Kugou, Baidu and more.</p><p>See <a href="https://github.com/metowolf/MetingJS">metowolf/MetingJS</a> and <a href="https://github.com/metowolf/Meting">metowolf/Meting</a> in detail.</p><p>If you want to use MetingJS in <code>hexo-tag-aplayer</code>, you need enable it in <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Now you can use <code>&#123;% meting ...%&#125;</code> in your post:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Simple example (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- Advanced example --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p>The  <code>&#123;% meting %&#125;</code>  options are shown below:</p><div class="table-container"><table><thead><tr><th>Option</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td><strong>required</strong></td><td>song id / playlist id / album id / search keyword</td></tr><tr><td>server</td><td><strong>required</strong></td><td>Music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>required</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>Enable fixed mode</td></tr><tr><td>mini</td><td><code>false</code></td><td>Enable mini mode</td></tr><tr><td>loop</td><td><code>all</code></td><td>Player loop play, values: ‘all’, ‘one’, ‘none’</td></tr><tr><td>order</td><td><code>list</code></td><td>Player play order, values: ‘list’, ‘random’</td></tr><tr><td>volume</td><td>0.7</td><td>Default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</td></tr><tr><td>lrctype</td><td>0</td><td>Lyric type</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>Indicate whether list should folded at first</td></tr><tr><td>autoplay</td><td><code>false</code></td><td>Autoplay song(s), not supported by mobile browsers</td></tr><tr><td>mutex</td><td><code>true</code></td><td>Pause other players when this player playing</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>Max height of play list</td></tr><tr><td>preload</td><td><code>auto</code></td><td>The way to load music, can be <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage key that store player setting</td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>Theme color</td></tr></tbody></table></div><p>Read section <a href="#customization-new-in-30">customization</a>  to learn how to configure self-host meting api server in <code>hexo-tag-aplayer</code> and other configuration.</p><h3 id="PJAX-compatible"><a href="#PJAX-compatible" class="headerlink" title="PJAX compatible"></a>PJAX compatible</h3><p>You need destroy APlayer instances manually when you use PJAX.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;pjax:start&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">aplayers</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">window</span>.<span class="property">aplayers</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">aplayers</span>[i].<span class="title function_">destroy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">aplayers</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Customization-new-in-3-0"><a href="#Customization-new-in-3-0" class="headerlink" title="Customization (new in 3.0)"></a>Customization (new in 3.0)</h2><p>You can configure <code>hexo-tag-aplayer</code> in <code>_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">script_dir:</span> <span class="string">some/place</span>                        <span class="comment"># Script asset path in public directory, default: &#x27;assets/js&#x27;</span></span><br><span class="line">  <span class="attr">style_dir:</span> <span class="string">some/place</span>                         <span class="comment"># Style asset path in public directory, default: &#x27;assets/css&#x27;</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">http://xxx/aplayer.min.js</span>                <span class="comment"># External APlayer.js url (CDN)</span></span><br><span class="line">  <span class="attr">style_cdn:</span> <span class="string">http://xxx/aplayer.min.css</span>         <span class="comment"># External APlayer.css url (CDN)</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span>                                  <span class="comment"># Meting support, default: false</span></span><br><span class="line">  <span class="attr">meting_api:</span> <span class="string">http://xxx/api.php</span>                <span class="comment"># Meting api url</span></span><br><span class="line">  <span class="attr">meting_cdn:</span> <span class="string">http://xxx/Meing.min.js</span>           <span class="comment"># External Meting.js url (CDN)</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">true</span>                            <span class="comment"># Auto asset injection, default: true</span></span><br><span class="line">  <span class="attr">externalLink:</span> <span class="string">http://xxx/aplayer.min.js</span>       <span class="comment"># Deprecated, use &#x27;cdn&#x27; instead</span></span><br></pre></td></tr></table></figure><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><h3 id="Space-within-arguments"><a href="#Space-within-arguments" class="headerlink" title="Space within arguments"></a>Space within arguments</h3><p>Hexo has an <a href="https://github.com/hexojs/hexo/issues/1455">issue</a> that cannot use space within tag arguments.</p><p>If you encounter this problem, <strong>install the latest (beta) version, and wrap the arguments within a string literal, for example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;autoplay&quot; &quot;width:70%&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="Duplicate-APlayer-JS-loading"><a href="#Duplicate-APlayer-JS-loading" class="headerlink" title="Duplicate APlayer.JS loading"></a>Duplicate APlayer.JS loading</h3><p>The plugin hooks filter <code>after_render:html</code> , and it would inject <code>APlayer.js</code> and <code>Meting.js</code> in <code>&lt;head&gt;</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/aplayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>However, <code>after_render:html</code> is not fired in some cases :</p><ul><li><a href="https://github.com/hexojs/hexo-inject/issues/1">Does not work with hexo-renderer-jade</a></li><li><code>after_render:html</code> seems not to get emitted in default settings of hexo server module (<code>hexo server</code>), it means you have to use static serving mode( <code>hexo server -s</code>) instead.</li></ul><p>In such cases, the plugin would hook<code>after_post_render</code> as a fallback, which has a possibility to cause duplicate asset loadings.</p><p>If you want to solve this issue definitely, you can disable this auto-injection feature in <code>_config.yml</code> and insert the scripts by yourself:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/gulpfile.babel.js"/>
      <url>/node_modules/hexo-tag-aplayer/gulpfile.babel.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';import gulp from 'gulp';import babel from 'gulp-babel';import rename from 'gulp-rename';import clean from 'gulp-clean';import watch from 'gulp-watch';import plumber from 'gulp-plumber';const LOCAL_ENV_PATH = process.env.HEXO_TAG_APLAYER_LOCAL_PATH;const sources = ['index.es', 'lib/**/*.es', 'common/**/*.es'];const resetExt = (path) => {    path.extname = '.js';    console.log(JSON.stringify(path))};gulp.task('default', ['build']);gulp.task('build', () => {    return gulp.src(sources, {base: '.'})        .pipe(babel({            'presets': ['es2015']        }))         .pipe(rename(resetExt))        .pipe(gulp.dest('.'));});gulp.task('local-test', () => {    return gulp.src(sources, {base: '.'})        .pipe(babel({            'presets': ['es2015']        }))        .pipe(rename(resetExt))        .pipe(gulp.dest(LOCAL_ENV_PATH));});gulp.task('clean', () => {    const builds = sources.map((s) => s.replace('es', 'js'));    return gulp.src(builds, {read: false})        .pipe(clean());});gulp.task('watch', () => {   return watch(sources, () => {    return gulp.src(sources, {base: '.'})        .pipe(watch(sources))        .pipe(plumber(err => console.log(err.stack)))        .pipe(babel({            'presets': ['es2015']        }))        .pipe(plumber.stop())        .pipe(rename(resetExt))        .pipe(gulp.dest(LOCAL_ENV_PATH));   });});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/index.js"/>
      <url>/node_modules/hexo-tag-aplayer/index.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();var _hexoFs = require('hexo-fs');var _hexoFs2 = _interopRequireDefault(_hexoFs);var _util = require('./common/util');var _hexoUtil = require('hexo-util');var _hexoUtil2 = _interopRequireDefault(_hexoUtil);var _constant = require('./common/constant');var _playerMeting = require('./lib/tag/playerMeting');var _playerMeting2 = _interopRequireDefault(_playerMeting);var _player = require('./lib/tag/player');var _player2 = _interopRequireDefault(_player);var _playerLyric = require('./lib/tag/playerLyric');var _playerLyric2 = _interopRequireDefault(_playerLyric);var _playerList = require('./lib/tag/playerList');var _playerList2 = _interopRequireDefault(_playerList);var _view = require('./lib/view');var _view2 = _interopRequireDefault(_view);var _config = require('./lib/config');var _config2 = _interopRequireDefault(_config);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }/*** hexo-tag-aplayer* https://github.com/grzhan/hexo-tag-aplayer* Copyright (c) 2016, grzhan* Licensed under the MIT license.** Syntax:*  <script>console.error("Error: [hexo-tag-aplayer] Specified asset file not found ([picture_url,)");</script>*/require('babel-polyfill');var log = require('hexo-log')({ name: 'hexo-tag-aplayer', debug: false });var config = new _config2.default(hexo);var APLAYER_STYLE_LITERAL = '<link rel="stylesheet" class="' + _constant.APLAYER_SECONDARY_STYLE_MARKER + '" href="' + config.get('style') + '">';var APLAYER_SCRIPT_LITERAL = '<script src="' + config.get('script') + '" class="' + _constant.APLAYER_SECONDARY_SCRIPT_MARKER + '"></script>';var METING_SCRIPT_LITERAL = config.get('meting_api') ? '<script>var meting_api=\'' + config.get('meting_api') + '?server=:server&type=:type&id=:id&r=:r\'</script><script class="' + _constant.METING_SECONDARY_SCRIPT_MARKER + '" src="' + config.get('meting_script') + '"></script>' : '<script class="' + _constant.METING_SECONDARY_SCRIPT_MARKER + '" src="' + config.get('meting_script') + '"></script>';var filterEmitted = { after_render: false, after_post_render: false };config.get('assets').forEach(function (asset) {  var _asset = _slicedToArray(asset, 4),      external = _asset[0],      name = _asset[1],      dstPath = _asset[2],      srcPath = _asset[3];  if (!external && config.get('asset_inject') && _hexoFs2.default.existsSync(srcPath)) {    hexo.extend.generator.register(name, function () {      return {        path: dstPath,        data: function data() {          return _hexoFs2.default.createReadStream(srcPath);        }      };    });  }});hexo.extend.filter.register('after_render:html', function (raw, info) {  filterEmitted.after_render = true;  if (!config.get('asset_inject')) {    return;  }  var view = new _view2.default(raw, info);  if (view.isFullPage()) {    if (!view.hasHeadTag()) {      log.warn('[hexo-tag-aplayer]: <head> not found in ' + view.path + ', unable to inject script (like \'APlayer.js\') in this page.');      return;    }    // Inject APlayer script    if (view.hasTagMarker(_constant.APLAYER_TAG_MARKER) && !view.assetAlreadyInjected(_constant.APLAYER_SCRIPT_MARKER)) {      view.injectAsset('<link rel="stylesheet" href="' + config.get('style') + '" class="' + _constant.APLAYER_STYLE_MARKER + '">');      view.injectAsset(_hexoUtil2.default.htmlTag('script', { src: config.get('script'), class: _constant.APLAYER_SCRIPT_MARKER }, ''));    }    // Inject Meting script    if (config.get('meting') && view.hasTagMarker(_constant.METING_TAG_MARKER) && !view.assetAlreadyInjected(_constant.METING_SCRIPT_MARKER)) {      if (config.get('meting_api')) {        view.injectAsset('<script>var meting_api=\'' + config.get('meting_api') + '?server=:server&type=:type&id=:id&r=:r\'</script>');      }      view.injectAsset(_hexoUtil2.default.htmlTag('script', { src: config.get('meting_script'), class: _constant.METING_SCRIPT_MARKER }, ''));    }    // Remove duplicate scripts    view.removeLiteral(APLAYER_SCRIPT_LITERAL);    view.removeLiteral(METING_SCRIPT_LITERAL);    view.removeLiteral(APLAYER_STYLE_LITERAL);  }  return view.content;});hexo.extend.filter.register('after_post_render', function (data) {  filterEmitted.after_post_render = true;  if (!config.get('asset_inject')) {    return;  }  // Polyfill: filter 'after_render:html' may not be fired in some cases, see https://github.com/hexojs/hexo-inject/issues/1  if (config.get('meting')) {    data.content = METING_SCRIPT_LITERAL + data.content;  }  data.content = APLAYER_STYLE_LITERAL + APLAYER_SCRIPT_LITERAL + data.content;  return data;});hexo.extend.tag.register('aplayer', function (args) {  try {    var tag = new _player2.default(hexo, args, this._id);    var output = tag.generate();    return output;  } catch (e) {    console.error(e);    return '\n\t\t\t<script>\n\t\t\t\tconsole.error("' + e + '");\n\t\t\t</script>';  }});hexo.extend.tag.register('aplayerlrc', function (args, content) {  try {    var tag = new _playerLyric2.default(hexo, args, this._id, content);    var output = tag.generate();    return output;  } catch (e) {    console.error(e);    return '\n\t\t\t<script>\n\t\t\t\tconsole.error("' + e + '");\n\t\t\t</script>';  }}, { ends: true });hexo.extend.tag.register('aplayerlist', function (args, content) {  try {    var tag = new _playerList2.default(hexo, content, this._id);    var output = tag.generate();    return output;  } catch (e) {    console.error(e);    return '\n\t\t\t<script>\n\t\t\t\tconsole.error("' + e + '");\n\t\t\t</script>';  }}, { ends: true });hexo.extend.tag.register('meting', function (args) {  try {    if (!config.get('meting')) {      (0, _util.throwError)('Meting support is disabled, cannot resolve the meting tags properly.');    }    var tag = new _playerMeting2.default(hexo, args, this._id);    var output = tag.generate();    return output;  } catch (e) {    console.error(e);    return '\n\t\t\t<script>\n\t\t\t\tconsole.error("' + e + '");\n\t\t\t</script>';  }});hexo.extend.tag.register('before_exit', function () {  if (!filterEmitted.after_render && filterEmitted.after_post_render) {    log.warn('Filter "after_render:html" not emitted during this generation, duplicate scripts would not be removed.');  }});</head>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/aplayer/README.html"/>
      <url>/node_modules/aplayer/README.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p align="center"><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhu01y9uy7j305k04s3yc.jpg" alt="ADPlayer" width="100"></p><p></p><h1 align="center">APlayer</h1><blockquote><p>Wow, such a lovely HTML5 music player</p></blockquote><p><a href="https://www.npmjs.com/package/aplayer"><img src="https://img.shields.io/npm/v/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://github.com/MoePlayer/APlayer/blob/master/LICENSE"><img src="https://img.shields.io/npm/l/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://www.npmjs.com/package/aplayer"><img src="https://img.shields.io/npm/dt/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://github.com/MoePlayer/APlayer/tree/master/dist"><img src="https://badge-size.herokuapp.com/MoePlayer/APlayer/master/dist/APlayer.min.js?compression=gzip&amp;style=flat-square" alt="size"></a><br><a href="https://travis-ci.org/MoePlayer/APlayer"><img src="https://img.shields.io/travis/MoePlayer/APlayer.svg?style=flat-square" alt="Travis"></a><br><a href="https://david-dm.org/MoePlayer/APlayer#info=devDependencies"><img src="https://img.shields.io/david/dev/MoePlayer/aplayer.svg?style=flat-square" alt="devDependency Status"></a><br><a href="https://github.com/MoePlayer/APlayer#donate"><img src="https://img.shields.io/badge/$-donate-ff69b4.svg?style=flat-square" alt="donate"></a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><img src="https://i.imgur.com/JDrJXCr.png" alt="image"></p><p>APlayer is a lovely HTML5 music player.</p><p><strong>APlayer supports:</strong></p><ul><li>Media formats<ul><li>MP4 H.264 (AAC or MP3)</li><li>WAVE PCM</li><li>Ogg Theora Vorbis</li></ul></li><li>Features<ul><li>Playlist</li><li>Lyrics</li></ul></li></ul><p>Using APlayer on your project? <a href="https://github.com/MoePlayer/APlayer/issues/79">Let me know!</a></p><p><strong><a href="https://aplayer.js.org">Docs</a></strong></p><p><strong><a href="https://aplayer.js.org/#/zh-Hans/">中文文档</a></strong></p><h2 id="Join-the-Discussion"><a href="#Join-the-Discussion" class="headerlink" title="Join the Discussion"></a>Join the Discussion</h2><ul><li><a href="https://t.me/adplayer">Telegram Group</a></li><li><a href="https://shang.qq.com/wpa/qunwpa?idkey=bf22213ae0028a82e5adf3f286dfd4f01e0997dc9f1dcd8e831a0a85e799be17">QQ Group</a>: 415835947</li></ul><h2 id="Related-Projects"><a href="#Related-Projects" class="headerlink" title="Related Projects"></a>Related Projects</h2><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><ul><li><a href="https://github.com/zgq354/APlayer-Typecho-Plugin">APlayer-Typecho-Plugin</a>: Typecho</li><li><a href="https://github.com/grzhan/hexo-tag-aplayer">hexo-tag-aplayer</a>: Hexo</li><li><a href="https://github.com/liwanglin12/Hermit-X">Hermit-X(APlayer for WordPress)</a>: WordPress</li><li><a href="https://github.com/kn007/APlayerHandle">APlayerHandle</a>: WordPress</li><li><a href="https://github.com/fghrsh/APlayer_for_Z-BlogPHP">APlayer_for_Z-BlogPHP</a>: Z-BlogPHP</li><li><a href="https://github.com/sabrinaluo/react-aplayer">react-aplayer</a>: React</li><li><a href="https://github.com/SevenOutman/vue-aplayer">Vue-APlayer</a>: Vue</li><li><a href="https://github.com/MoeFE/vue-aplayer">vue-aplayer</a>: Vue</li><li><a href="https://github.com/Daryl-L/php-aplayer">php-aplayer</a>: PHP</li></ul><h3 id="Tooling"><a href="#Tooling" class="headerlink" title="Tooling"></a>Tooling</h3><ul><li><a href="https://github.com/Mashiro-Sorata/APlayer-Controler">APlayer-Controler</a>: controling tool</li><li><a href="https://github.com/metowolf/MetingJS">MetingJS</a>: work with Meting music API</li><li>Feel free to submit yours in <a href="https://github.com/MoePlayer/APlayer/issues/79"><code>Let me know!</code></a></li></ul><h2 id="Who-use-APlayer"><a href="#Who-use-APlayer" class="headerlink" title="Who use APlayer?"></a>Who use APlayer?</h2><ul><li><a href="https://www.bilibili.com/">bilibili</a>: 国内知名的视频弹幕网站</li><li><a href="https://zh.wikipedia.org/wiki/CC98%E8%AE%BA%E5%9D%9B">浙江大学CC98论坛</a>: 浙江大学校网内规模最大的论坛，中国各大学中较活跃的BBS之一</li><li><a href="http://jellyrue.com/">Jelly Rue</a>: Jelly Rue, an indie pop-rock band from Tartu.</li><li><a href="http://www.opusopus.co/">Opus</a>: An artist-exploration data visualization application</li><li><a href="http://www.chinaz.com/15year/index.html">站长之家</a>: 针对中文站点提供资讯、技术、资源、服务</li><li><a href="https://www.lovelivesupport.com/">LLSupport</a>: This site provides a lot of information about LoveLive</li><li><a href="https://www.lrcgc.com/diy">歌词千寻</a>: 每日更新的LRC歌词网站</li><li><a href="http://i.oppsu.cn">iSearch</a>: 一个提供 iTunes 搜索,试听,高清专辑封面获取,查看最新音乐动态等综合性平台</li><li><a href="https://github.com/MoeFE/Lyric">LRC歌词编辑器</a>: 一款非常实用的在线LRC歌词编辑器</li><li><a href="https://aerostatica.ru/">Аэростатика</a></li><li>Feel free to submit yours in <a href="https://github.com/MoePlayer/APlayer/issues/79"><code>Let me know!</code></a></li></ul><h2 id="Current-Premium-Sponsors"><a href="#Current-Premium-Sponsors" class="headerlink" title="Current Premium Sponsors"></a>Current Premium Sponsors</h2><h3 id="Special-Sponsors"><a href="#Special-Sponsors" class="headerlink" title="Special Sponsors"></a>Special Sponsors</h3><p><a href="https://pear.hk/" target="_blank"><br>    <img width="222px" src="https://i.imgur.com/5qQYmfc.png"></a><br><a href="https://console.upyun.com/register/?invite=BkLZ2Xqob" target="_blank"><br>    <img width="222px" src="https://imgur.com/apG1uKf.png"></a></p><h3 id="OpenCollective-backers"><a href="#OpenCollective-backers" class="headerlink" title="OpenCollective backers"></a>OpenCollective backers</h3><p><img src="https://opencollective.com/APlayer/backers.svg?width=890" alt></p><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>This project exists thanks to all the people who contribute.</p><p><a href="https://github.com/MoePlayer/APlayer/graphs/contributors"><img src="https://opencollective.com/APlayer/contributors.svg?width=890"></a></p><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><p>APlayer is an MIT licensed open source project and completely free to use. However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing.</p><h2 id="One-time-Donations"><a href="#One-time-Donations" class="headerlink" title="One-time Donations"></a>One-time Donations</h2><p>We accept donations through these channels:</p><ul><li><a href="https://www.paypal.me/DIYgod">Paypal</a></li><li><a href="https://i.imgur.com/aq6PtWa.png">WeChat Pay</a></li><li><a href="https://i.imgur.com/wv1Pj2k.png">Alipay</a></li><li>Bitcoin: 13CwQLHzPYm2tewNMSJBeArbbRM5NSmCD1</li></ul><h2 id="Recurring-Pledges"><a href="#Recurring-Pledges" class="headerlink" title="Recurring Pledges"></a>Recurring Pledges</h2><p>Recurring pledges come with exclusive perks, e.g. having your name or your company logo listed in the APlayer GitHub repository and this website.</p><ul><li>Become a backer or sponsor via <a href="https://opencollective.com/aplayer">OpenCollective</a></li><li>E-mail us: i#html.love</li></ul><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p><strong>APlayer</strong> © <a href="https://github.com/DIYgod">DIYgod</a>, Released under the <a href="./LICENSE">MIT</a> License.<br><br>Authored and maintained by DIYgod with help from contributors (<a href="https://github.com/DIYgod/APlayer/contributors">list</a>).</p><blockquote><p><a href="https://diygod.me">Blog</a> · GitHub <a href="https://github.com/DIYgod">@DIYgod</a> · Twitter <a href="https://twitter.com/DIYgod">@DIYgod</a> · Telegram Channel <a href="https://t.me/awesomeDIYgod">@awesomeDIYgod</a></p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/package.json"/>
      <url>/node_modules/hexo-tag-aplayer/package.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"hexo-tag-aplayer","version":"3.0.4","description":"Embed aplayer in Hexo posts/pages","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["music","hexo","tag","player","aplayer"],"author":"Grzhan","license":"MIT","repository":{"type":"git","url":"git+https://github.com/grzhan/hexo-tag-aplayer.git"},"bugs":{"url":"https://github.com/grzhan/hexo-tag-aplayer/issues"},"homepage":"https://github.com/grzhan/hexo-tag-aplayer#readme","dependencies":{"aplayer":"^1.10.0","babel-polyfill":"^6.16.0","hexo-fs":"^0.2.0","hexo-log":"^0.2.0","hexo-util":"^0.1.7","meting":"^1.2.0"},"devDependencies":{"babel-core":"^6.26.0","babel-preset-es2015":"^6.18.0","gulp":"^3.9.1","gulp-babel":"^7.0.0","gulp-clean":"^0.4.0","gulp-plumber":"^1.2.0","gulp-rename":"^1.2.2","gulp-watch":"^5.0.0"},"__npminstall_done":true,"_from":"hexo-tag-aplayer@3.0.4","_resolved":"https://registry.npmmirror.com/hexo-tag-aplayer/-/hexo-tag-aplayer-3.0.4.tgz"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/aplayer/package.json"/>
      <url>/node_modules/aplayer/package.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"aplayer","version":"1.10.1","description":"Wow, such a beautiful html5 music player","main":"dist/APlayer.min.js","style":"dist/APlayer.min.css","scripts":{"start":"npm run dev","build":"cross-env NODE_ENV=production webpack --config webpack/prod.config.js --progress --display-error-details --colors","dev":"cross-env NODE_ENV=development webpack-dev-server --config webpack/dev.config.js --watch --colors","test":"eslint src webpack"},"files":["dist"],"repository":{"url":"git+https://github.com/DIYgod/APlayer.git","type":"git"},"keywords":["player","music","html5"],"author":"DIYgod","license":"MIT","bugs":{"url":"https://github.com/DIYgod/APlayer/issues"},"homepage":"https://github.com/DIYgod/APlayer#readme","devDependencies":{"art-template":"4.12.2","art-template-loader":"1.4.3","autoprefixer":"^8.1.0","babel-core":"^6.26.0","babel-loader":"^7.1.4","babel-preset-env":"^1.6.1","cross-env":"^5.1.4","css-loader":"^0.28.10","eslint":"^4.18.2","eslint-loader":"^2.0.0","git-revision-webpack-plugin":"^2.5.1","mini-css-extract-plugin":"0.2.0","node-sass":"^4.7.2","postcss-loader":"^2.1.1","sass-loader":"^6.0.7","style-loader":"^0.20.3","svg-inline-loader":"0.8.0","template-string-optimize-loader":"^2.2.3","url-loader":"^1.0.1","webpack":"^4.1.1","webpack-cli":"2.0.12","webpack-dev-server":"^3.1.1"},"dependencies":{"balloon-css":"^0.5.0","promise-polyfill":"7.1.0","smoothscroll":"0.4.0"},"__npminstall_done":true,"_from":"aplayer@1.10.1","_resolved":"https://registry.npmmirror.com/aplayer/-/aplayer-1.10.1.tgz"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/README.html"/>
      <url>/node_modules/babel-polyfill/README.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/package.json"/>
      <url>/node_modules/babel-polyfill/package.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"babel-polyfill","version":"6.26.0","description":"Provides polyfills necessary for a full ES2015+ environment","author":"Sebastian McKenzie <sebmck@gmail.com>","homepage":"https://babeljs.io/","license":"MIT","repository":"https://github.com/babel/babel/tree/master/packages/babel-polyfill","main":"lib/index.js","dependencies":{"babel-runtime":"^6.26.0","core-js":"^2.5.0","regenerator-runtime":"^0.10.5"},"__npminstall_done":true,"_from":"babel-polyfill@6.26.0","_resolved":"https://registry.npmmirror.com/babel-polyfill/-/babel-polyfill-6.26.0.tgz"}</sebmck@gmail.com>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/package-lock.json"/>
      <url>/node_modules/babel-polyfill/package-lock.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"babel-polyfill","version":"6.23.0","lockfileVersion":1,"requires":true,"dependencies":{"core-js":{"version":"2.5.0","resolved":"https://registry.npmjs.org/core-js/-/core-js-2.5.0.tgz","integrity":"sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="},"regenerator-runtime":{"version":"0.10.5","resolved":"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.10.5.tgz","integrity":"sha1-M2w+/BIgrc7dosn6tntaeVWjNlg="}}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/browser.js"/>
      <url>/node_modules/babel-polyfill/browser.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var c="function"==typeof require&&require;if(!u&&c)return c(o,!0);if(i)return i(o,!0);var a=new Error("Cannot find module '"+o+"'");throw a.code="MODULE_NOT_FOUND",a}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(n){var r=t[o][1][n];return s(r||n)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return 0="=i[e]&&t(42)(i,e,{}),n.exports=function(t){i[e][t]=!0}},{128:128,42:42}],6:[function(t,n,r){n.exports=function(t,n,r,e){if(!(t" s}({1:[function(t,n,r){(function(n){"use strict";function define(t,n,e){t[n]||object[r](t,n,{writable:!0,configurable:!0,value:e})}if(t(327),t(328),t(2),n._babelpolyfill)throw new error("only one instance of babel-polyfill is allowed");n._babelpolyfill="!0;var" r="defineProperty" ;define(string.prototype,"padleft","".padstart),define(string.prototype,"padright","".padend),"pop,reverse,shift,keys,values,entries,indexof,every,some,foreach,map,filter,find,findindex,includes,join,slice,concat,push,splice,unshift,sort,lastindexof,reduce,reduceright,copywithin,fill".split(",").foreach(function(t){[][t]&&define(array,t,function.call.bind([][t]))})}).call(this,"undefined"!="typeof" global?global:"undefined"!="typeof" self?self:"undefined"!="typeof" window?window:{})},{2:2,327:327,328:328}],2:[function(t,n,r){t(130),n.exports="t(23).RegExp.escape},{130:130,23:23}],3:[function(t,n,r){n.exports=function(t){if("function"!=typeof" t)throw typeerror(t+" not a function!");return t}},{}],4:[function(t,n,r){var e="t(18);n.exports=function(t,n){if("number"!=typeof" t&&"number"!="e(t))throw" typeerror(n);return+t}},{18:18}],5:[function(t,n,r){var instanceof n)||void 0!="=e&&e" in typeerror(r+": incorrect invocation!");return t}},{}],7:[function(t,n,r){var an object!");return t}},{51:51}],8:[function(t,n,r){"use strict";var copywithin(t,n){var>2?arguments[2]:void 0,s=Math.min((void 0===f?u:i(f,u))-a,u-c),l=1;for(a<c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s-->0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},{114:114,118:118,119:119}],9:[function(t,n,r){"use strict";var e=t(119),i=t(114),o=t(118);n.exports=function fill(t){for(var n=e(this),r=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,f=void 0===a?r:i(a,r);f>c;)n[c++]=t;return n}},{114:114,118:118,119:119}],10:[function(t,n,r){var e=t(39);n.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},{39:39}],11:[function(t,n,r){var e=t(117),i=t(118),o=t(114);n.exports=function(t){return function(n,r,u){var c,a=e(n),f=i(a.length),s=o(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}}},{114:114,117:117,118:118}],12:[function(t,n,r){var e=t(25),i=t(47),o=t(119),u=t(118),c=t(15);n.exports=function(t,n){var r=1==t,a=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,v=n||c;return function(n,c,p){for(var d,y,g=o(n),m=i(g),b=e(c,p,3),x=u(m.length),S=0,w=r?v(n,x):a?v(n,0):void 0;x>S;S++)if((h||S in m)&&(d=m[S],y=b(d,S,g),t))if(r)w[S]=y;else if(y)switch(t){case 3:return!0;case 5:return d;case 6:return S;case 2:w.push(d)}else if(s)return!1;return l?-1:f||s?s:w}}},{118:118,119:119,15:15,25:25,47:47}],13:[function(t,n,r){var e=t(3),i=t(119),o=t(47),u=t(118);n.exports=function(t,n,r,c,a){e(n);var f=i(t),s=o(f),l=u(f.length),h=a?l-1:0,v=a?-1:1;if(r<2)for(;;){if(h in s){c="s[h],h+=v;break}if(h+=v,a?h<0:l<=h)throw" typeerror("reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=v)h in s&&(c=n(c,s[h],h,f));return c}},{118:118,119:119,3:3,47:47}],14:[function(t,n,r){var e=t(51),i=t(49),o=t(128)("species");n.exports=function(t){var n;return i(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},{128:128,49:49,51:51}],15:[function(t,n,r){var e=t(14);n.exports=function(t,n){return new(e(t))(n)}},{14:14}],16:[function(t,n,r){"use strict";var e=t(3),i=t(51),o=t(46),u=[].slice,c={},a=function(t,n,r){if(!(n in c)){for(var e=[],i=0;i<n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return 0="==t?"Undefined":null===t?"Null":"string"==typeof(r=u(n=Object(t),i))?r:o?e(n):"Object"==(c=e(n))&&"function"==typeof" new f("+e.join(",")+")")}return c[n](t,r)};n.exports="Function.bind||function" bind(t){var n="e(this),r=u.call(arguments,1),c=function(){var" e="r.concat(u.call(arguments));return" this instanceof c?a(n,e.length,e):o(n,e,t)};return i(n.prototype)&&(c.prototype="n.prototype),c}},{3:3,46:46,51:51}],17:[function(t,n,r){var" arguments}()),u="function(t,n){try{return" t[n]}catch(t){}};n.exports="function(t){var" n,r,c;return void n.callee?"arguments":c}},{128:128,18:18}],18:[function(t,n,r){var e.call(t).slice(8,-1)}},{}],19:[function(t,n,r){"use strict";var r,e="v(n);if("F"!==e)return" t._i[e];for(r="t._f;r;r=r.n)if(r.k==n)return" r};n.exports="{getConstructor:function(t,n,r,f){var" s="t(function(t,e){c(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void" 0,t._l="void" 0,t[d]="0,void" 0!="e&&a(e,r,t[f],t)});return" o(s.prototype,{clear:function clear(){for(var t="p(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void" 0),delete r[e.i];t._f="t._l=void" r="p(this,n),e=y(r,t);if(e){var" i="e.n,o=e.p;delete" r._i[e.i],e.r="!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[d]--}return!!e},forEach:function" foreach(t){p(this,n);for(var>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function has(t){return!!y(p(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return p(this,n)[d]}}),s},def:function(t,n,r){var e,i,o=y(t,n);return o?o.v=r:(t._l=o={i:i=v(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,n,r){f(t,n,function(t,r){this._t=p(t,n),this._k=r,this._l=void 0},function(){for(var t=this,n=t._k,r=t._l;r&&r.r;)r=r.p;return t._t&&(t._l=r=r?r.n:t._t._f)?"keys"==n?s(0,r.k):"values"==n?s(0,r.v):s(0,[r.k,r.v]):(t._t=void 0,s(1))},r?"entries":"values",!r,!0),l(n)}}},{100:100,125:125,25:25,29:29,39:39,55:55,57:57,6:6,66:66,71:71,72:72,93:93}],20:[function(t,n,r){var e=t(17),i=t(10);n.exports=function(t){return function toJSON(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},{10:10,17:17}],21:[function(t,n,r){"use strict";var e=t(93),i=t(66).getWeak,o=t(7),u=t(51),c=t(6),a=t(39),f=t(12),s=t(41),l=t(125),h=f(5),v=f(6),p=0,d=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return h(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var r=g(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=v(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},n.exports={getConstructor:function(t,n,r,o){var f=t(function(t,e){c(t,f,n,"_i"),t._t=n,t._i=p++,t._l=void 0,void 0!=e&&a(e,r,t[o],t)});return e(f.prototype,{delete:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function has(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).has(t):r&&s(r,this._i)}}),f},def:function(t,n,r){var e=i(o(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},{12:12,125:125,39:39,41:41,51:51,6:6,66:66,7:7,93:93}],22:[function(t,n,r){"use strict";var e=t(40),i=t(33),o=t(94),u=t(93),c=t(66),a=t(39),f=t(6),s=t(51),l=t(35),h=t(56),v=t(101),p=t(45);n.exports=function(t,n,r,d,y,g){var m=e[t],b=m,x=y?"set":"add",S=b&&b.prototype,w={},_=function(t){var n=S[t];o(S,t,"delete"==t?function(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function has(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function get(t){return g&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function add(t){return n.call(this,0===t?0:t),this}:function set(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(g||S.forEach&&!l(function(){(new b).entries().next()}))){var E=new b,O=E[x](g?{}:-0,1)!=E,P=l(function(){E.has(1)}),M=h(function(t){new b(t)}),F=!g&&l(function(){for(var t=new b,n=5;n--;)t[x](n,n);return!t.has(-0)});M||(b=n(function(n,r){f(n,b,t);var e=p(new m,n,b);return void 0!=r&&a(r,y,e[x],e),e}),b.prototype=S,S.constructor=b),(P||F)&&(_("delete"),_("has"),y&&_("get")),(F||O)&&_(x),g&&S.clear&&delete S.clear}else b=d.getConstructor(n,t,y,x),u(b.prototype,r),c.NEED=!0;return v(b,t),w[t]=b,i(i.G+i.W+i.F*(b!=m),w),g||d.setStrong(b,t,y),b}},{101:101,33:33,35:35,39:39,40:40,45:45,51:51,56:56,6:6,66:66,93:93,94:94}],23:[function(t,n,r){var e=n.exports={version:"2.5.0"};"number"==typeof __e&&(__e=e)},{}],24:[function(t,n,r){"use strict";var e=t(72),i=t(92);n.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},{72:72,92:92}],25:[function(t,n,r){var e=t(3);n.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},{3:3}],26:[function(t,n,r){"use strict";var e=t(35),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};n.exports=e(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!e(function(){o.call(new Date(NaN))})?function toISOString(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:o},{35:35}],27:[function(t,n,r){"use strict";var e=t(7),i=t(120);n.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(e(this),"number"!=t)}},{120:120,7:7}],28:[function(t,n,r){n.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},{}],29:[function(t,n,r){n.exports=!t(35)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{35:35}],30:[function(t,n,r){var e=t(51),i=t(40).document,o=e(i)&&e(i.createElement);n.exports=function(t){return o?i.createElement(t):{}}},{40:40,51:51}],31:[function(t,n,r){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],32:[function(t,n,r){var e=t(81),i=t(78),o=t(82);n.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,c=r(t),a=o.f,f=0;c.length>f;)a.call(t,u=c[f++])&&n.push(u);return n}},{78:78,81:81,82:82}],33:[function(t,n,r){var e=t(40),i=t(23),o=t(42),u=t(94),c=t(25),a=function(t,n,r){var f,s,l,h,v=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=p?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,b=p?i:i[n]||(i[n]={}),x=b.prototype||(b.prototype={});p&&(r=n);for(f in r)s=!v&&m&&void 0!==m[f],l=(s?m:r)[f],h=g&&s?c(l,e):y&&"function"==typeof l?c(Function.call,l):l,m&&u(m,f,l,t&a.U),b[f]!=l&&o(b,f,h),y&&x[f]!=l&&(x[f]=l)};e.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,n.exports=a},{23:23,25:25,40:40,42:42,94:94}],34:[function(t,n,r){var e=t(128)("match");n.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},{128:128}],35:[function(t,n,r){n.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],36:[function(t,n,r){"use strict";var e=t(42),i=t(94),o=t(35),u=t(28),c=t(128);n.exports=function(t,n,r){var a=c(t),f=r(u,a,""[t]),s=f[0],l=f[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,s),e(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},{128:128,28:28,35:35,42:42,94:94}],37:[function(t,n,r){"use strict";var e=t(7);n.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},{7:7}],38:[function(t,n,r){"use strict";function flattenIntoArray(t,n,r,a,f,s,l,h){for(var v,p,d=f,y=0,g=!!l&&u(l,h,3);y<a;){if(y in r){if(v="g?g(r[y],y,n):r[y],p=!1,i(v)&&(p=v[c],p=void" 0!="=p?!!p:e(v)),p&&s">0)d=flattenIntoArray(t,n,v,o(v.length),d,s-1)-1;else{if(d>=9007199254740991)throw TypeError();t[d]=v}d++}y++}return d}var e=t(49),i=t(51),o=t(118),u=t(25),c=t(128)("isConcatSpreadable");n.exports=flattenIntoArray},{118:118,128:128,25:25,49:49,51:51}],39:[function(t,n,r){var e=t(25),i=t(53),o=t(48),u=t(7),c=t(118),a=t(129),f={},s={},r=n.exports=function(t,n,r,l,h){var v,p,d,y,g=h?function(){return t}:a(t),m=e(r,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(v=c(t.length);v>b;b++)if((y=n?m(u(p=t[b])[0],p[1]):m(t[b]))===f||y===s)return y}else for(d=g.call(t);!(p=d.next()).done;)if((y=i(d,m,p.value,n))===f||y===s)return y};r.BREAK=f,r.RETURN=s},{118:118,129:129,25:25,48:48,53:53,7:7}],40:[function(t,n,r){var e=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},{}],41:[function(t,n,r){var e={}.hasOwnProperty;n.exports=function(t,n){return e.call(t,n)}},{}],42:[function(t,n,r){var e=t(72),i=t(92);n.exports=t(29)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},{29:29,72:72,92:92}],43:[function(t,n,r){var e=t(40).document;n.exports=e&&e.documentElement},{40:40}],44:[function(t,n,r){n.exports=!t(29)&&!t(35)(function(){return 7!=Object.defineProperty(t(30)("div"),"a",{get:function(){return 7}}).a})},{29:29,30:30,35:35}],45:[function(t,n,r){var e=t(51),i=t(99).set;n.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},{51:51,99:99}],46:[function(t,n,r){n.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},{}],47:[function(t,n,r){var e=t(18);n.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},{18:18}],48:[function(t,n,r){var e=t(58),i=t(128)("iterator"),o=Array.prototype;n.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},{128:128,58:58}],49:[function(t,n,r){var e=t(18);n.exports=Array.isArray||function isArray(t){return"Array"==e(t)}},{18:18}],50:[function(t,n,r){var e=t(51),i=Math.floor;n.exports=function isInteger(t){return!e(t)&&isFinite(t)&&i(t)===t}},{51:51}],51:[function(t,n,r){n.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],52:[function(t,n,r){var e=t(51),i=t(18),o=t(128)("match");n.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},{128:128,18:18,51:51}],53:[function(t,n,r){var e=t(7);n.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},{7:7}],54:[function(t,n,r){"use strict";var e=t(71),i=t(92),o=t(101),u={};t(42)(u,t(128)("iterator"),function(){return this}),n.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},{101:101,128:128,42:42,71:71,92:92}],55:[function(t,n,r){"use strict";var e=t(60),i=t(33),o=t(94),u=t(42),c=t(41),a=t(58),f=t(54),s=t(101),l=t(79),h=t(128)("iterator"),v=!([].keys&&"next"in[].keys()),p=function(){return this};n.exports=function(t,n,r,d,y,g,m){f(r,n,d);var b,x,S,w=function(t){if(!v&&t in P)return P[t];switch(t){case"keys":return function keys(){return new r(this,t)};case"values":return function values(){return new r(this,t)}}return function entries(){return new r(this,t)}},_=n+" Iterator",E="values"==y,O=!1,P=t.prototype,M=P[h]||P["@@iterator"]||y&&P[y],F=M||w(y),I=y?E?w("entries"):F:void 0,A="Array"==n?P.entries||M:M;if(A&&(S=l(A.call(new t)))!==Object.prototype&&S.next&&(s(S,_,!0),e||c(S,h)||u(S,h,p)),E&&M&&"values"!==M.name&&(O=!0,F=function values(){return M.call(this)}),e&&!m||!v&&!O&&P[h]||u(P,h,F),a[n]=F,a[_]=p,y)if(b={values:E?F:w("values"),keys:g?F:w("keys"),entries:I},m)for(x in b)x in P||o(P,x,b[x]);else i(i.P+i.F*(v||O),n,b);return b}},{101:101,128:128,33:33,41:41,42:42,54:54,58:58,60:60,79:79,94:94}],56:[function(t,n,r){var e=t(128)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}n.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},{128:128}],57:[function(t,n,r){n.exports=function(t,n){return{value:n,done:!!t}}},{}],58:[function(t,n,r){n.exports={}},{}],59:[function(t,n,r){var e=t(81),i=t(117);n.exports=function(t,n){for(var r,o=i(t),u=e(o),c=u.length,a=0;c>a;)if(o[r=u[a++]]===n)return r}},{117:117,81:81}],60:[function(t,n,r){n.exports=!1},{}],61:[function(t,n,r){var e=Math.expm1;n.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function 0="=(t=+t)?t:t" expm1(t){return>-1e-6&&t<1e-6?t+t*t 2:math.exp(t)-1}:e},{}],62:[function(t,n,r){var e="t(65),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),a=i(2,-126),f=function(t){return" t+1 o-1 o};n.exports="Math.fround||function" fround(t){var n,r,i="Math.abs(t),s=e(t);return" i<a?s*f(i a u)*a*u:(n="(1+u/o)*i,r=n-(n-i),r">c||r!=r?s*(1/0):s*r)}},{65:65}],63:[function(t,n,r){n.exports=Math.log1p||function log1p(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t 0="==arguments.length||t!=t||n!=n||r!=r||e!=e||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-e)/(r-n)+e}},{}],65:[function(t,n,r){n.exports=Math.sign||function" 2:math.log(1+t)}},{}],64:[function(t,n,r){n.exports="Math.scale||function" scale(t,n,r,e,i){return sign(t){return e="t(124)("meta"),i=t(51),o=t(41),u=t(72).f,c=0,a=Object.isExtensible||function(){return!0},f=!t(35)(function(){return" a(object.preventextensions({}))}),s="function(t){u(t,e,{value:{i:"O"+" ++c,w:{}}})},l="function(t,n){if(!i(t))return"symbol"==typeof" t?t:("string"="=typeof" t?"s":"p")+t;if(!o(t,e)){if(!a(t))return"f";if(!n)return"e";s(t)}return t[e].i},h="function(t,n){if(!o(t,e)){if(!a(t))return!0;if(!n)return!1;s(t)}return" t[e].w},v="function(t){return" f&&p.need&&a(t)&&!o(t,e)&&s(t),t},p="n.exports={KEY:e,NEED:!1,fastKey:l,getWeak:h,onFreeze:v}},{124:124,35:35,41:41,51:51,72:72}],67:[function(t,n,r){var" i="u.get(t);if(!i){if(!r)return;u.set(t,i=new" e)}var o="i.get(n);if(!o){if(!r)return;i.set(n,o=new" e)}return o},a="function(t,n,r){var" void 0!="=e&&e.has(t)},f=function(t,n,r){var" 0:e.get(t)},s="function(t,n,r,e){c(r,e,!0).set(t,n)},l=function(t,n){var" r="c(t,n,!1),e=[];return" r&&r.foreach(function(t,n){e.push(n)}),e},h="function(t){return" t?t:string(t)},v="function(t){i(i.S,"Reflect",t)};n.exports={store:u,map:c,has:a,get:f,set:s,keys:l,key:h,exp:v}},{103:103,160:160,266:266,33:33}],68:[function(t,n,r){var" t,n,r,f="function(){var" e,i;for(a&&(e="u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw" t?r():n="void" 0,e}}n="void" 0,e&&e.enter()};if(a)r="function(){u.nextTick(f)};else" if(o){var s="!0,l=document.createTextNode("");new" o(f).observe(l,{characterdata:!0}),r="function(){l.data=s=!s}}else" if(c&&c.resolve){var h="c.resolve();r=function(){h.then(f)}}else" function(e){var 0};n&&(n.next="i),t||(t=i,r()),n=i}}},{113:113,18:18,40:40}],69:[function(t,n,r){"use" strict";function promisecapability(t){var n,r;this.promise="new" t(function(t,e){if(void typeerror("bad promise constructor");n="t,r=e}),this.resolve=e(n),this.reject=e(r)}var" new promisecapability(t)}},{3:3}],70:[function(t,n,r){"use strict";var t="{},n={},r=Symbol(),e="abcdefghijklmnopqrst";return" t[r]="7,e.split("").forEach(function(t){n[t]=t}),7!=a({},t)[r]||Object.keys(a({},n)).join("")!=e})?function" assign(t,n){for(var>f;)for(var h,v=c(arguments[f++]),p=s?e(v).concat(s(v)):e(v),d=p.length,y=0;d>y;)l.call(v,h=p[y++])&&(r[h]=v[h]);return r}:a},{119:119,35:35,47:47,78:78,81:81,82:82}],71:[function(t,n,r){var e=t(7),i=t(73),o=t(31),u=t(102)("IE_PROTO"),c=function(){},a=function(){var n,r=t(30)("iframe"),e=o.length;for(r.style.display="none",t(43).appendChild(r),r.src="javascript:",n=r.contentWindow.document,n.open(),n.write("<script>document.F=Object<\/script>"),n.close(),a=n.F;e--;)delete a.prototype[o[e]];return a()};n.exports=Object.create||function create(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:i(r,n)}},{102:102,30:30,31:31,43:43,7:7,73:73}],72:[function(t,n,r){var e=t(7),i=t(44),o=t(120),u=Object.defineProperty;r.f=t(29)?Object.defineProperty:function defineProperty(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},{120:120,29:29,44:44,7:7}],73:[function(t,n,r){var e=t(72),i=t(7),o=t(81);n.exports=t(29)?Object.defineProperties:function defineProperties(t,n){i(t);for(var r,u=o(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},{29:29,7:7,72:72,81:81}],74:[function(t,n,r){"use strict";n.exports=t(60)||!t(35)(function(){var n=Math.random();__defineSetter__.call(null,n,function(){}),delete t(40)[n]})},{35:35,40:40,60:60}],75:[function(t,n,r){var e=t(82),i=t(92),o=t(117),u=t(120),c=t(41),a=t(44),f=Object.getOwnPropertyDescriptor;r.f=t(29)?f:function getOwnPropertyDescriptor(t,n){if(t=o(t),n=u(n,!0),a)try{return f(t,n)}catch(t){}if(c(t,n))return i(!e.f.call(t,n),t[n])}},{117:117,120:120,29:29,41:41,44:44,82:82,92:92}],76:[function(t,n,r){var e=t(117),i=t(77).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return i(t)}catch(t){return u.slice()}};n.exports.f=function getOwnPropertyNames(t){return u&&"[object Window]"==o.call(t)?c(t):i(e(t))}},{117:117,77:77}],77:[function(t,n,r){var e=t(80),i=t(31).concat("length","prototype");r.f=Object.getOwnPropertyNames||function getOwnPropertyNames(t){return e(t,i)}},{31:31,80:80}],78:[function(t,n,r){r.f=Object.getOwnPropertySymbols},{}],79:[function(t,n,r){var e=t(41),i=t(119),o=t(102)("IE_PROTO"),u=Object.prototype;n.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},{102:102,119:119,41:41}],80:[function(t,n,r){var e=t(41),i=t(117),o=t(11)(!1),u=t(102)("IE_PROTO");n.exports=function(t,n){var r,c=i(t),a=0,f=[];for(r in c)r!=u&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~o(f,r)||f.push(r));return f}},{102:102,11:11,117:117,41:41}],81:[function(t,n,r){var e=t(80),i=t(31);n.exports=Object.keys||function keys(t){return e(t,i)}},{31:31,80:80}],82:[function(t,n,r){r.f={}.propertyIsEnumerable},{}],83:[function(t,n,r){var e=t(33),i=t(23),o=t(35);n.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},{23:23,33:33,35:35}],84:[function(t,n,r){var e=t(81),i=t(117),o=t(82).f;n.exports=function(t){return function(n){for(var r,u=i(n),c=e(u),a=c.length,f=0,s=[];a>f;)o.call(u,r=c[f++])&&s.push(t?[r,u[r]]:u[r]);return s}}},{117:117,81:81,82:82}],85:[function(t,n,r){var e=t(77),i=t(78),o=t(7),u=t(40).Reflect;n.exports=u&&u.ownKeys||function ownKeys(t){var n=e.f(o(t)),r=i.f;return r?n.concat(r(t)):n}},{40:40,7:7,77:77,78:78}],86:[function(t,n,r){var e=t(40).parseFloat,i=t(111).trim;n.exports=1/e(t(112)+"-0")!=-1/0?function parseFloat(t){var n=i(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},{111:111,112:112,40:40}],87:[function(t,n,r){var e=t(40).parseInt,i=t(111).trim,o=t(112),u=/^[-+]?0[xX]/;n.exports=8!==e(o+"08")||22!==e(o+"0x16")?function parseInt(t,n){var r=i(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},{111:111,112:112,40:40}],88:[function(t,n,r){"use strict";var e=t(89),i=t(46),o=t(3);n.exports=function(){for(var t=o(this),n=arguments.length,r=Array(n),u=0,c=e._,a=!1;n>u;)(r[u]=arguments[u++])===c&&(a=!0);return function(){var e,o=this,u=arguments.length,f=0,s=0;if(!a&&!u)return i(t,r,o);if(e=r.slice(),a)for(;n>f;f++)e[f]===c&&(e[f]=arguments[s++]);for(;u>s;)e.push(arguments[s++]);return i(t,e,o)}}},{3:3,46:46,89:89}],89:[function(t,n,r){n.exports=t(40)},{40:40}],90:[function(t,n,r){n.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,n,r){var e=t(69);n.exports=function(t,n){var r=e.f(t);return(0,r.resolve)(n),r.promise}},{69:69}],92:[function(t,n,r){n.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},{}],93:[function(t,n,r){var e=t(94);n.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},{94:94}],94:[function(t,n,r){var e=t(40),i=t(42),o=t(41),u=t(124)("src"),c=Function.toString,a=(""+c).split("toString");t(23).inspectSource=function(t){return c.call(t)},(n.exports=function(t,n,r,c){var f="function"==typeof r;f&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(f&&(o(r,u)||i(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function toString(){return"function"==typeof this&&this[u]||c.call(this)})},{124:124,23:23,40:40,41:41,42:42}],95:[function(t,n,r){n.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},{}],96:[function(t,n,r){n.exports=Object.is||function is(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},{}],97:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(25),u=t(39);n.exports=function(t){e(e.S,t,{from:function from(t){var n,r,e,c,a=arguments[1];return i(this),n=void 0!==a,n&&i(a),void 0==t?new this:(r=[],n?(e=0,c=o(a,arguments[2],2),u(t,!1,function(t){r.push(c(t,e++))})):u(t,!1,r.push,r),new this(r))}})}},{25:25,3:3,33:33,39:39}],98:[function(t,n,r){"use strict";var e=t(33);n.exports=function(t){e(e.S,t,{of:function of(){for(var t=arguments.length,n=Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},{33:33}],99:[function(t,n,r){var e=t(51),i=t(7),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,r,e){try{e=t(25)(Function.call,t(75).f(Object.prototype,"__proto__").set,2),e(n,[]),r=!(n instanceof Array)}catch(t){r=!0}return function setPrototypeOf(t,n){return o(t,n),r?t.__proto__=n:e(t,n),t}}({},!1):void 0),check:o}},{25:25,51:51,7:7,75:75}],100:[function(t,n,r){"use strict";var e=t(40),i=t(72),o=t(29),u=t(128)("species");n.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},{128:128,29:29,40:40,72:72}],101:[function(t,n,r){var e=t(72).f,i=t(41),o=t(128)("toStringTag");n.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},{128:128,41:41,72:72}],102:[function(t,n,r){var e=t(103)("keys"),i=t(124);n.exports=function(t){return e[t]||(e[t]=i(t))}},{103:103,124:124}],103:[function(t,n,r){var e=t(40),i=e["__core-js_shared__"]||(e["__core-js_shared__"]={});n.exports=function(t){return i[t]||(i[t]={})}},{40:40}],104:[function(t,n,r){var e=t(7),i=t(3),o=t(128)("species");n.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||void 0==(r=e(u)[o])?n:i(r)}},{128:128,3:3,7:7}],105:[function(t,n,r){"use strict";var e=t(35);n.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},{35:35}],106:[function(t,n,r){var e=t(116),i=t(28);n.exports=function(t){return function(n,r){var o,u,c=String(i(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(o=c.charCodeAt(a),o<55296||o>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536)}}},{116:116,28:28}],107:[function(t,n,r){var e=t(52),i=t(28);n.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},{28:28,52:52}],108:[function(t,n,r){var e=t(33),i=t(35),o=t(28),u=/"/g,c=function(t,n,r,e){var i=String(o(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};n.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",r)}},{28:28,33:33,35:35}],109:[function(t,n,r){var e=t(118),i=t(110),o=t(28);n.exports=function(t,n,r,u){var c=String(o(t)),a=c.length,f=void 0===r?" ":String(r),s=e(n);if(s<=a||""==f)return c;var l=s-a,h=i.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},{110:110,118:118,28:28}],110:[function(t,n,r){"use strict";var e=t(116),i=t(28);n.exports=function repeat(t){var n=String(i(this)),r="",o=e(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(r+=n);return r}},{116:116,28:28}],111:[function(t,n,r){var e=t(33),i=t(28),o=t(35),u=t(112),c="["+u+"]",a="​",f=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),l=function(t,n,r){var i={},c=o(function(){return!!u[t]()||a[t]()!=a}),f=i[t]=c?n(h):u[t];r&&(i[r]=f),e(e.P+e.F*c,"String",i)},h=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(f,"")),2&n&&(t=t.replace(s,"")),t};n.exports=l},{112:112,28:28,33:33,35:35}],112:[function(t,n,r){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],113:[function(t,n,r){var e,i,o,u=t(25),c=t(46),a=t(43),f=t(30),s=t(40),l=s.process,h=s.setImmediate,v=s.clearImmediate,p=s.MessageChannel,d=s.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){m.call(t.data)};h&&v||(h=function setImmediate(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return g[++y]=function(){c("function"==typeof t?t:Function(t),n)},e(y),y},v=function clearImmediate(t){delete g[t]},"process"==t(18)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:p?(i=new p,o=i.port2,i.port1.onmessage=b,e=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),n.exports={set:h,clear:v}},{18:18,25:25,30:30,40:40,43:43,46:46}],114:[function(t,n,r){var e=t(116),i=Math.max,o=Math.min;n.exports=function(t,n){return t=e(t),t<0?i(t+n,0):o(t,n)}},{116:116}],115:[function(t,n,r){var e=t(116),i=t(118);n.exports=function(t){if(void 0===t)return 0;var n=e(t),r=i(n);if(n!==r)throw RangeError("Wrong length!");return r}},{116:116,118:118}],116:[function(t,n,r){var e=Math.ceil,i=Math.floor;n.exports=function(t){return isNaN(t=+t)?0:(t>0?i:e)(t)}},{}],117:[function(t,n,r){var e=t(47),i=t(28);n.exports=function(t){return e(i(t))}},{28:28,47:47}],118:[function(t,n,r){var e=t(116),i=Math.min;n.exports=function(t){return t>0?i(e(t),9007199254740991):0}},{116:116}],119:[function(t,n,r){var e=t(28);n.exports=function(t){return Object(e(t))}},{28:28}],120:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},{51:51}],121:[function(t,n,r){"use strict";if(t(29)){var e=t(60),i=t(40),o=t(35),u=t(33),c=t(123),a=t(122),f=t(25),s=t(6),l=t(92),h=t(42),v=t(93),p=t(116),d=t(118),y=t(115),g=t(114),m=t(120),b=t(41),x=t(17),S=t(51),w=t(119),_=t(48),E=t(71),O=t(79),P=t(77).f,M=t(129),F=t(124),I=t(128),A=t(12),k=t(11),N=t(104),j=t(141),T=t(58),R=t(56),L=t(100),G=t(9),D=t(8),C=t(72),W=t(75),U=C.f,B=W.f,V=i.RangeError,z=i.TypeError,q=i.Uint8Array,K=Array.prototype,Y=a.ArrayBuffer,J=a.DataView,H=A(0),X=A(2),$=A(3),Z=A(4),Q=A(5),tt=A(6),nt=k(!0),rt=k(!1),et=j.values,it=j.keys,ot=j.entries,ut=K.lastIndexOf,ct=K.reduce,at=K.reduceRight,ft=K.join,st=K.sort,lt=K.slice,ht=K.toString,vt=K.toLocaleString,pt=I("iterator"),dt=I("toStringTag"),yt=F("typed_constructor"),gt=F("def_constructor"),mt=c.CONSTR,bt=c.TYPED,xt=c.VIEW,St=A(1,function(t,n){return Pt(N(t,t[gt]),n)}),wt=o(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),_t=!!q&&!!q.prototype.set&&o(function(){new q(1).set({})}),Et=function(t,n){var r=p(t);if(r<0||r%n)throw V("Wrong offset!");return r},Ot=function(t){if(S(t)&&bt in t)return t;throw z(t+" is not a typed array!")},Pt=function(t,n){if(!(S(t)&&yt in t))throw z("It is not a typed array constructor!");return new t(n)},Mt=function(t,n){return Ft(N(t,t[gt]),n)},Ft=function(t,n){for(var r=0,e=n.length,i=Pt(t,e);e>r;)i[r]=n[r++];return i},It=function(t,n,r){U(t,n,{get:function(){return this._d[r]}})},At=function from(t){var n,r,e,i,o,u,c=w(t),a=arguments.length,s=a>1?arguments[1]:void 0,l=void 0!==s,h=M(c);if(void 0!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(o=u.next()).done;n++)e.push(o.value);c=e}for(l&&a>2&&(s=f(s,arguments[2],2)),n=0,r=d(c.length),i=Pt(this,r);r>n;n++)i[n]=l?s(c[n],n):c[n];return i},kt=function of(){for(var t=0,n=arguments.length,r=Pt(this,n);n>t;)r[t]=arguments[t++];return r},Nt=!!q&&o(function(){vt.call(new q(1))}),jt=function toLocaleString(){return vt.apply(Nt?lt.call(Ot(this)):Ot(this),arguments)},Tt={copyWithin:function copyWithin(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function every(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function fill(t){return G.apply(Ot(this),arguments)},filter:function filter(t){return Mt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function find(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function findIndex(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function forEach(t){H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function indexOf(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function includes(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function join(t){return ft.apply(Ot(this),arguments)},lastIndexOf:function lastIndexOf(t){return ut.apply(Ot(this),arguments)},map:function map(t){return St(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function reduce(t){return ct.apply(Ot(this),arguments)},reduceRight:function reduceRight(t){return at.apply(Ot(this),arguments)},reverse:function reverse(){for(var t,n=this,r=Ot(n).length,e=Math.floor(r/2),i=0;i<e;)t=n[i],n[i++]=n[--r],n[r]=t;return n},some:function some(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function sort(t){return st.call(Ot(this),t)},subarray:function subarray(t,n){var r=Ot(this),e=r.length,i=g(t,e);return new(N(r,r[gt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,d((void 0===n?e:g(n,e))-i))}},Rt=function slice(t,n){return Mt(this,lt.call(Ot(this),t,n))},Lt=function set(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=w(t),i=d(e.length),o=0;if(i+n>r)throw V("Wrong length!");for(;o<i;)this[n+o]=e[o++]},Gt={entries:function entries(){return ot.call(Ot(this))},keys:function keys(){return it.call(Ot(this))},values:function values(){return et.call(Ot(this))}},Dt=function(t,n){return S(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ct=function getOwnPropertyDescriptor(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):B(t,n)},Wt=function defineProperty(t,n,r){return!(Dt(t,n=m(n,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?U(t,n,r):(t[n]=r.value,t)};mt||(W.f=Ct,C.f=Wt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Ct,defineProperty:Wt}),o(function(){ht.call({})})&&(ht=vt=function toString(){return ft.call(this)});var Ut=v({},Tt);v(Ut,Gt),h(Ut,pt,Gt.values),v(Ut,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:jt}),It(Ut,"buffer","b"),It(Ut,"byteOffset","o"),It(Ut,"byteLength","l"),It(Ut,"length","e"),U(Ut,dt,{get:function(){return this[bt]}}),n.exports=function(t,n,r,a){a=!!a;var f=t+(a?"Clamped":"")+"Array",l="get"+t,v="set"+t,p=i[f],g=p||{},m=p&&O(p),b=!p||!c.ABV,w={},_=p&&p.prototype,M=function(t,r){var e=t._d;return e.v[l](r*n+e.o,wt)},F=function(t,r,e){var i=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),i.v[v](r*n+i.o,e,wt)},I=function(t,n){U(t,n,{get:function(){return M(this,n)},set:function(t){return F(this,n,t)},enumerable:!0})};b?(p=r(function(t,r,e,i){s(t,p,f,"_d");var o,u,c,a,l=0,v=0;if(S(r)){if(!(r instanceof Y||"ArrayBuffer"==(a=x(r))||"SharedArrayBuffer"==a))return bt in r?Ft(p,r):At.call(p,r);o=r,v=Et(e,n);var g=r.byteLength;if(void 0===i){if(g%n)throw V("Wrong length!");if((u=g-v)<0)throw V("Wrong length!")}else if((u=d(i)*n)+v>g)throw V("Wrong length!");c=u/n}else c=y(r),u=c*n,o=new Y(u);for(h(t,"_d",{b:o,o:v,l:u,e:c,v:new J(o)});l<c;)I(t,l++)}),_=p.prototype=E(Ut),h(_,"constructor",p)):o(function(){p(1)})&&o(function(){new p(-1)})&&R(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=r(function(t,r,e,i){s(t,p,f);var o;return S(r)?r instanceof Y||"ArrayBuffer"==(o=x(r))||"SharedArrayBuffer"==o?void 0!==i?new g(r,Et(e,n),i):void 0!==e?new g(r,Et(e,n)):new g(r):bt in r?Ft(p,r):At.call(p,r):new g(y(r))}),H(m!==Function.prototype?P(g).concat(P(m)):P(g),function(t){t in p||h(p,t,g[t])}),p.prototype=_,e||(_.constructor=p));var A=_[pt],k=!!A&&("values"==A.name||void 0==A.name),N=Gt.values;h(p,yt,!0),h(_,bt,f),h(_,xt,!0),h(_,gt,p),(a?new p(1)[dt]==f:dt in _)||U(_,dt,{get:function(){return f}}),w[f]=p,u(u.G+u.W+u.F*(p!=g),w),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){g.of.call(p,1)}),f,{from:At,of:kt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,f,Tt),L(f),u(u.P+u.F*_t,f,{set:Lt}),u(u.P+u.F*!k,f,Gt),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*o(function(){new p(1).slice()}),f,{slice:Rt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!o(function(){_.toLocaleString.call([1,2])})),f,{toLocaleString:jt}),T[f]=k?A:N,e||k||h(_,pt,N)}}else n.exports=function(){}},{100:100,104:104,11:11,114:114,115:115,116:116,118:118,119:119,12:12,120:120,122:122,123:123,124:124,128:128,129:129,141:141,17:17,25:25,29:29,33:33,35:35,40:40,41:41,42:42,48:48,51:51,56:56,58:58,6:6,60:60,71:71,72:72,75:75,77:77,79:79,8:8,9:9,92:92,93:93}],122:[function(t,n,r){"use strict";function packIEEE754(t,n,r){var e,i,o,u=Array(r),c=8*r-n-1,a=(1<<c)-1,f=a>>1,s=23===n?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for(t=P(t),t!=t||t===E?(i=t!=t?1:0,e=a):(e=F(I(t)/A),t*(o=M(2,-e))<1&&(e--,o*=2),t+=e+f>=1?s/o:s*M(2,1-f),t*o>=2&&(e++,o/=2),e+f>=a?(i=0,e=a):e+f>=1?(i=(t*o-1)*M(2,n),e+=f):(i=t*M(2,f-1)*M(2,n),e=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(e=e<<n|i,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function unpackIEEE754(t,n,r){var e,i=8*r-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=r-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===o)return e?NaN:f?-E:E;e+=M(2,n),s-=u}return(f?-1:1)*e*M(2,s-n)}function unpackI32(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function packI8(t){return[255&t]}function packI16(t){return[255&t,t>>8&255]}function packI32(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function packF64(t){return packIEEE754(t,52,8)}function packF32(t){return packIEEE754(t,23,4)}function addGetter(t,n,r){d(t[m],n,{get:function(){return this[r]}})}function get(t,n,r,e){var i=+r,o=v(i);if(o+n>t[N])throw _(b);var u=t[k]._b,c=o+t[j],a=u.slice(c,c+n);return e?a:a.reverse()}function set(t,n,r,e,i,o){var u=+r,c=v(u);if(c+n>t[N])throw _(b);for(var a=t[k]._b,f=c+t[j],s=e(+i),l=0;l<n;l++)a[f+l]=s[o?l:n-l-1]}var e=t(40),i=t(29),o=t(60),u=t(123),c=t(42),a=t(93),f=t(35),s=t(6),l=t(116),h=t(118),v=t(115),p=t(77).f,d=t(72).f,y=t(9),g=t(101),m="prototype",b="Wrong index!",x=e.ArrayBuffer,S=e.DataView,w=e.Math,_=e.RangeError,E=e.Infinity,O=x,P=w.abs,M=w.pow,F=w.floor,I=w.log,A=w.LN2,k=i?"_b":"buffer",N=i?"_l":"byteLength",j=i?"_o":"byteOffset";if(u.ABV){if(!f(function(){x(1)})||!f(function(){new x(-1)})||f(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){x=function ArrayBuffer(t){return s(this,x),new O(v(t))};for(var T,R=x[m]=O[m],L=p(O),G=0;L.length>G;)(T=L[G++])in x||c(x,T,O[T]);o||(R.constructor=x)}var D=new S(new x(2)),C=S[m].setInt8;D.setInt8(0,2147483648),D.setInt8(1,2147483649),!D.getInt8(0)&&D.getInt8(1)||a(S[m],{setInt8:function setInt8(t,n){C.call(this,t,n<<24>>24)},setUint8:function setUint8(t,n){C.call(this,t,n<<24>>24)}},!0)}else x=function ArrayBuffer(t){s(this,x,"ArrayBuffer");var n=v(t);this._b=y.call(Array(n),0),this[N]=n},S=function DataView(t,n,r){s(this,S,"DataView"),s(t,x,"DataView");var e=t[N],i=l(n);if(i<0||i>e)throw _("Wrong offset!");if(r=void 0===r?e-i:h(r),i+r>e)throw _("Wrong length!");this[k]=t,this[j]=i,this[N]=r},i&&(addGetter(x,"byteLength","_l"),addGetter(S,"buffer","_b"),addGetter(S,"byteLength","_l"),addGetter(S,"byteOffset","_o")),a(S[m],{getInt8:function getInt8(t){return get(this,1,t)[0]<<24>>24},getUint8:function getUint8(t){return get(this,1,t)[0]},getInt16:function getInt16(t){var n=get(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function getUint16(t){var n=get(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function getInt32(t){return unpackI32(get(this,4,t,arguments[1]))},getUint32:function getUint32(t){return unpackI32(get(this,4,t,arguments[1]))>>>0},getFloat32:function getFloat32(t){return unpackIEEE754(get(this,4,t,arguments[1]),23,4)},getFloat64:function getFloat64(t){return unpackIEEE754(get(this,8,t,arguments[1]),52,8)},setInt8:function setInt8(t,n){set(this,1,t,packI8,n)},setUint8:function setUint8(t,n){set(this,1,t,packI8,n)},setInt16:function setInt16(t,n){set(this,2,t,packI16,n,arguments[2])},setUint16:function setUint16(t,n){set(this,2,t,packI16,n,arguments[2])},setInt32:function setInt32(t,n){set(this,4,t,packI32,n,arguments[2])},setUint32:function setUint32(t,n){set(this,4,t,packI32,n,arguments[2])},setFloat32:function setFloat32(t,n){set(this,4,t,packF32,n,arguments[2])},setFloat64:function setFloat64(t,n){set(this,8,t,packF64,n,arguments[2])}});g(x,"ArrayBuffer"),g(S,"DataView"),c(S[m],u.VIEW,!0),r.ArrayBuffer=x,r.DataView=S},{101:101,115:115,116:116,118:118,123:123,29:29,35:35,40:40,42:42,6:6,60:60,72:72,77:77,9:9,93:93}],123:[function(t,n,r){for(var e,i=t(40),o=t(42),u=t(124),c=u("typed_array"),a=u("view"),f=!(!i.ArrayBuffer||!i.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=i[h[l++]])?(o(e.prototype,c,!0),o(e.prototype,a,!0)):s=!1;n.exports={ABV:f,CONSTR:s,TYPED:c,VIEW:a}},{124:124,40:40,42:42}],124:[function(t,n,r){var e=0,i=Math.random();n.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+i).toString(36))}},{}],125:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},{51:51}],126:[function(t,n,r){var e=t(40),i=t(23),o=t(60),u=t(127),c=t(72).f;n.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},{127:127,23:23,40:40,60:60,72:72}],127:[function(t,n,r){r.f=t(128)},{128:128}],128:[function(t,n,r){var e=t(103)("wks"),i=t(124),o=t(40).Symbol,u="function"==typeof o;(n.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},{103:103,124:124,40:40}],129:[function(t,n,r){var e=t(17),i=t(128)("iterator"),o=t(58);n.exports=t(23).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[e(t)]}},{128:128,17:17,23:23,58:58}],130:[function(t,n,r){var e=t(33),i=t(95)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function escape(t){return i(t)}})},{33:33,95:95}],131:[function(t,n,r){var e=t(33);e(e.P,"Array",{copyWithin:t(8)}),t(5)("copyWithin")},{33:33,5:5,8:8}],132:[function(t,n,r){"use strict";var e=t(33),i=t(12)(4);e(e.P+e.F*!t(105)([].every,!0),"Array",{every:function every(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],133:[function(t,n,r){var e=t(33);e(e.P,"Array",{fill:t(9)}),t(5)("fill")},{33:33,5:5,9:9}],134:[function(t,n,r){"use strict";var e=t(33),i=t(12)(2);e(e.P+e.F*!t(105)([].filter,!0),"Array",{filter:function filter(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],135:[function(t,n,r){"use strict";var e=t(33),i=t(12)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),e(e.P+e.F*u,"Array",{findIndex:function findIndex(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)(o)},{12:12,33:33,5:5}],136:[function(t,n,r){"use strict";var e=t(33),i=t(12)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),e(e.P+e.F*o,"Array",{find:function find(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("find")},{12:12,33:33,5:5}],137:[function(t,n,r){"use strict";var e=t(33),i=t(12)(0),o=t(105)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function forEach(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],138:[function(t,n,r){"use strict";var e=t(25),i=t(33),o=t(119),u=t(53),c=t(48),a=t(118),f=t(24),s=t(129);i(i.S+i.F*!t(56)(function(t){Array.from(t)}),"Array",{from:function from(t){var n,r,i,l,h=o(t),v="function"==typeof this?this:Array,p=arguments.length,d=p>1?arguments[1]:void 0,y=void 0!==d,g=0,m=s(h);if(y&&(d=e(d,p>2?arguments[2]:void 0,2)),void 0==m||v==Array&&c(m))for(n=a(h.length),r=new v(n);n>g;g++)f(r,g,y?d(h[g],g):h[g]);else for(l=m.call(h),r=new v;!(i=l.next()).done;g++)f(r,g,y?u(l,d,[i.value,g],!0):i.value);return r.length=g,r}})},{118:118,119:119,129:129,24:24,25:25,33:33,48:48,53:53,56:56}],139:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!t(105)(o)),"Array",{indexOf:function indexOf(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},{105:105,11:11,33:33}],140:[function(t,n,r){var e=t(33);e(e.S,"Array",{isArray:t(49)})},{33:33,49:49}],141:[function(t,n,r){"use strict";var e=t(5),i=t(57),o=t(58),u=t(117);n.exports=t(55)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):"keys"==n?i(0,r):"values"==n?i(0,t[r]):i(0,[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},{117:117,5:5,55:55,57:57,58:58}],142:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=[].join;e(e.P+e.F*(t(47)!=Object||!t(105)(o)),"Array",{join:function join(t){return o.call(i(this),void 0===t?",":t)}})},{105:105,117:117,33:33,47:47}],143:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=t(116),u=t(118),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!t(105)(c)),"Array",{lastIndexOf:function lastIndexOf(t){if(a)return c.apply(this,arguments)||0;var n=i(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,o(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},{105:105,116:116,117:117,118:118,33:33}],144:[function(t,n,r){"use strict";var e=t(33),i=t(12)(1);e(e.P+e.F*!t(105)([].map,!0),"Array",{map:function map(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],145:[function(t,n,r){"use strict";var e=t(33),i=t(24);e(e.S+e.F*t(35)(function(){function F(){}return!(Array.of.call(F)instanceof F)}),"Array",{of:function of(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)i(r,t,arguments[t++]);return r.length=n,r}})},{24:24,33:33,35:35}],146:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduceRight,!0),"Array",{reduceRight:function reduceRight(t){return i(this,t,arguments.length,arguments[1],!0)}})},{105:105,13:13,33:33}],147:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduce,!0),"Array",{reduce:function reduce(t){return i(this,t,arguments.length,arguments[1],!1)}})},{105:105,13:13,33:33}],148:[function(t,n,r){"use strict";var e=t(33),i=t(43),o=t(18),u=t(114),c=t(118),a=[].slice;e(e.P+e.F*t(35)(function(){i&&a.call(i)}),"Array",{slice:function slice(t,n){var r=c(this.length),e=o(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var i=u(t,r),f=u(n,r),s=c(f-i),l=Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(i+h):this[i+h];return l}})},{114:114,118:118,18:18,33:33,35:35,43:43}],149:[function(t,n,r){"use strict";var e=t(33),i=t(12)(3);e(e.P+e.F*!t(105)([].some,!0),"Array",{some:function some(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],150:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(119),u=t(35),c=[].sort,a=[1,2,3];e(e.P+e.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!t(105)(c)),"Array",{sort:function sort(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},{105:105,119:119,3:3,33:33,35:35}],151:[function(t,n,r){t(100)("Array")},{100:100}],152:[function(t,n,r){var e=t(33);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},{33:33}],153:[function(t,n,r){var e=t(33),i=t(26);e(e.P+e.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},{26:26,33:33}],154:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120);e(e.P+e.F*t(35)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function toJSON(t){var n=i(this),r=o(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},{119:119,120:120,33:33,35:35}],155:[function(t,n,r){var e=t(128)("toPrimitive"),i=Date.prototype;e in i||t(42)(i,e,t(27))},{128:128,27:27,42:42}],156:[function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&t(94)(e,"toString",function toString(){var t=o.call(this);return t===t?i.call(this):"Invalid Date"})},{94:94}],157:[function(t,n,r){var e=t(33);e(e.P,"Function",{bind:t(16)})},{16:16,33:33}],158:[function(t,n,r){"use strict";var e=t(51),i=t(79),o=t(128)("hasInstance"),u=Function.prototype;o in u||t(72).f(u,o,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},{128:128,51:51,72:72,79:79}],159:[function(t,n,r){var e=t(72).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||t(29)&&e(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},{29:29,72:72}],160:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Map",function(t){return function Map(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function get(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function set(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},{125:125,19:19,22:22}],161:[function(t,n,r){var e=t(33),i=t(63),o=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function acosh(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},{33:33,63:63}],162:[function(t,n,r){function asinh(t){return isFinite(t=+t)&&0!=t?t<0?-asinh(-t):Math.log(t+Math.sqrt(t*t+1)):t}var e=t(33),i=Math.asinh;e(e.S+e.F*!(i&&1/i(0)>0),"Math",{asinh:asinh})},{33:33}],163:[function(t,n,r){var e=t(33),i=Math.atanh;e(e.S+e.F*!(i&&1/i(-0)<0),"Math",{atanh:function atanh(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{33:33}],164:[function(t,n,r){var e=t(33),i=t(65);e(e.S,"Math",{cbrt:function cbrt(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},{33:33,65:65}],165:[function(t,n,r){var e=t(33);e(e.S,"Math",{clz32:function clz32(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{33:33}],166:[function(t,n,r){var e=t(33),i=Math.exp;e(e.S,"Math",{cosh:function cosh(t){return(i(t=+t)+i(-t))/2}})},{33:33}],167:[function(t,n,r){var e=t(33),i=t(61);e(e.S+e.F*(i!=Math.expm1),"Math",{expm1:i})},{33:33,61:61}],168:[function(t,n,r){var e=t(33);e(e.S,"Math",{fround:t(62)})},{33:33,62:62}],169:[function(t,n,r){var e=t(33),i=Math.abs;e(e.S,"Math",{hypot:function hypot(t,n){for(var r,e,o=0,u=0,c=arguments.length,a=0;u<c;)r=i(arguments[u++]),a<r?(e=a/r,o=o*e*e+1,a=r):r>0?(e=r/a,o+=e*e):o+=r;return a===1/0?1/0:a*Math.sqrt(o)}})},{33:33}],170:[function(t,n,r){var e=t(33),i=Math.imul;e(e.S+e.F*t(35)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function imul(t,n){var r=+t,e=+n,i=65535&r,o=65535&e;return 0|i*o+((65535&r>>>16)*o+i*(65535&e>>>16)<<16>>>0)}})},{33:33,35:35}],171:[function(t,n,r){var e=t(33);e(e.S,"Math",{log10:function log10(t){return Math.log(t)*Math.LOG10E}})},{33:33}],172:[function(t,n,r){var e=t(33);e(e.S,"Math",{log1p:t(63)})},{33:33,63:63}],173:[function(t,n,r){var e=t(33);e(e.S,"Math",{log2:function log2(t){return Math.log(t)/Math.LN2}})},{33:33}],174:[function(t,n,r){var e=t(33);e(e.S,"Math",{sign:t(65)})},{33:33,65:65}],175:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S+e.F*t(35)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function sinh(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},{33:33,35:35,61:61}],176:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S,"Math",{tanh:function tanh(t){var n=i(t=+t),r=i(-t);return n==1/0?1:r==1/0?-1:(n-r)/(o(t)+o(-t))}})},{33:33,61:61}],177:[function(t,n,r){var e=t(33);e(e.S,"Math",{trunc:function trunc(t){return(t>0?Math.floor:Math.ceil)(t)}})},{33:33}],178:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(18),u=t(45),c=t(120),a=t(35),f=t(77).f,s=t(75).f,l=t(72).f,h=t(111).trim,v=e.Number,p=v,d=v.prototype,y="Number"==o(t(71)(d)),g="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){n=g?n.trim():h(n,3);var r,e,i,o=n.charCodeAt(0);if(43===o||45===o){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:e=2,i=49;break;case 79:case 111:e=8,i=55;break;default:return+n}for(var u,a=n.slice(2),f=0,s=a.length;f<s;f++)if((u=a.charCodeAt(f))<48||u>i)return NaN;return parseInt(a,e)}}return+n};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function Number(t){var n=arguments.length<1?0:t,r=this;return r instanceof v&&(y?a(function(){d.valueOf.call(r)}):"Number"!=o(r))?u(new p(m(n)),r,v):m(n)};for(var b,x=t(29)?f(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;x.length>S;S++)i(p,b=x[S])&&!i(v,b)&&l(v,b,s(p,b));v.prototype=d,d.constructor=v,t(94)(e,"Number",v)}},{111:111,120:120,18:18,29:29,35:35,40:40,41:41,45:45,71:71,72:72,75:75,77:77,94:94}],179:[function(t,n,r){var e=t(33);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},{33:33}],180:[function(t,n,r){var e=t(33),i=t(40).isFinite;e(e.S,"Number",{isFinite:function isFinite(t){return"number"==typeof t&&i(t)}})},{33:33,40:40}],181:[function(t,n,r){var e=t(33);e(e.S,"Number",{isInteger:t(50)})},{33:33,50:50}],182:[function(t,n,r){var e=t(33);e(e.S,"Number",{isNaN:function isNaN(t){return t!=t}})},{33:33}],183:[function(t,n,r){var e=t(33),i=t(50),o=Math.abs;e(e.S,"Number",{isSafeInteger:function isSafeInteger(t){return i(t)&&o(t)<=9007199254740991}})},{33:33,50:50}],184:[function(t,n,r){var e=t(33);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{33:33}],185:[function(t,n,r){var e=t(33);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{33:33}],186:[function(t,n,r){var e=t(33),i=t(86);e(e.S+e.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},{33:33,86:86}],187:[function(t,n,r){var e=t(33),i=t(87);e(e.S+e.F*(Number.parseInt!=i),"Number",{parseInt:i})},{33:33,87:87}],188:[function(t,n,r){"use strict";var e=t(33),i=t(116),o=t(4),u=t(110),c=1..toFixed,a=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*f[r],f[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=f[n],f[n]=a(r/t),r=r%t*1e7},v=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var r=String(f[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},p=function(t,n,r){return 0===n?r:n%2==1?p(t,n-1,r*t):p(t*t,n/2,r)},d=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(35)(function(){c.call({})})),"Number",{toFixed:function toFixed(t){var n,r,e,c,a=o(this,s),f=i(t),y="",g="0";if(f<0||f>20)throw RangeError(s);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(y="-",a=-a),a>1e-21)if(n=d(a*p(2,69,1))-69,r=n<0?a*p(2,-n,1):a/p(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=f;e>=7;)l(1e7,0),e-=7;for(l(p(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=v()}else l(0,r),l(1<<-n,0),g=v()+u.call("0",f);return f>0?(c=g.length,g=y+(c<=f?"0."+u.call("0",f-c)+g:g.slice(0,c-f)+"."+g.slice(c-f))):g=y+g,g}})},{110:110,116:116,33:33,35:35,4:4}],189:[function(t,n,r){"use strict";var e=t(33),i=t(35),o=t(4),u=1..toPrecision;e(e.P+e.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function toPrecision(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},{33:33,35:35,4:4}],190:[function(t,n,r){var e=t(33);e(e.S+e.F,"Object",{assign:t(70)})},{33:33,70:70}],191:[function(t,n,r){var e=t(33);e(e.S,"Object",{create:t(71)})},{33:33,71:71}],192:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperties:t(73)})},{29:29,33:33,73:73}],193:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperty:t(72).f})},{29:29,33:33,72:72}],194:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("freeze",function(t){return function freeze(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],195:[function(t,n,r){var e=t(117),i=t(75).f;t(83)("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(t,n){return i(e(t),n)}})},{117:117,75:75,83:83}],196:[function(t,n,r){t(83)("getOwnPropertyNames",function(){return t(76).f})},{76:76,83:83}],197:[function(t,n,r){var e=t(119),i=t(79);t(83)("getPrototypeOf",function(){return function getPrototypeOf(t){return i(e(t))}})},{119:119,79:79,83:83}],198:[function(t,n,r){var e=t(51);t(83)("isExtensible",function(t){return function isExtensible(n){return!!e(n)&&(!t||t(n))}})},{51:51,83:83}],199:[function(t,n,r){var e=t(51);t(83)("isFrozen",function(t){return function isFrozen(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],200:[function(t,n,r){var e=t(51);t(83)("isSealed",function(t){return function isSealed(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],201:[function(t,n,r){var e=t(33);e(e.S,"Object",{is:t(96)})},{33:33,96:96}],202:[function(t,n,r){var e=t(119),i=t(81);t(83)("keys",function(){return function keys(t){return i(e(t))}})},{119:119,81:81,83:83}],203:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("preventExtensions",function(t){return function preventExtensions(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],204:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("seal",function(t){return function seal(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],205:[function(t,n,r){var e=t(33);e(e.S,"Object",{setPrototypeOf:t(99).set})},{33:33,99:99}],206:[function(t,n,r){"use strict";var e=t(17),i={};i[t(128)("toStringTag")]="z",i+""!="[object z]"&&t(94)(Object.prototype,"toString",function toString(){return"[object "+e(this)+"]"},!0)},{128:128,17:17,94:94}],207:[function(t,n,r){var e=t(33),i=t(86);e(e.G+e.F*(parseFloat!=i),{parseFloat:i})},{33:33,86:86}],208:[function(t,n,r){var e=t(33),i=t(87);e(e.G+e.F*(parseInt!=i),{parseInt:i})},{33:33,87:87}],209:[function(t,n,r){"use strict";var e,i,o,u,c=t(60),a=t(40),f=t(25),s=t(17),l=t(33),h=t(51),v=t(3),p=t(6),d=t(39),y=t(104),g=t(113).set,m=t(68)(),b=t(69),x=t(90),S=t(91),w=a.TypeError,_=a.process,E=a.Promise,O="process"==s(_),P=function(){},M=i=b.f,F=!!function(){try{var n=E.resolve(1),r=(n.constructor={})[t(128)("species")]=function(t){t(P,P)};return(O||"function"==typeof PromiseRejectionEvent)&&n.then(P)instanceof r}catch(t){}}(),I=c?function(t,n){return t===n||t===E&&n===u}:function(t,n){return t===n},A=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},k=function(t,n){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var e=t._v,i=1==t._s,o=0;r.length>o;)!function(n){var r,o,u=i?n.ok:n.fail,c=n.resolve,a=n.reject,f=n.domain;try{u?(i||(2==t._h&&T(t),t._h=1),!0===u?r=e:(f&&f.enter(),r=u(e),f&&f.exit()),r===n.promise?a(w("Promise-chain cycle")):(o=A(r))?o.call(r,c,a):c(r)):a(e)}catch(t){a(t)}}(r[o++]);t._c=[],t._n=!1,n&&!t._h&&N(t)})}},N=function(t){g.call(a,function(){var n,r,e,i=t._v,o=j(t);if(o&&(n=x(function(){O?_.emit("unhandledRejection",i,t):(r=a.onunhandledrejection)?r({promise:t,reason:i}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=O||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){if(1==t._h)return!1;for(var n,r=t._a||t._c,e=0;r.length>e;)if(n=r[e++],n.fail||!j(n.promise))return!1;return!0},T=function(t){g.call(a,function(){var n;O?_.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},R=function(t){var n=this;n._d||(n._d=!0,n=n._w||n,n._v=t,n._s=2,n._a||(n._a=n._c.slice()),k(n,!0))},L=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw w("Promise can't be resolved itself");(n=A(t))?m(function(){var e={_w:r,_d:!1};try{n.call(t,f(L,e,1),f(R,e,1))}catch(t){R.call(e,t)}}):(r._v=t,r._s=1,k(r,!1))}catch(t){R.call({_w:r,_d:!1},t)}}};F||(E=function Promise(t){p(this,E,"Promise","_h"),v(t),e.call(this);try{t(f(L,this,1),f(R,this,1))}catch(t){R.call(this,t)}},e=function Promise(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},e.prototype=t(93)(E.prototype,{then:function then(t,n){var r=M(y(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=O?_.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&k(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=f(L,t,1),this.reject=f(R,t,1)},b.f=M=function(t){return I(E,t)?new o(t):i(t)}),l(l.G+l.W+l.F*!F,{Promise:E}),t(101)(E,"Promise"),t(100)("Promise"),u=t(23).Promise,l(l.S+l.F*!F,"Promise",{reject:function reject(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!F),"Promise",{resolve:function resolve(t){return t instanceof E&&I(t.constructor,this)?t:S(this,t)}}),l(l.S+l.F*!(F&&t(56)(function(t){E.all(t).catch(P)})),"Promise",{all:function all(t){var n=this,r=M(n),e=r.resolve,i=r.reject,o=x(function(){var r=[],o=0,u=1;d(t,!1,function(t){var c=o++,a=!1;r.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,r[c]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function race(t){var n=this,r=M(n),e=r.reject,i=x(function(){d(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},{100:100,101:101,104:104,113:113,128:128,17:17,23:23,25:25,3:3,33:33,39:39,40:40,51:51,56:56,6:6,60:60,68:68,69:69,90:90,91:91,93:93}],210:[function(t,n,r){var e=t(33),i=t(3),o=t(7),u=(t(40).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!t(35)(function(){u(function(){})}),"Reflect",{apply:function apply(t,n,r){var e=i(t),a=o(r);return u?u(e,n,a):c.call(e,n,a)}})},{3:3,33:33,35:35,40:40,7:7}],211:[function(t,n,r){var e=t(33),i=t(71),o=t(3),u=t(7),c=t(51),a=t(35),f=t(16),s=(t(40).Reflect||{}).construct,l=a(function(){function F(){}return!(s(function(){},[],F)instanceof F)}),h=!a(function(){s(function(){})});e(e.S+e.F*(l||h),"Reflect",{construct:function construct(t,n){o(t),u(n);var r=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(f.apply(t,e))}var a=r.prototype,v=i(c(a)?a:Object.prototype),p=Function.apply.call(t,v,n);return c(p)?p:v}})},{16:16,3:3,33:33,35:35,40:40,51:51,7:7,71:71}],212:[function(t,n,r){var e=t(72),i=t(33),o=t(7),u=t(120);i(i.S+i.F*t(35)(function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function defineProperty(t,n,r){o(t),n=u(n,!0),o(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},{120:120,33:33,35:35,7:7,72:72}],213:[function(t,n,r){var e=t(33),i=t(75).f,o=t(7);e(e.S,"Reflect",{deleteProperty:function deleteProperty(t,n){var r=i(o(t),n);return!(r&&!r.configurable)&&delete t[n]}})},{33:33,7:7,75:75}],214:[function(t,n,r){"use strict";var e=t(33),i=t(7),o=function(t){this._t=i(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};t(54)(o,"Object",function(){var t,n=this,r=n._k;do{if(n._i>=r.length)return{value:void 0,done:!0}}while(!((t=r[n._i++])in n._t));return{value:t,done:!1}}),e(e.S,"Reflect",{enumerate:function enumerate(t){return new o(t)}})},{33:33,54:54,7:7}],215:[function(t,n,r){var e=t(75),i=t(33),o=t(7);i(i.S,"Reflect",{getOwnPropertyDescriptor:function getOwnPropertyDescriptor(t,n){return e.f(o(t),n)}})},{33:33,7:7,75:75}],216:[function(t,n,r){var e=t(33),i=t(79),o=t(7);e(e.S,"Reflect",{getPrototypeOf:function getPrototypeOf(t){return i(o(t))}})},{33:33,7:7,79:79}],217:[function(t,n,r){function get(t,n){var r,u,f=arguments.length<3?t:arguments[2];return a(t)===f?t[n]:(r=e.f(t,n))?o(r,"value")?r.value:void 0!==r.get?r.get.call(f):void 0:c(u=i(t))?get(u,n,f):void 0}var e=t(75),i=t(79),o=t(41),u=t(33),c=t(51),a=t(7);u(u.S,"Reflect",{get:get})},{33:33,41:41,51:51,7:7,75:75,79:79}],218:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{has:function has(t,n){return n in t}})},{33:33}],219:[function(t,n,r){var e=t(33),i=t(7),o=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function isExtensible(t){return i(t),!o||o(t)}})},{33:33,7:7}],220:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{ownKeys:t(85)})},{33:33,85:85}],221:[function(t,n,r){var e=t(33),i=t(7),o=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function preventExtensions(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},{33:33,7:7}],222:[function(t,n,r){var e=t(33),i=t(99);i&&e(e.S,"Reflect",{setPrototypeOf:function setPrototypeOf(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},{33:33,99:99}],223:[function(t,n,r){function set(t,n,r){var c,l,h=arguments.length<4?t:arguments[3],v=i.f(f(t),n);if(!v){if(s(l=o(t)))return set(l,n,r,h);v=a(0)}return u(v,"value")?!(!1===v.writable||!s(h))&&(c=i.f(h,n)||a(0),c.value=r,e.f(h,n,c),!0):void 0!==v.set&&(v.set.call(h,r),!0)}var e=t(72),i=t(75),o=t(79),u=t(41),c=t(33),a=t(92),f=t(7),s=t(51);c(c.S,"Reflect",{set:set})},{33:33,41:41,51:51,7:7,72:72,75:75,79:79,92:92}],224:[function(t,n,r){var e=t(40),i=t(45),o=t(72).f,u=t(77).f,c=t(52),a=t(37),f=e.RegExp,s=f,l=f.prototype,h=/a/g,v=/a/g,p=new f(h)!==h;if(t(29)&&(!p||t(35)(function(){return v[t(128)("match")]=!1,f(h)!=h||f(v)==v||"/a/i"!=f(h,"i")}))){f=function RegExp(t,n){var r=this instanceof f,e=c(t),o=void 0===n;return!r&&e&&t.constructor===f&&o?t:i(p?new s(e&&!o?t.source:t,n):s((e=t instanceof f)?t.source:t,e&&o?a.call(t):n),r?this:l,f)};for(var d=u(s),y=0;d.length>y;)!function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})}(d[y++]);l.constructor=f,f.prototype=l,t(94)(e,"RegExp",f)}t(100)("RegExp")},{100:100,128:128,29:29,35:35,37:37,40:40,45:45,52:52,72:72,77:77,94:94}],225:[function(t,n,r){t(29)&&"g"!=/./g.flags&&t(72).f(RegExp.prototype,"flags",{configurable:!0,get:t(37)})},{29:29,37:37,72:72}],226:[function(t,n,r){t(36)("match",1,function(t,n,r){return[function match(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],227:[function(t,n,r){t(36)("replace",2,function(t,n,r){return[function replace(e,i){"use strict";var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},{36:36}],228:[function(t,n,r){t(36)("search",1,function(t,n,r){return[function search(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],229:[function(t,n,r){t(36)("split",2,function(n,r,e){"use strict";var i=t(52),o=e,u=[].push,c="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[c]||2!="ab".split(/(?:ab)*/)[c]||4!=".".split(/(.?)(.?)/)[c]||".".split(/()()/)[c]>1||"".split(/.?/)[c]){var a=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(r,t,n);var e,f,s,l,h,v=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,y=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,p+"g");for(a||(e=new RegExp("^"+g.source+"$(?!\\s)",p));(f=g.exec(r))&&!((s=f.index+f[0][c])>d&&(v.push(r.slice(d,f.index)),!a&&f[c]>1&&f[0].replace(e,function(){for(h=1;h<arguments[c]-2;h++)void 0===arguments[h]&&(f[h]=void 0)}),f[c]>1&&f.index<r[c]&&u.apply(v,f.slice(1)),l=f[0][c],d=s,v[c]>=y));)g.lastIndex===f.index&&g.lastIndex++;return d===r[c]?!l&&g.test("")||v.push(""):v.push(r.slice(d)),v[c]>y?v.slice(0,y):v}}else"0".split(void 0,0)[c]&&(e=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function split(t,i){var o=n(this),u=void 0==t?void 0:t[r];return void 0!==u?u.call(t,o,i):e.call(String(o),t,i)},e]})},{36:36,52:52}],230:[function(t,n,r){"use strict";t(225);var e=t(7),i=t(37),o=t(29),u=/./.toString,c=function(n){t(94)(RegExp.prototype,"toString",n,!0)};t(35)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function toString(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function toString(){return u.call(this)})},{225:225,29:29,35:35,37:37,7:7,94:94}],231:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Set",function(t){return function Set(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},{125:125,19:19,22:22}],232:[function(t,n,r){"use strict";t(108)("anchor",function(t){return function anchor(n){return t(this,"a","name",n)}})},{108:108}],233:[function(t,n,r){"use strict";t(108)("big",function(t){return function big(){return t(this,"big","","")}})},{108:108}],234:[function(t,n,r){"use strict";t(108)("blink",function(t){return function blink(){return t(this,"blink","","")}})},{108:108}],235:[function(t,n,r){"use strict";t(108)("bold",function(t){return function bold(){return t(this,"b","","")}})},{108:108}],236:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!1);e(e.P,"String",{codePointAt:function codePointAt(t){return i(this,t)}})},{106:106,33:33}],237:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".endsWith;e(e.P+e.F*t(34)("endsWith"),"String",{endsWith:function endsWith(t){var n=o(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=i(n.length),c=void 0===r?e:Math.min(i(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},{107:107,118:118,33:33,34:34}],238:[function(t,n,r){"use strict";t(108)("fixed",function(t){return function fixed(){return t(this,"tt","","")}})},{108:108}],239:[function(t,n,r){"use strict";t(108)("fontcolor",function(t){return function fontcolor(n){return t(this,"font","color",n)}})},{108:108}],240:[function(t,n,r){"use strict";t(108)("fontsize",function(t){return function fontsize(n){return t(this,"font","size",n)}})},{108:108}],241:[function(t,n,r){var e=t(33),i=t(114),o=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function fromCodePoint(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},{114:114,33:33}],242:[function(t,n,r){"use strict";var e=t(33),i=t(107);e(e.P+e.F*t(34)("includes"),"String",{includes:function includes(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},{107:107,33:33,34:34}],243:[function(t,n,r){"use strict";t(108)("italics",function(t){return function italics(){return t(this,"i","","")}})},{108:108}],244:[function(t,n,r){"use strict";var e=t(106)(!0);t(55)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},{106:106,55:55}],245:[function(t,n,r){"use strict";t(108)("link",function(t){return function link(n){return t(this,"a","href",n)}})},{108:108}],246:[function(t,n,r){var e=t(33),i=t(117),o=t(118);e(e.S,"String",{raw:function raw(t){for(var n=i(t.raw),r=o(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},{117:117,118:118,33:33}],247:[function(t,n,r){var e=t(33);e(e.P,"String",{repeat:t(110)})},{110:110,33:33}],248:[function(t,n,r){"use strict";t(108)("small",function(t){return function small(){return t(this,"small","","")}})},{108:108}],249:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".startsWith;e(e.P+e.F*t(34)("startsWith"),"String",{startsWith:function startsWith(t){var n=o(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},{107:107,118:118,33:33,34:34}],250:[function(t,n,r){"use strict";t(108)("strike",function(t){return function strike(){return t(this,"strike","","")}})},{108:108}],251:[function(t,n,r){"use strict";t(108)("sub",function(t){return function sub(){return t(this,"sub","","")}})},{108:108}],252:[function(t,n,r){"use strict";t(108)("sup",function(t){return function sup(){return t(this,"sup","","")}})},{108:108}],253:[function(t,n,r){"use strict";t(111)("trim",function(t){return function trim(){return t(this,3)}})},{111:111}],254:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(29),u=t(33),c=t(94),a=t(66).KEY,f=t(35),s=t(103),l=t(101),h=t(124),v=t(128),p=t(127),d=t(126),y=t(59),g=t(32),m=t(49),b=t(7),x=t(117),S=t(120),w=t(92),_=t(71),E=t(76),O=t(75),P=t(72),M=t(81),F=O.f,I=P.f,A=E.f,k=e.Symbol,N=e.JSON,j=N&&N.stringify,T=v("_hidden"),R=v("toPrimitive"),L={}.propertyIsEnumerable,G=s("symbol-registry"),D=s("symbols"),C=s("op-symbols"),W=Object.prototype,U="function"==typeof k,B=e.QObject,V=!B||!B.prototype||!B.prototype.findChild,z=o&&f(function(){return 7!=_(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=F(W,n);e&&delete W[n],I(t,n,r),e&&t!==W&&I(W,n,e)}:I,q=function(t){var n=D[t]=_(k.prototype);return n._k=t,n},K=U&&"symbol"==typeof k.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof k},Y=function defineProperty(t,n,r){return t===W&&Y(C,n,r),b(t),n=S(n,!0),b(r),i(D,n)?(r.enumerable?(i(t,T)&&t[T][n]&&(t[T][n]=!1),r=_(r,{enumerable:w(0,!1)})):(i(t,T)||I(t,T,w(1,{})),t[T][n]=!0),z(t,n,r)):I(t,n,r)},J=function defineProperties(t,n){b(t);for(var r,e=g(n=x(n)),i=0,o=e.length;o>i;)Y(t,r=e[i++],n[r]);return t},H=function create(t,n){return void 0===n?_(t):J(_(t),n)},X=function propertyIsEnumerable(t){var n=L.call(this,t=S(t,!0));return!(this===W&&i(D,t)&&!i(C,t))&&(!(n||!i(this,t)||!i(D,t)||i(this,T)&&this[T][t])||n)},$=function getOwnPropertyDescriptor(t,n){if(t=x(t),n=S(n,!0),t!==W||!i(D,n)||i(C,n)){var r=F(t,n);return!r||!i(D,n)||i(t,T)&&t[T][n]||(r.enumerable=!0),r}},Z=function getOwnPropertyNames(t){for(var n,r=A(x(t)),e=[],o=0;r.length>o;)i(D,n=r[o++])||n==T||n==a||e.push(n);return e},Q=function getOwnPropertySymbols(t){for(var n,r=t===W,e=A(r?C:x(t)),o=[],u=0;e.length>u;)!i(D,n=e[u++])||r&&!i(W,n)||o.push(D[n]);return o};U||(k=function Symbol(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===W&&n.call(C,r),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),z(this,t,w(1,r))};return o&&V&&z(W,t,{configurable:!0,set:n}),q(t)},c(k.prototype,"toString",function toString(){return this._k}),O.f=$,P.f=Y,t(77).f=E.f=Z,t(82).f=X,t(78).f=Q,o&&!t(60)&&c(W,"propertyIsEnumerable",X,!0),p.f=function(t){return q(v(t))}),u(u.G+u.W+u.F*!U,{Symbol:k});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;tt.length>nt;)v(tt[nt++]);for(var rt=M(v.store),et=0;rt.length>et;)d(rt[et++]);u(u.S+u.F*!U,"Symbol",{for:function(t){return i(G,t+="")?G[t]:G[t]=k(t)},keyFor:function keyFor(t){if(K(t))return y(G,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){V=!0},useSimple:function(){V=!1}}),u(u.S+u.F*!U,"Object",{create:H,defineProperty:Y,defineProperties:J,getOwnPropertyDescriptor:$,getOwnPropertyNames:Z,getOwnPropertySymbols:Q}),N&&u(u.S+u.F*(!U||f(function(){var t=k();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))})),"JSON",{stringify:function stringify(t){if(void 0!==t&&!K(t)){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);return n=e[1],"function"==typeof n&&(r=n),!r&&m(n)||(n=function(t,n){if(r&&(n=r.call(this,t,n)),!K(n))return n}),e[1]=n,j.apply(N,e)}}}),k.prototype[R]||t(42)(k.prototype,R,k.prototype.valueOf),l(k,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},{101:101,103:103,117:117,120:120,124:124,126:126,127:127,128:128,29:29,32:32,33:33,35:35,40:40,41:41,42:42,49:49,59:59,60:60,66:66,7:7,71:71,72:72,75:75,76:76,77:77,78:78,81:81,82:82,92:92,94:94}],255:[function(t,n,r){"use strict";var e=t(33),i=t(123),o=t(122),u=t(7),c=t(114),a=t(118),f=t(51),s=t(40).ArrayBuffer,l=t(104),h=o.ArrayBuffer,v=o.DataView,p=i.ABV&&s.isView,d=h.prototype.slice,y=i.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!i.CONSTR,"ArrayBuffer",{isView:function isView(t){return p&&p(t)||f(t)&&y in t}}),e(e.P+e.U+e.F*t(35)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function slice(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),i=c(void 0===n?r:n,r),o=new(l(this,h))(a(i-e)),f=new v(this),s=new v(o),p=0;e<i;)s.setUint8(p++,f.getUint8(e++));return o}}),t(100)("ArrayBuffer")},{100:100,104:104,114:114,118:118,122:122,123:123,33:33,35:35,40:40,51:51,7:7}],256:[function(t,n,r){var e=t(33);e(e.G+e.W+e.F*!t(123).ABV,{DataView:t(122).DataView})},{122:122,123:123,33:33}],257:[function(t,n,r){t(121)("Float32",4,function(t){return function Float32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],258:[function(t,n,r){t(121)("Float64",8,function(t){return function Float64Array(n,r,e){return t(this,n,r,e)}})},{121:121}],259:[function(t,n,r){t(121)("Int16",2,function(t){return function Int16Array(n,r,e){return t(this,n,r,e)}})},{121:121}],260:[function(t,n,r){t(121)("Int32",4,function(t){return function Int32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],261:[function(t,n,r){t(121)("Int8",1,function(t){return function Int8Array(n,r,e){return t(this,n,r,e)}})},{121:121}],262:[function(t,n,r){t(121)("Uint16",2,function(t){return function Uint16Array(n,r,e){return t(this,n,r,e)}})},{121:121}],263:[function(t,n,r){t(121)("Uint32",4,function(t){return function Uint32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],264:[function(t,n,r){t(121)("Uint8",1,function(t){return function Uint8Array(n,r,e){return t(this,n,r,e)}})},{121:121}],265:[function(t,n,r){t(121)("Uint8",1,function(t){return function Uint8ClampedArray(n,r,e){return t(this,n,r,e)}},!0)},{121:121}],266:[function(t,n,r){"use strict";var e,i=t(12)(0),o=t(94),u=t(66),c=t(70),a=t(21),f=t(51),s=t(35),l=t(125),h=u.getWeak,v=Object.isExtensible,p=a.ufstore,d={},y=function(t){return function WeakMap(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function get(t){if(f(t)){var n=h(t);return!0===n?p(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function set(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=n.exports=t(22)("WeakMap",y,g,a,!0,!0);s(function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)})&&(e=a.getConstructor(y,"WeakMap"),c(e.prototype,g),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,r=n[t];o(n,t,function(n,i){if(f(n)&&!v(n)){this._f||(this._f=new e);var o=this._f[t](n,i);return"set"==t?this:o}return r.call(this,n,i)})}))},{12:12,125:125,21:21,22:22,35:35,51:51,66:66,70:70,94:94}],267:[function(t,n,r){"use strict";var e=t(21),i=t(125);t(22)("WeakSet",function(t){return function WeakSet(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(t){return e.def(i(this,"WeakSet"),t,!0)}},e,!1,!0)},{125:125,21:21,22:22}],268:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(3),a=t(15);e(e.P,"Array",{flatMap:function flatMap(t){var n,r,e=o(this);return c(t),n=u(e.length),r=a(e,0),i(r,e,e,n,0,1,t,arguments[1]),r}}),t(5)("flatMap")},{118:118,119:119,15:15,3:3,33:33,38:38,5:5}],269:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(116),a=t(15);e(e.P,"Array",{flatten:function flatten(){var t=arguments[0],n=o(this),r=u(n.length),e=a(n,0);return i(e,n,n,r,0,void 0===t?1:c(t)),e}}),t(5)("flatten")},{116:116,118:118,119:119,15:15,33:33,38:38,5:5}],270:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!0);e(e.P,"Array",{includes:function includes(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("includes")},{11:11,33:33,5:5}],271:[function(t,n,r){var e=t(33),i=t(68)(),o=t(40).process,u="process"==t(18)(o);e(e.G,{asap:function asap(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},{18:18,33:33,40:40,68:68}],272:[function(t,n,r){var e=t(33),i=t(18);e(e.S,"Error",{isError:function isError(t){return"Error"===i(t)}})},{18:18,33:33}],273:[function(t,n,r){var e=t(33);e(e.G,{global:t(40)})},{33:33,40:40}],274:[function(t,n,r){t(97)("Map")},{97:97}],275:[function(t,n,r){t(98)("Map")},{98:98}],276:[function(t,n,r){var e=t(33);e(e.P+e.R,"Map",{toJSON:t(20)("Map")})},{20:20,33:33}],277:[function(t,n,r){var e=t(33);e(e.S,"Math",{clamp:function clamp(t,n,r){return Math.min(r,Math.max(n,t))}})},{33:33}],278:[function(t,n,r){var e=t(33);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},{33:33}],279:[function(t,n,r){var e=t(33),i=180/Math.PI;e(e.S,"Math",{degrees:function degrees(t){return t*i}})},{33:33}],280:[function(t,n,r){var e=t(33),i=t(64),o=t(62);e(e.S,"Math",{fscale:function fscale(t,n,r,e,u){return o(i(t,n,r,e,u))}})},{33:33,62:62,64:64}],281:[function(t,n,r){var e=t(33);e(e.S,"Math",{iaddh:function iaddh(t,n,r,e){var i=t>>>0,o=n>>>0,u=r>>>0;return o+(e>>>0)+((i&u|(i|u)&~(i+u>>>0))>>>31)|0}})},{33:33}],282:[function(t,n,r){var e=t(33);e(e.S,"Math",{imulh:function imulh(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>16,c=e>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},{33:33}],283:[function(t,n,r){var e=t(33);e(e.S,"Math",{isubh:function isubh(t,n,r,e){var i=t>>>0,o=n>>>0,u=r>>>0;return o-(e>>>0)-((~i&u|~(i^u)&i-u>>>0)>>>31)|0}})},{33:33}],284:[function(t,n,r){var e=t(33);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},{33:33}],285:[function(t,n,r){var e=t(33),i=Math.PI/180;e(e.S,"Math",{radians:function radians(t){return t*i}})},{33:33}],286:[function(t,n,r){var e=t(33);e(e.S,"Math",{scale:t(64)})},{33:33,64:64}],287:[function(t,n,r){var e=t(33);e(e.S,"Math",{signbit:function signbit(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},{33:33}],288:[function(t,n,r){var e=t(33);e(e.S,"Math",{umulh:function umulh(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>>16,c=e>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},{33:33}],289:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineGetter__:function __defineGetter__(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],290:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineSetter__:function __defineSetter__(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],291:[function(t,n,r){var e=t(33),i=t(84)(!0);e(e.S,"Object",{entries:function entries(t){return i(t)}})},{33:33,84:84}],292:[function(t,n,r){var e=t(33),i=t(85),o=t(117),u=t(75),c=t(24);e(e.S,"Object",{getOwnPropertyDescriptors:function getOwnPropertyDescriptors(t){for(var n,r,e=o(t),a=u.f,f=i(e),s={},l=0;f.length>l;)void 0!==(r=a(e,n=f[l++]))&&c(s,n,r);return s}})},{117:117,24:24,33:33,75:75,85:85}],293:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupGetter__:function __lookupGetter__(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],294:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupSetter__:function __lookupSetter__(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],295:[function(t,n,r){var e=t(33),i=t(84)(!1);e(e.S,"Object",{values:function values(t){return i(t)}})},{33:33,84:84}],296:[function(t,n,r){"use strict";var e=t(33),i=t(40),o=t(23),u=t(68)(),c=t(128)("observable"),a=t(3),f=t(7),s=t(6),l=t(93),h=t(42),v=t(39),p=v.RETURN,d=function(t){return null==t?void 0:a(t)},y=function(t){var n=t._c;n&&(t._c=void 0,n())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,y(t))},b=function(t,n){f(t),this._c=void 0,this._o=t,t=new x(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:a(r),this._c=r)}catch(n){return void t.error(n)}g(this)&&y(this)};b.prototype=l({},{unsubscribe:function unsubscribe(){m(this)}});var x=function(t){this._s=t};x.prototype=l({},{next:function next(t){var n=this._s;if(!g(n)){var r=n._o;try{var e=d(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function error(t){var n=this._s;if(g(n))throw t;var r=n._o;n._o=void 0;try{var e=d(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{y(n)}finally{throw t}}return y(n),t},complete:function complete(t){var n=this._s;if(!g(n)){var r=n._o;n._o=void 0;try{var e=d(r.complete);t=e?e.call(r,t):void 0}catch(t){try{y(n)}finally{throw t}}return y(n),t}}});var S=function Observable(t){s(this,S,"Observable","_f")._f=a(t)};l(S.prototype,{subscribe:function subscribe(t){return new b(t,this._f)},forEach:function forEach(t){var n=this;return new(o.Promise||i.Promise)(function(r,e){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),i.unsubscribe()}},error:e,complete:r})})}}),l(S,{from:function from(t){var n="function"==typeof this?this:S,r=d(f(t)[c]);if(r){var e=f(r.call(t));return e.constructor===n?e:new n(function(t){return e.subscribe(t)})}return new n(function(n){var r=!1;return u(function(){if(!r){try{if(v(t,!1,function(t){if(n.next(t),r)return p})===p)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}}),function(){r=!0}})},of:function of(){for(var t=0,n=arguments.length,r=Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var n=!1;return u(function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}}),function(){n=!0}})}}),h(S.prototype,c,function(){return this}),e(e.G,{Observable:S}),t(100)("Observable")},{100:100,128:128,23:23,3:3,33:33,39:39,40:40,42:42,6:6,68:68,7:7,93:93}],297:[function(t,n,r){"use strict";var e=t(33),i=t(23),o=t(40),u=t(104),c=t(91);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then(function(){return r})}:t,r?function(r){return c(n,t()).then(function(){throw r})}:t)}})},{104:104,23:23,33:33,40:40,91:91}],298:[function(t,n,r){"use strict";var e=t(33),i=t(69),o=t(90);e(e.S,"Promise",{try:function(t){var n=i.f(this),r=o(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},{33:33,69:69,90:90}],299:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.set;e.exp({defineMetadata:function defineMetadata(t,n,r,e){u(t,n,i(r),o(e))}})},{67:67,7:7}],300:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function deleteMetadata(t,n){var r=arguments.length<3?void 0:o(arguments[2]),e=u(i(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var a=c.get(n);return a.delete(r),!!a.size||c.delete(n)}})},{67:67,7:7}],301:[function(t,n,r){var e=t(231),i=t(10),o=t(67),u=t(7),c=t(79),a=o.keys,f=o.key,s=function(t,n){var r=a(t,n),o=c(t);if(null===o)return r;var u=s(o,n);return u.length?r.length?i(new e(r.concat(u))):u:r};o.exp({getMetadataKeys:function getMetadataKeys(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},{10:10,231:231,67:67,7:7,79:79}],302:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.get,a=e.key,f=function(t,n,r){if(u(t,n,r))return c(t,n,r);var e=o(n);return null!==e?f(t,e,r):void 0};e.exp({getMetadata:function getMetadata(t,n){return f(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},{67:67,7:7,79:79}],303:[function(t,n,r){var e=t(67),i=t(7),o=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function getOwnMetadataKeys(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},{67:67,7:7}],304:[function(t,n,r){var e=t(67),i=t(7),o=e.get,u=e.key;e.exp({getOwnMetadata:function getOwnMetadata(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],305:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.key,a=function(t,n,r){if(u(t,n,r))return!0;var e=o(n);return null!==e&&a(t,e,r)};e.exp({hasMetadata:function hasMetadata(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},{67:67,7:7,79:79}],306:[function(t,n,r){var e=t(67),i=t(7),o=e.has,u=e.key;e.exp({hasOwnMetadata:function hasOwnMetadata(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],307:[function(t,n,r){var e=t(67),i=t(7),o=t(3),u=e.key,c=e.set;e.exp({metadata:function metadata(t,n){return function decorator(r,e){c(t,n,(void 0!==e?i:o)(r),u(e))}}})},{3:3,67:67,7:7}],308:[function(t,n,r){t(97)("Set")},{97:97}],309:[function(t,n,r){t(98)("Set")},{98:98}],310:[function(t,n,r){var e=t(33);e(e.P+e.R,"Set",{toJSON:t(20)("Set")})},{20:20,33:33}],311:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!0);e(e.P,"String",{at:function at(t){return i(this,t)}})},{106:106,33:33}],312:[function(t,n,r){"use strict";var e=t(33),i=t(28),o=t(118),u=t(52),c=t(37),a=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};t(54)(f,"RegExp String",function next(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),e(e.P,"String",{matchAll:function matchAll(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in a?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=o(t.lastIndex),new f(e,n)}})},{118:118,28:28,33:33,37:37,52:52,54:54}],313:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padEnd:function padEnd(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},{109:109,33:33}],314:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padStart:function padStart(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},{109:109,33:33}],315:[function(t,n,r){"use strict";t(111)("trimLeft",function(t){return function trimLeft(){return t(this,1)}},"trimStart")},{111:111}],316:[function(t,n,r){"use strict";t(111)("trimRight",function(t){return function trimRight(){return t(this,2)}},"trimEnd")},{111:111}],317:[function(t,n,r){t(126)("asyncIterator")},{126:126}],318:[function(t,n,r){t(126)("observable")},{126:126}],319:[function(t,n,r){var e=t(33);e(e.S,"System",{global:t(40)})},{33:33,40:40}],320:[function(t,n,r){t(97)("WeakMap")},{97:97}],321:[function(t,n,r){t(98)("WeakMap")},{98:98}],322:[function(t,n,r){t(97)("WeakSet")},{97:97}],323:[function(t,n,r){t(98)("WeakSet")},{98:98}],324:[function(t,n,r){for(var e=t(141),i=t(81),o=t(94),u=t(40),c=t(42),a=t(58),f=t(128),s=f("iterator"),l=f("toStringTag"),h=a.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(v),d=0;d<p.length;d++){var y,g=p[d],m=v[g],b=u[g],x=b&&b.prototype;if(x&&(x[s]||c(x,s,h),x[l]||c(x,l,g),a[g]=h,m))for(y in e)x[y]||o(x,y,e[y],!0)}},{128:128,141:141,40:40,42:42,58:58,81:81,94:94}],325:[function(t,n,r){var e=t(33),i=t(113);e(e.G+e.B,{setImmediate:i.set,clearImmediate:i.clear})},{113:113,33:33}],326:[function(t,n,r){var e=t(40),i=t(33),o=t(46),u=t(88),c=e.navigator,a=!!c&&/MSIE .\./.test(c.userAgent),f=function(t){return a?function(n,r){return t(o(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),r)}:t};i(i.G+i.B+i.F*a,{setTimeout:f(e.setTimeout),setInterval:f(e.setInterval)})},{33:33,40:40,46:46,88:88}],327:[function(t,n,r){t(254),t(191),t(193),t(192),t(195),t(197),t(202),t(196),t(194),t(204),t(203),t(199),t(200),t(198),t(190),t(201),t(205),t(206),t(157),t(159),t(158),t(208),t(207),t(178),t(188),t(189),t(179),t(180),t(181),t(182),t(183),t(184),t(185),t(186),t(187),t(161),t(162),t(163),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(241),t(246),t(253),t(244),t(236),t(237),t(242),t(247),t(249),t(232),t(233),t(234),t(235),t(238),t(239),t(240),t(243),t(245),t(248),t(250),t(251),t(252),t(152),t(154),t(153),t(156),t(155),t(140),t(138),t(145),t(142),t(148),t(150),t(137),t(144),t(134),t(149),t(132),t(147),t(146),t(139),t(143),t(131),t(133),t(136),t(135),t(151),t(141),t(224),t(230),t(225),t(226),t(227),t(228),t(229),t(209),t(160),t(231),t(266),t(267),t(255),t(256),t(261),t(264),t(265),t(259),t(262),t(260),t(263),t(257),t(258),t(210),t(211),t(212),t(213),t(214),t(217),t(215),t(216),t(218),t(219),t(220),t(221),t(223),t(222),t(270),t(268),t(269),t(311),t(314),t(313),t(315),t(316),t(312),t(317),t(318),t(292),t(295),t(291),t(289),t(290),t(293),t(294),t(276),t(310),t(275),t(309),t(321),t(323),t(274),t(308),t(320),t(322),t(273),t(319),t(272),t(277),t(278),t(279),t(280),t(281),t(283),t(282),t(284),t(285),t(286),t(288),t(287),t(297),t(298),t(299),t(300),t(302),t(301),t(304),t(303),t(305),t(306),t(307),t(271),t(296),t(326),t(325),t(324),n.exports=t(23)},{131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,23:23,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326}],328:[function(t,n,r){(function(t){!function(t){"use strict";function wrap(t,n,r,e){var i=n&&n.prototype instanceof Generator?n:Generator,o=Object.create(i.prototype),u=new Context(e||[]);return o._invoke=makeInvokeMethod(t,r,u),o}function tryCatch(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function AsyncIterator(n){function invoke(t,r,e,o){var u=tryCatch(n[t],n,r);if("throw"!==u.type){var c=u.arg,a=c.value;return a&&"object"==typeof a&&i.call(a,"__await")?Promise.resolve(a.__await).then(function(t){invoke("next",t,e,o)},function(t){invoke("throw",t,e,o)}):Promise.resolve(a).then(function(t){c.value=t,e(c)},o)}o(u.arg)}function enqueue(t,n){function callInvokeWithMethodAndArg(){return new Promise(function(r,e){invoke(t,n,r,e)})}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}"object"==typeof t.process&&t.process.domain&&(invoke=t.process.domain.bind(invoke));var r;this._invoke=enqueue}function makeInvokeMethod(t,n,r){var e=l;return function invoke(i,o){if(e===v)throw new Error("Generator is already running");if(e===p){if("throw"===i)throw o;return doneResult()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var c=maybeInvokeDelegate(u,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=v;var a=tryCatch(t,n,r);if("normal"===a.type){if(e=r.done?p:h,a.arg===d)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(e=p,r.method="throw",r.arg=a.arg)}}}function maybeInvokeDelegate(t,n){var e=t.iterator[n.method];if(e===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=r,maybeInvokeDelegate(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=tryCatch(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=r),n.delegate=null,d):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function pushTryEntry(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function resetTryEntry(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,o=function next(){for(;++e<t.length;)if(i.call(t,e))return next.value=t[e],next.done=!1,next;return next.value=r,next.done=!0,next};return o.next=o}}return{next:doneResult}}function doneResult(){return{value:r,done:!0}}var r,e=Object.prototype,i=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof n,s=t.regeneratorRuntime;if(s)return void(f&&(n.exports=s));s=t.regeneratorRuntime=f?n.exports:{},s.wrap=wrap;var l="suspendedStart",h="suspendedYield",v="executing",p="completed",d={},y={};y[u]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(values([])));m&&m!==e&&i.call(m,u)&&(y=m);var b=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(y);GeneratorFunction.prototype=b.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[a]=GeneratorFunction.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===GeneratorFunction||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[c]=function(){return this},s.AsyncIterator=AsyncIterator,s.async=function(t,n,r,e){var i=new AsyncIterator(wrap(t,n,r,e));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},defineIteratorMethods(b),b[a]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function next(){for(;n.length;){var r=n.pop();if(r in t)return next.value=r,next.done=!1,next}return next.done=!0,next}},s.values=values,Context.prototype={constructor:Context,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(resetTryEntry),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0],n=t.completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(t){function handle(e,i){return u.type="throw",u.arg=t,n.next=e,i&&(n.method="next",n.arg=r),!!i}if(this.done)throw t;for(var n=this,e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e],u=o.completion;if("root"===o.tryLoc)return handle("end");if(o.tryLoc<=this.prev){var c=i.call(o,"catchLoc"),a=i.call(o,"finallyLoc");if(c&&a){if(this.prev<o.catchLoc)return handle(o.catchLoc,!0);if(this.prev<o.finallyLoc)return handle(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return handle(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return handle(o.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var o=e;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;resetTryEntry(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:values(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=r),d}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);</script></1e-8?t-t*t></1e-6?t+t*t></22025.465794806718||-2e-17!=e(-2e-17)?function></a;){if(y></0?"-":n></n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return></2)for(;;){if(h></c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s--></r.length;o++)s(r[o]);return>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/README.html"/>
      <url>/node_modules/babel-runtime/README.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js.js"/>
      <url>/node_modules/babel-runtime/core-js.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = {  "default": require("core-js/library"),  __esModule: true};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/package.json"/>
      <url>/node_modules/babel-runtime/package.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"babel-runtime","version":"6.26.0","description":"babel selfContained runtime","license":"MIT","repository":"https://github.com/babel/babel/tree/master/packages/babel-runtime","author":"Sebastian McKenzie <sebmck@gmail.com>","dependencies":{"core-js":"^2.4.0","regenerator-runtime":"^0.11.0"},"devDependencies":{"babel-helpers":"^6.22.0","babel-plugin-transform-runtime":"^6.23.0"},"__npminstall_done":true,"_from":"babel-runtime@6.26.0","_resolved":"https://registry.npmmirror.com/babel-runtime/-/babel-runtime-6.26.0.tgz"}</sebmck@gmail.com>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/package-lock.json"/>
      <url>/node_modules/babel-runtime/package-lock.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"babel-runtime","version":"6.23.0","lockfileVersion":1,"requires":true,"dependencies":{"ansi-regex":{"version":"2.1.1","resolved":"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz","integrity":"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=","dev":true},"ansi-styles":{"version":"2.2.1","resolved":"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz","integrity":"sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=","dev":true},"babel-code-frame":{"version":"6.22.0","resolved":"https://registry.npmjs.org/babel-code-frame/-/babel-code-frame-6.22.0.tgz","integrity":"sha1-AnYgvuVnqIwyVhV05/0IAdMxGOQ=","dev":true,"requires":{"chalk":"1.1.3","esutils":"2.0.2","js-tokens":"3.0.2"}},"babel-helpers":{"version":"6.24.1","resolved":"https://registry.npmjs.org/babel-helpers/-/babel-helpers-6.24.1.tgz","integrity":"sha1-NHHenK7DiOXIUOWX5Yom3fN2ArI=","dev":true,"requires":{"babel-runtime":"6.25.0","babel-template":"6.25.0"}},"babel-messages":{"version":"6.23.0","resolved":"https://registry.npmjs.org/babel-messages/-/babel-messages-6.23.0.tgz","integrity":"sha1-8830cDhYA1sqKVHG7F7fbGLyYw4=","dev":true,"requires":{"babel-runtime":"6.25.0"}},"babel-plugin-transform-runtime":{"version":"6.23.0","resolved":"https://registry.npmjs.org/babel-plugin-transform-runtime/-/babel-plugin-transform-runtime-6.23.0.tgz","integrity":"sha1-iEkNRGUC6puOfvsP4J7E2ZR5se4=","dev":true,"requires":{"babel-runtime":"6.25.0"}},"babel-runtime":{"version":"6.25.0","resolved":"https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.25.0.tgz","integrity":"sha1-M7mOql1IK7AajRqmtDetKwGuxBw=","dev":true,"requires":{"core-js":"2.5.0"}},"babel-template":{"version":"6.25.0","resolved":"https://registry.npmjs.org/babel-template/-/babel-template-6.25.0.tgz","integrity":"sha1-ZlJBFmt8KqTGGdceGSlpVSsQwHE=","dev":true,"requires":{"babel-runtime":"6.25.0","babel-traverse":"6.25.0","babel-types":"6.25.0","babylon":"6.18.0","lodash":"4.17.4"}},"babel-traverse":{"version":"6.25.0","resolved":"https://registry.npmjs.org/babel-traverse/-/babel-traverse-6.25.0.tgz","integrity":"sha1-IldJfi/NGbie3BPEyROB+VEklvE=","dev":true,"requires":{"babel-code-frame":"6.22.0","babel-messages":"6.23.0","babel-runtime":"6.25.0","babel-types":"6.25.0","babylon":"6.18.0","debug":"2.6.8","globals":"9.18.0","invariant":"2.2.2","lodash":"4.17.4"}},"babel-types":{"version":"6.25.0","resolved":"https://registry.npmjs.org/babel-types/-/babel-types-6.25.0.tgz","integrity":"sha1-cK+ySNVmDl0Y+BHZHIMDtUE0oY4=","dev":true,"requires":{"babel-runtime":"6.25.0","esutils":"2.0.2","lodash":"4.17.4","to-fast-properties":"1.0.3"}},"babylon":{"version":"6.18.0","resolved":"https://registry.npmjs.org/babylon/-/babylon-6.18.0.tgz","integrity":"sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==","dev":true},"chalk":{"version":"1.1.3","resolved":"https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz","integrity":"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=","dev":true,"requires":{"ansi-styles":"2.2.1","escape-string-regexp":"1.0.5","has-ansi":"2.0.0","strip-ansi":"3.0.1","supports-color":"2.0.0"}},"core-js":{"version":"2.5.0","resolved":"https://registry.npmjs.org/core-js/-/core-js-2.5.0.tgz","integrity":"sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="},"debug":{"version":"2.6.8","resolved":"https://registry.npmjs.org/debug/-/debug-2.6.8.tgz","integrity":"sha1-5zFTHKLt4n0YgiJCfaF4IdaP9Pw=","dev":true,"requires":{"ms":"2.0.0"}},"escape-string-regexp":{"version":"1.0.5","resolved":"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz","integrity":"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=","dev":true},"esutils":{"version":"2.0.2","resolved":"https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz","integrity":"sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=","dev":true},"globals":{"version":"9.18.0","resolved":"https://registry.npmjs.org/globals/-/globals-9.18.0.tgz","integrity":"sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==","dev":true},"has-ansi":{"version":"2.0.0","resolved":"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz","integrity":"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=","dev":true,"requires":{"ansi-regex":"2.1.1"}},"invariant":{"version":"2.2.2","resolved":"https://registry.npmjs.org/invariant/-/invariant-2.2.2.tgz","integrity":"sha1-nh9WrArNtr8wMwbzOL47IErmA2A=","dev":true,"requires":{"loose-envify":"1.3.1"}},"js-tokens":{"version":"3.0.2","resolved":"https://registry.npmjs.org/js-tokens/-/js-tokens-3.0.2.tgz","integrity":"sha1-mGbfOVECEw449/mWvOtlRDIJwls=","dev":true},"lodash":{"version":"4.17.4","resolved":"https://registry.npmjs.org/lodash/-/lodash-4.17.4.tgz","integrity":"sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=","dev":true},"loose-envify":{"version":"1.3.1","resolved":"https://registry.npmjs.org/loose-envify/-/loose-envify-1.3.1.tgz","integrity":"sha1-0aitM/qc4OcT1l/dCsi3SNR4yEg=","dev":true,"requires":{"js-tokens":"3.0.2"}},"ms":{"version":"2.0.0","resolved":"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz","integrity":"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=","dev":true},"regenerator-runtime":{"version":"0.11.0","resolved":"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.0.tgz","integrity":"sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="},"strip-ansi":{"version":"3.0.1","resolved":"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz","integrity":"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=","dev":true,"requires":{"ansi-regex":"2.1.1"}},"supports-color":{"version":"2.0.0","resolved":"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz","integrity":"sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=","dev":true},"to-fast-properties":{"version":"1.0.3","resolved":"https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-1.0.3.tgz","integrity":"sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=","dev":true}}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/common/constant.js"/>
      <url>/node_modules/hexo-tag-aplayer/common/constant.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});var APLAYER_TAG_MARKER = exports.APLAYER_TAG_MARKER = 'aplayer-tag-marker';var APLAYER_SCRIPT_MARKER = exports.APLAYER_SCRIPT_MARKER = 'aplayer-script-marker';var APLAYER_SECONDARY_SCRIPT_MARKER = exports.APLAYER_SECONDARY_SCRIPT_MARKER = 'aplayer-secondary-script-marker';var APLAYER_STYLE_MARKER = exports.APLAYER_STYLE_MARKER = 'aplayer-style-marker';var APLAYER_SECONDARY_STYLE_MARKER = exports.APLAYER_SECONDARY_STYLE_MARKER = 'aplayer-secondary-style-marker';var METING_TAG_MARKER = exports.METING_TAG_MARKER = 'meting-tag-marker';var METING_SCRIPT_MARKER = exports.METING_SCRIPT_MARKER = 'meting-script-marker';var METING_SECONDARY_SCRIPT_MARKER = exports.METING_SECONDARY_SCRIPT_MARKER = 'meting-secondary-script-marker';var PLAYER_TAG_OPTION = exports.PLAYER_TAG_OPTION = {  title: '', author: '', url: '', pic: '',  narrow: false, autoplay: false, width: '',  lrcOption: false, lrcPath: ''};var METING_TAG_OPTION = exports.METING_TAG_OPTION = {  id: '', server: '', type: '', mode: 'circulation',  autoplay: false, mutex: true, listmaxheight: '340px',  preload: 'auto', theme: '#ad7a86'};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/common/util.js"/>
      <url>/node_modules/hexo-tag-aplayer/common/util.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});var escapeRegExp = function escapeRegExp(str) {  return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");};var generateRandomString = exports.generateRandomString = function generateRandomString(length) {  var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';  return Array.apply(null, { length: length }).map(function () {    return ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));  }).join('');};var throwError = exports.throwError = function throwError(message) {  throw new Error('[hexo-tag-aplayer] ' + message);};var clone = exports.clone = function clone(object) {  return JSON.parse(JSON.stringify(object));};var extractOptionValue = exports.extractOptionValue = function extractOptionValue(pair) {  return pair.slice(pair.indexOf(':') + 1);};var removeAll = exports.removeAll = function removeAll(target, find) {  return target.replace(new RegExp(escapeRegExp(find), 'g'), '');};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/docs/README-zh_cn.html"/>
      <url>/node_modules/hexo-tag-aplayer/docs/README-zh_cn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-tag-aplayer"><a href="#hexo-tag-aplayer" class="headerlink" title="hexo-tag-aplayer"></a>hexo-tag-aplayer</h1><p><img src="https://img.shields.io/npm/v/hexo-tag-aplayer.svg" alt="npm">  <img src="https://img.shields.io/npm/l/hexo-tag-aplayer.svg" alt="npm"></p><p><a href="https://github.com/MoePlayer/APlayer">APlayer</a> 播放器的 Hexo 标签插件（现已支持 <a href="https://github.com/metowolf/MetingJS">MetingJS</a>）。</p><!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E4%BE%9D%E8%B5%96">依赖</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a><ul><li><a href="#%E6%A0%87%E7%AD%BE%E5%8F%82%E6%95%B0">标签参数</a></li><li><a href="#%E6%AD%8C%E8%AF%8D%E6%A0%87%E7%AD%BE">歌词标签</a></li><li><a href="#%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8">播放列表</a></li><li><a href="#meingjs-%E6%94%AF%E6%8C%81-30-%E6%96%B0%E5%8A%9F%E8%83%BD">MeingJS 支持 (3.0 新功能)</a></li><li><a href="#pjax-%E5%85%BC%E5%AE%B9">PJAX 兼容</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%EF%BC%8830-%E6%96%B0%E5%8A%9F%E8%83%BD%EF%BC%89">自定义配置（3.0 新功能）</a></li><li><a href="#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4">故障排除</a><ul><li><a href="#%E6%A0%87%E7%AD%BE%E5%8F%82%E6%95%B0%E7%A9%BA%E6%A0%BC%E9%97%AE%E9%A2%98">标签参数空格问题</a></li><li><a href="#%E9%87%8D%E5%A4%8D%E8%BD%BD%E5%85%A5-aplayerjs-%E8%B5%84%E6%BA%90%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98">重复载入 Aplayer.js 资源脚本问题</a></li></ul></li><li><a href="#license">LICENSE</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><p><img src="http://7jpp1d.com1.z0.glb.clouddn.com/QQ20160202-5.png" alt="plugin screenshot"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><h3 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h3><ul><li><code>title</code> : 曲目标题</li><li><code>author</code>: 曲目作者</li><li><code>url</code>: 音乐文件 URL 地址</li><li><code>picture_url</code>: (可选) 音乐对应的图片地址</li><li><code>narrow</code>: （可选）播放器袖珍风格</li><li><code>autoplay</code>:  (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li><code>width:xxx</code>: (可选) 播放器宽度 (默认: 100%)</li><li><code>lrc:xxx</code>: （可选）歌词文件 URL 地址</li></ul><p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="歌词标签"><a href="#歌词标签" class="headerlink" title="歌词标签"></a>歌词标签</h3><p>除了使用标签 <code>lrc</code> 选项来设定歌词，你也可以直接使用 <code>aplayerlrc</code> 标签来直接插入歌词文本在博客中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class="line">[00:00.00]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure><h3 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;narrow&quot;: false,                          // （可选）播放器袖珍风格</span><br><span class="line">    &quot;autoplay&quot;: true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">    &quot;mode&quot;: &quot;random&quot;,                         // （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27; </span><br><span class="line">    &quot;showlrc&quot;: 3,                             // （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class="line">    &quot;mutex&quot;: true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">    &quot;theme&quot;: &quot;#e6d0b2&quot;,                      // （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class="line">    &quot;preload&quot;: &quot;metadata&quot;,                    // （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span><br><span class="line">    &quot;listmaxheight&quot;: &quot;513px&quot;,                 // (可选) 该播放列表的最大长度</span><br><span class="line">    &quot;music&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;CoCo&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure><h3 id="MeingJS-支持-3-0-新功能"><a href="#MeingJS-支持-3-0-新功能" class="headerlink" title="MeingJS 支持 (3.0 新功能)"></a>MeingJS 支持 (3.0 新功能)</h3><p><a href="https://github.com/metowolf/MetingJS">MetingJS</a> 是基于<a href="https://github.com/metowolf/Meting">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接着就可以通过 <code>&#123;% meting ...%&#125;</code> 在文章中使用 MetingJS 播放器了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进阶示例 --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p>有关  <code>&#123;% meting %&#125;</code>  的选项列表如下:</p><div class="table-container"><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table></div><p>关于如何设置自建的 Meting API 服务器地址，以及其他 MetingJS 配置，请参考章节<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE30-%E6%96%B0%E5%8A%9F%E8%83%BD">自定义配置</a></p><h3 id="PJAX-兼容"><a href="#PJAX-兼容" class="headerlink" title="PJAX 兼容"></a>PJAX 兼容</h3><p>若在 Hexo 中使用了 PJAX，可能需要自己手动清理 APlayer 全局实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;pjax:start&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">aplayers</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">window</span>.<span class="property">aplayers</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">aplayers</span>[i].<span class="title function_">destroy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">aplayers</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="自定义配置（3-0-新功能）"><a href="#自定义配置（3-0-新功能）" class="headerlink" title="自定义配置（3.0 新功能）"></a>自定义配置（3.0 新功能）</h2><p>现在你可以在 Hexo 配置文件  <code>_config.yml</code> 中配置本插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">script_dir:</span> <span class="string">some/place</span>                        <span class="comment"># Public 目录下脚本目录路径，默认: &#x27;assets/js&#x27;</span></span><br><span class="line">  <span class="attr">style_dir:</span> <span class="string">some/place</span>                         <span class="comment"># Public 目录下样式目录路径，默认: &#x27;assets/css&#x27;</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">http://xxx/aplayer.min.js</span>                <span class="comment"># 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span></span><br><span class="line">  <span class="attr">style_cdn:</span> <span class="string">http://xxx/aplayer.min.css</span>         <span class="comment"># 引用 APlayer.css 外部 CDN 地址 (默认不开启)</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span>                                  <span class="comment"># MetingJS 支持</span></span><br><span class="line">  <span class="attr">meting_api:</span> <span class="string">http://xxx/api.php</span>                <span class="comment"># 自定义 Meting API 地址</span></span><br><span class="line">  <span class="attr">meting_cdn:</span> <span class="string">http://xxx/Meing.min.js</span>           <span class="comment"># 引用 Meting.js 外部 CDN 地址 (默认不开启)</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">true</span>                            <span class="comment"># 自动插入 Aplayer.js 与 Meting.js 资源脚本, 默认开启</span></span><br><span class="line">  <span class="attr">externalLink:</span> <span class="string">http://xxx/aplayer.min.js</span>       <span class="comment"># 老版本参数，功能与参数 cdn 相同</span></span><br></pre></td></tr></table></figure><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="标签参数空格问题"><a href="#标签参数空格问题" class="headerlink" title="标签参数空格问题"></a>标签参数空格问题</h3><p>在 Hexo 标签中，用户可能无法直接在标签参数中<a href="https://github.com/hexojs/hexo/issues/1455">加入空格</a></p><p>如果遇到这类问题，请直接将参数用双引号括起来使用，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;autoplay&quot; &quot;width:70%&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="重复载入-Aplayer-js-资源脚本问题"><a href="#重复载入-Aplayer-js-资源脚本问题" class="headerlink" title="重复载入 Aplayer.js 资源脚本问题"></a>重复载入 Aplayer.js 资源脚本问题</h3><p>本插件通过 <code>after_render:html</code>过滤器 , 将 <code>APlayer.js</code> 和 <code>Meting.js</code> 插入到使用了本插件标签 的 HTML 文件中:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/aplayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是 <code>after_render:html</code> 在一些情形下可能无法被正常触发:</p><ul><li><a href="https://github.com/hexojs/hexo-inject/issues/1">Does not work with hexo-renderer-jade</a></li><li><code>after_render:html</code> 似乎在 Hexo 服务器模式默认配置中无法被调用 (<code>hexo server</code>), 遇到这种情况用户可能需要使用 <code>hexo-server</code> 的静态文件解析模式 ( <code>hexo server -s</code>) .</li></ul><p>如果在博客生成过程中，插件发现 <code>after_render:html</code> 没有被调用，那么插件将会通过 <code>after_post_render</code> 过滤器来植入脚本。但是使用 <code>after_post_render</code> 会有重复载入 <code>APlayer.js</code> 的情况（例如当一个页面中存在多篇博客时），以及一些非文章页面将无法使用本插件。</p><p>如果想完全解决这个问题，用户可能需要自己在主题文件中手动加入 <code>Aplayer.js</code> 与 <code>Meting.js</code>，同时关闭插件的自动脚本插入功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/config.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/config.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _hexoFs = require('hexo-fs');var _hexoFs2 = _interopRequireDefault(_hexoFs);var _path = require('path');var _path2 = _interopRequireDefault(_path);var _util = require('../common/util');function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }var APLAYER_DIR = _path2.default.dirname(require.resolve('aplayer'));var METING_DIR = _path2.default.dirname(require.resolve('meting'));var APLAYER_FILENAME = 'APlayer.min.js';var APLAYER_STYLENAME = 'APlayer.min.css';var METING_FILENAME = 'Meting.min.js';var DEFAULT_SCRIPT_DIR = _path2.default.join('assets', 'js/');var DEFAULT_STYLE_DIR = _path2.default.join('assets', 'css/');var ASSETS = [// 四元组：引用非本地文件标识符，文件名, 文件的目标部署路径, 资源文件源路径[false, APLAYER_FILENAME, _path2.default.join(DEFAULT_SCRIPT_DIR, APLAYER_FILENAME), _path2.default.join(APLAYER_DIR, APLAYER_FILENAME)], [false, APLAYER_STYLENAME, _path2.default.join(DEFAULT_STYLE_DIR, APLAYER_STYLENAME), _path2.default.join(APLAYER_DIR, APLAYER_STYLENAME)], [false, METING_FILENAME, _path2.default.join(DEFAULT_SCRIPT_DIR, METING_FILENAME), _path2.default.join(METING_DIR, METING_FILENAME)]];/** Aplayer configuration example in _config.yml:** aplayer:*   script_dir: some/place                        # Script asset path in public directory, default: 'assets/js'*   style_dir: some/palce                         # Style asset path in public directory, default: 'assets/css'*   cdn: http://xxx/aplayer.min.js                # External APlayer.js url*   style_cdn: http://xxx/aplayer.min.css         # External APlayer.css url*   meting: true                                  # Meting support, default: false*   meting_api: http://xxx/api.php                # Meting api url*   meting_cdn: http://xxx/Meing.min.js           # External Meting.js url*   externalLink: http://xxx/aplayer.min.js       # Deprecated, use 'cdn' instead*   asset_inject: true                            # Auto asset injection, default: true* */var Config = function () {  function Config(hexo) {    _classCallCheck(this, Config);    this.root = hexo.config.root ? hexo.config.root : '/';    this.config = {      assets: ASSETS,      asset_inject: true,      script_dir: DEFAULT_SCRIPT_DIR,      style_dir: DEFAULT_STYLE_DIR,      script: _path2.default.join(this.root, '/', DEFAULT_SCRIPT_DIR, APLAYER_FILENAME),      style: _path2.default.join(this.root, '/', DEFAULT_STYLE_DIR, APLAYER_STYLENAME),      meting: false, meting_api: null,      meting_script: _path2.default.join(this.root, '/', DEFAULT_SCRIPT_DIR, METING_FILENAME)    };    if (hexo.config.aplayer) {      this._parse((0, _util.clone)(hexo.config.aplayer));    }  }  _createClass(Config, [{    key: '_parse',    value: function _parse(source) {      var isExternal = { aplayer: false, aplayerStyle: false, meting: false        // Parse script_dir      };if (source.script_dir) {        this.set('script_dir', source.script_dir);      }      // Parse style_dir      if (source.style_dir) {        this.set('style_dir', source.style_dir);      }      // Asset auto-injection      if (source.asset_inject === false) {        this.set('asset_inject', source.asset_inject);      }      // Deprecated: externalLink option      if (source.externalLink) {        source.cdn = source.externalLink;      }      // Parse aplayer external script      if (source.cdn) {        this.set('script', source.cdn);        isExternal.aplayer = true;      } else {        this.set('script', _path2.default.join(this.root, '/', this.get('script_dir'), APLAYER_FILENAME));      }      // Parse aplayer external style      if (source.style_cdn) {        this.set('style', source.style_cdn);        isExternal.aplayerStyle = true;      } else {        this.set('style', _path2.default.join(this.root, '/', this.get('style_dir'), APLAYER_STYLENAME));      }      var assets = [[isExternal['aplayer'], APLAYER_FILENAME, _path2.default.join(this.get('script_dir'), APLAYER_FILENAME), _path2.default.join(APLAYER_DIR, APLAYER_FILENAME)], [isExternal['aplayerStyle'], APLAYER_STYLENAME, _path2.default.join(this.get('style_dir'), APLAYER_STYLENAME), _path2.default.join(APLAYER_DIR, APLAYER_STYLENAME)]];      // Meting Config      if (source.meting !== false) {        this.set('meting', source.meting);        if (source.meting_cdn) {          this.set('meting_script', source.meting_cdn);          isExternal.meting = true;        } else {          this.set('meting_script', _path2.default.join(this.root, '/', this.get('script_dir'), METING_FILENAME));        }        if (source.meting_api) {          this.set('meting_api', source.meting_api);        }        assets.push([isExternal['meting'], METING_FILENAME, _path2.default.join(this.get('script_dir'), METING_FILENAME), _path2.default.join(METING_DIR, METING_FILENAME)]);      }      // Reset assets config      this.set('assets', assets);    }  }, {    key: 'get',    value: function get(name) {      return this.config[name];    }  }, {    key: 'set',    value: function set(name, value) {      this.config[name] = value;    }  }]);  return Config;}();exports.default = Config;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/view.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/view.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _util = require('../common/util');function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }var PartialView = function () {  function PartialView(raw, info) {    _classCallCheck(this, PartialView);    this.content = raw;    this.path = info.path || '';  }  _createClass(PartialView, [{    key: 'isFullPage',    value: function isFullPage() {      return this.content.includes('');    }  }, {    key: 'hasTagMarker',    value: function hasTagMarker(marker) {      return this.content.includes(marker);    }  }, {    key: 'hasHeadTag',    value: function hasHeadTag() {      return this.content.includes('');    }  }, {    key: 'assetAlreadyInjected',    value: function assetAlreadyInjected(marker) {      return this.content.includes(marker);    }  }, {    key: 'injectAsset',    value: function injectAsset(tag) {      this.content = this.content.replace('', tag + '\n');    }  }, {    key: 'removeLiteral',    value: function removeLiteral(text) {      this.content = (0, _util.removeAll)(this.content, text);    }  }]);  return PartialView;}();exports.default = PartialView;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/aplayer/dist/APlayer.min.css"/>
      <url>/node_modules/aplayer/dist/APlayer.min.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>.aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#ffffff",endColorstr="#00ffffff",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:" "}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#00ffffff",endColorstr="#ccffffff",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}/*# sourceMappingURL=APlayer.min.css.map*/]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/lib/index.js"/>
      <url>/node_modules/babel-polyfill/lib/index.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";require("core-js/shim");require("regenerator-runtime/runtime");require("core-js/fn/regexp/escape");if (global._babelPolyfill) {  throw new Error("only one instance of babel-polyfill is allowed");}global._babelPolyfill = true;var DEFINE_PROPERTY = "defineProperty";function define(O, key, value) {  O[key] || Object[DEFINE_PROPERTY](O, key, {    writable: true,    configurable: true,    value: value  });}define(String.prototype, "padLeft", "".padStart);define(String.prototype, "padRight", "".padEnd);"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {  [][key] && define(Array, key, Function.call.bind([][key]));});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/dist/polyfill.min.js"/>
      <url>/node_modules/babel-polyfill/dist/polyfill.min.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var c="function"==typeof require&&require;if(!u&&c)return c(o,!0);if(i)return i(o,!0);var a=new Error("Cannot find module '"+o+"'");throw a.code="MODULE_NOT_FOUND",a}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(n){var r=t[o][1][n];return s(r||n)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return 0="=i[e]&&t(42)(i,e,{}),n.exports=function(t){i[e][t]=!0}},{128:128,42:42}],6:[function(t,n,r){n.exports=function(t,n,r,e){if(!(t" s}({1:[function(t,n,r){(function(n){"use strict";function define(t,n,e){t[n]||object[r](t,n,{writable:!0,configurable:!0,value:e})}if(t(327),t(328),t(2),n._babelpolyfill)throw new error("only one instance of babel-polyfill is allowed");n._babelpolyfill="!0;var" r="defineProperty" ;define(string.prototype,"padleft","".padstart),define(string.prototype,"padright","".padend),"pop,reverse,shift,keys,values,entries,indexof,every,some,foreach,map,filter,find,findindex,includes,join,slice,concat,push,splice,unshift,sort,lastindexof,reduce,reduceright,copywithin,fill".split(",").foreach(function(t){[][t]&&define(array,t,function.call.bind([][t]))})}).call(this,"undefined"!="typeof" global?global:"undefined"!="typeof" self?self:"undefined"!="typeof" window?window:{})},{2:2,327:327,328:328}],2:[function(t,n,r){t(130),n.exports="t(23).RegExp.escape},{130:130,23:23}],3:[function(t,n,r){n.exports=function(t){if("function"!=typeof" t)throw typeerror(t+" not a function!");return t}},{}],4:[function(t,n,r){var e="t(18);n.exports=function(t,n){if("number"!=typeof" t&&"number"!="e(t))throw" typeerror(n);return+t}},{18:18}],5:[function(t,n,r){var instanceof n)||void 0!="=e&&e" in typeerror(r+": incorrect invocation!");return t}},{}],7:[function(t,n,r){var an object!");return t}},{51:51}],8:[function(t,n,r){"use strict";var copywithin(t,n){var>2?arguments[2]:void 0,s=Math.min((void 0===f?u:i(f,u))-a,u-c),l=1;for(a<c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s-->0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},{114:114,118:118,119:119}],9:[function(t,n,r){"use strict";var e=t(119),i=t(114),o=t(118);n.exports=function fill(t){for(var n=e(this),r=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,f=void 0===a?r:i(a,r);f>c;)n[c++]=t;return n}},{114:114,118:118,119:119}],10:[function(t,n,r){var e=t(39);n.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},{39:39}],11:[function(t,n,r){var e=t(117),i=t(118),o=t(114);n.exports=function(t){return function(n,r,u){var c,a=e(n),f=i(a.length),s=o(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}}},{114:114,117:117,118:118}],12:[function(t,n,r){var e=t(25),i=t(47),o=t(119),u=t(118),c=t(15);n.exports=function(t,n){var r=1==t,a=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,v=n||c;return function(n,c,p){for(var d,y,g=o(n),m=i(g),b=e(c,p,3),x=u(m.length),S=0,w=r?v(n,x):a?v(n,0):void 0;x>S;S++)if((h||S in m)&&(d=m[S],y=b(d,S,g),t))if(r)w[S]=y;else if(y)switch(t){case 3:return!0;case 5:return d;case 6:return S;case 2:w.push(d)}else if(s)return!1;return l?-1:f||s?s:w}}},{118:118,119:119,15:15,25:25,47:47}],13:[function(t,n,r){var e=t(3),i=t(119),o=t(47),u=t(118);n.exports=function(t,n,r,c,a){e(n);var f=i(t),s=o(f),l=u(f.length),h=a?l-1:0,v=a?-1:1;if(r<2)for(;;){if(h in s){c="s[h],h+=v;break}if(h+=v,a?h<0:l<=h)throw" typeerror("reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=v)h in s&&(c=n(c,s[h],h,f));return c}},{118:118,119:119,3:3,47:47}],14:[function(t,n,r){var e=t(51),i=t(49),o=t(128)("species");n.exports=function(t){var n;return i(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},{128:128,49:49,51:51}],15:[function(t,n,r){var e=t(14);n.exports=function(t,n){return new(e(t))(n)}},{14:14}],16:[function(t,n,r){"use strict";var e=t(3),i=t(51),o=t(46),u=[].slice,c={},a=function(t,n,r){if(!(n in c)){for(var e=[],i=0;i<n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return 0="==t?"Undefined":null===t?"Null":"string"==typeof(r=u(n=Object(t),i))?r:o?e(n):"Object"==(c=e(n))&&"function"==typeof" new f("+e.join(",")+")")}return c[n](t,r)};n.exports="Function.bind||function" bind(t){var n="e(this),r=u.call(arguments,1),c=function(){var" e="r.concat(u.call(arguments));return" this instanceof c?a(n,e.length,e):o(n,e,t)};return i(n.prototype)&&(c.prototype="n.prototype),c}},{3:3,46:46,51:51}],17:[function(t,n,r){var" arguments}()),u="function(t,n){try{return" t[n]}catch(t){}};n.exports="function(t){var" n,r,c;return void n.callee?"arguments":c}},{128:128,18:18}],18:[function(t,n,r){var e.call(t).slice(8,-1)}},{}],19:[function(t,n,r){"use strict";var r,e="v(n);if("F"!==e)return" t._i[e];for(r="t._f;r;r=r.n)if(r.k==n)return" r};n.exports="{getConstructor:function(t,n,r,f){var" s="t(function(t,e){c(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void" 0,t._l="void" 0,t[d]="0,void" 0!="e&&a(e,r,t[f],t)});return" o(s.prototype,{clear:function clear(){for(var t="p(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void" 0),delete r[e.i];t._f="t._l=void" r="p(this,n),e=y(r,t);if(e){var" i="e.n,o=e.p;delete" r._i[e.i],e.r="!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[d]--}return!!e},forEach:function" foreach(t){p(this,n);for(var>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function has(t){return!!y(p(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return p(this,n)[d]}}),s},def:function(t,n,r){var e,i,o=y(t,n);return o?o.v=r:(t._l=o={i:i=v(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,n,r){f(t,n,function(t,r){this._t=p(t,n),this._k=r,this._l=void 0},function(){for(var t=this,n=t._k,r=t._l;r&&r.r;)r=r.p;return t._t&&(t._l=r=r?r.n:t._t._f)?"keys"==n?s(0,r.k):"values"==n?s(0,r.v):s(0,[r.k,r.v]):(t._t=void 0,s(1))},r?"entries":"values",!r,!0),l(n)}}},{100:100,125:125,25:25,29:29,39:39,55:55,57:57,6:6,66:66,71:71,72:72,93:93}],20:[function(t,n,r){var e=t(17),i=t(10);n.exports=function(t){return function toJSON(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},{10:10,17:17}],21:[function(t,n,r){"use strict";var e=t(93),i=t(66).getWeak,o=t(7),u=t(51),c=t(6),a=t(39),f=t(12),s=t(41),l=t(125),h=f(5),v=f(6),p=0,d=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return h(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var r=g(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=v(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},n.exports={getConstructor:function(t,n,r,o){var f=t(function(t,e){c(t,f,n,"_i"),t._t=n,t._i=p++,t._l=void 0,void 0!=e&&a(e,r,t[o],t)});return e(f.prototype,{delete:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function has(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).has(t):r&&s(r,this._i)}}),f},def:function(t,n,r){var e=i(o(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},{12:12,125:125,39:39,41:41,51:51,6:6,66:66,7:7,93:93}],22:[function(t,n,r){"use strict";var e=t(40),i=t(33),o=t(94),u=t(93),c=t(66),a=t(39),f=t(6),s=t(51),l=t(35),h=t(56),v=t(101),p=t(45);n.exports=function(t,n,r,d,y,g){var m=e[t],b=m,x=y?"set":"add",S=b&&b.prototype,w={},_=function(t){var n=S[t];o(S,t,"delete"==t?function(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function has(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function get(t){return g&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function add(t){return n.call(this,0===t?0:t),this}:function set(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(g||S.forEach&&!l(function(){(new b).entries().next()}))){var E=new b,O=E[x](g?{}:-0,1)!=E,P=l(function(){E.has(1)}),M=h(function(t){new b(t)}),F=!g&&l(function(){for(var t=new b,n=5;n--;)t[x](n,n);return!t.has(-0)});M||(b=n(function(n,r){f(n,b,t);var e=p(new m,n,b);return void 0!=r&&a(r,y,e[x],e),e}),b.prototype=S,S.constructor=b),(P||F)&&(_("delete"),_("has"),y&&_("get")),(F||O)&&_(x),g&&S.clear&&delete S.clear}else b=d.getConstructor(n,t,y,x),u(b.prototype,r),c.NEED=!0;return v(b,t),w[t]=b,i(i.G+i.W+i.F*(b!=m),w),g||d.setStrong(b,t,y),b}},{101:101,33:33,35:35,39:39,40:40,45:45,51:51,56:56,6:6,66:66,93:93,94:94}],23:[function(t,n,r){var e=n.exports={version:"2.5.0"};"number"==typeof __e&&(__e=e)},{}],24:[function(t,n,r){"use strict";var e=t(72),i=t(92);n.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},{72:72,92:92}],25:[function(t,n,r){var e=t(3);n.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},{3:3}],26:[function(t,n,r){"use strict";var e=t(35),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};n.exports=e(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!e(function(){o.call(new Date(NaN))})?function toISOString(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:o},{35:35}],27:[function(t,n,r){"use strict";var e=t(7),i=t(120);n.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(e(this),"number"!=t)}},{120:120,7:7}],28:[function(t,n,r){n.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},{}],29:[function(t,n,r){n.exports=!t(35)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{35:35}],30:[function(t,n,r){var e=t(51),i=t(40).document,o=e(i)&&e(i.createElement);n.exports=function(t){return o?i.createElement(t):{}}},{40:40,51:51}],31:[function(t,n,r){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],32:[function(t,n,r){var e=t(81),i=t(78),o=t(82);n.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,c=r(t),a=o.f,f=0;c.length>f;)a.call(t,u=c[f++])&&n.push(u);return n}},{78:78,81:81,82:82}],33:[function(t,n,r){var e=t(40),i=t(23),o=t(42),u=t(94),c=t(25),a=function(t,n,r){var f,s,l,h,v=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=p?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,b=p?i:i[n]||(i[n]={}),x=b.prototype||(b.prototype={});p&&(r=n);for(f in r)s=!v&&m&&void 0!==m[f],l=(s?m:r)[f],h=g&&s?c(l,e):y&&"function"==typeof l?c(Function.call,l):l,m&&u(m,f,l,t&a.U),b[f]!=l&&o(b,f,h),y&&x[f]!=l&&(x[f]=l)};e.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,n.exports=a},{23:23,25:25,40:40,42:42,94:94}],34:[function(t,n,r){var e=t(128)("match");n.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},{128:128}],35:[function(t,n,r){n.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],36:[function(t,n,r){"use strict";var e=t(42),i=t(94),o=t(35),u=t(28),c=t(128);n.exports=function(t,n,r){var a=c(t),f=r(u,a,""[t]),s=f[0],l=f[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,s),e(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},{128:128,28:28,35:35,42:42,94:94}],37:[function(t,n,r){"use strict";var e=t(7);n.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},{7:7}],38:[function(t,n,r){"use strict";function flattenIntoArray(t,n,r,a,f,s,l,h){for(var v,p,d=f,y=0,g=!!l&&u(l,h,3);y<a;){if(y in r){if(v="g?g(r[y],y,n):r[y],p=!1,i(v)&&(p=v[c],p=void" 0!="=p?!!p:e(v)),p&&s">0)d=flattenIntoArray(t,n,v,o(v.length),d,s-1)-1;else{if(d>=9007199254740991)throw TypeError();t[d]=v}d++}y++}return d}var e=t(49),i=t(51),o=t(118),u=t(25),c=t(128)("isConcatSpreadable");n.exports=flattenIntoArray},{118:118,128:128,25:25,49:49,51:51}],39:[function(t,n,r){var e=t(25),i=t(53),o=t(48),u=t(7),c=t(118),a=t(129),f={},s={},r=n.exports=function(t,n,r,l,h){var v,p,d,y,g=h?function(){return t}:a(t),m=e(r,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(v=c(t.length);v>b;b++)if((y=n?m(u(p=t[b])[0],p[1]):m(t[b]))===f||y===s)return y}else for(d=g.call(t);!(p=d.next()).done;)if((y=i(d,m,p.value,n))===f||y===s)return y};r.BREAK=f,r.RETURN=s},{118:118,129:129,25:25,48:48,53:53,7:7}],40:[function(t,n,r){var e=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},{}],41:[function(t,n,r){var e={}.hasOwnProperty;n.exports=function(t,n){return e.call(t,n)}},{}],42:[function(t,n,r){var e=t(72),i=t(92);n.exports=t(29)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},{29:29,72:72,92:92}],43:[function(t,n,r){var e=t(40).document;n.exports=e&&e.documentElement},{40:40}],44:[function(t,n,r){n.exports=!t(29)&&!t(35)(function(){return 7!=Object.defineProperty(t(30)("div"),"a",{get:function(){return 7}}).a})},{29:29,30:30,35:35}],45:[function(t,n,r){var e=t(51),i=t(99).set;n.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},{51:51,99:99}],46:[function(t,n,r){n.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},{}],47:[function(t,n,r){var e=t(18);n.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},{18:18}],48:[function(t,n,r){var e=t(58),i=t(128)("iterator"),o=Array.prototype;n.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},{128:128,58:58}],49:[function(t,n,r){var e=t(18);n.exports=Array.isArray||function isArray(t){return"Array"==e(t)}},{18:18}],50:[function(t,n,r){var e=t(51),i=Math.floor;n.exports=function isInteger(t){return!e(t)&&isFinite(t)&&i(t)===t}},{51:51}],51:[function(t,n,r){n.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],52:[function(t,n,r){var e=t(51),i=t(18),o=t(128)("match");n.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},{128:128,18:18,51:51}],53:[function(t,n,r){var e=t(7);n.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},{7:7}],54:[function(t,n,r){"use strict";var e=t(71),i=t(92),o=t(101),u={};t(42)(u,t(128)("iterator"),function(){return this}),n.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},{101:101,128:128,42:42,71:71,92:92}],55:[function(t,n,r){"use strict";var e=t(60),i=t(33),o=t(94),u=t(42),c=t(41),a=t(58),f=t(54),s=t(101),l=t(79),h=t(128)("iterator"),v=!([].keys&&"next"in[].keys()),p=function(){return this};n.exports=function(t,n,r,d,y,g,m){f(r,n,d);var b,x,S,w=function(t){if(!v&&t in P)return P[t];switch(t){case"keys":return function keys(){return new r(this,t)};case"values":return function values(){return new r(this,t)}}return function entries(){return new r(this,t)}},_=n+" Iterator",E="values"==y,O=!1,P=t.prototype,M=P[h]||P["@@iterator"]||y&&P[y],F=M||w(y),I=y?E?w("entries"):F:void 0,A="Array"==n?P.entries||M:M;if(A&&(S=l(A.call(new t)))!==Object.prototype&&S.next&&(s(S,_,!0),e||c(S,h)||u(S,h,p)),E&&M&&"values"!==M.name&&(O=!0,F=function values(){return M.call(this)}),e&&!m||!v&&!O&&P[h]||u(P,h,F),a[n]=F,a[_]=p,y)if(b={values:E?F:w("values"),keys:g?F:w("keys"),entries:I},m)for(x in b)x in P||o(P,x,b[x]);else i(i.P+i.F*(v||O),n,b);return b}},{101:101,128:128,33:33,41:41,42:42,54:54,58:58,60:60,79:79,94:94}],56:[function(t,n,r){var e=t(128)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}n.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},{128:128}],57:[function(t,n,r){n.exports=function(t,n){return{value:n,done:!!t}}},{}],58:[function(t,n,r){n.exports={}},{}],59:[function(t,n,r){var e=t(81),i=t(117);n.exports=function(t,n){for(var r,o=i(t),u=e(o),c=u.length,a=0;c>a;)if(o[r=u[a++]]===n)return r}},{117:117,81:81}],60:[function(t,n,r){n.exports=!1},{}],61:[function(t,n,r){var e=Math.expm1;n.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function 0="=(t=+t)?t:t" expm1(t){return>-1e-6&&t<1e-6?t+t*t 2:math.exp(t)-1}:e},{}],62:[function(t,n,r){var e="t(65),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),a=i(2,-126),f=function(t){return" t+1 o-1 o};n.exports="Math.fround||function" fround(t){var n,r,i="Math.abs(t),s=e(t);return" i<a?s*f(i a u)*a*u:(n="(1+u/o)*i,r=n-(n-i),r">c||r!=r?s*(1/0):s*r)}},{65:65}],63:[function(t,n,r){n.exports=Math.log1p||function log1p(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t 0="==arguments.length||t!=t||n!=n||r!=r||e!=e||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-e)/(r-n)+e}},{}],65:[function(t,n,r){n.exports=Math.sign||function" 2:math.log(1+t)}},{}],64:[function(t,n,r){n.exports="Math.scale||function" scale(t,n,r,e,i){return sign(t){return e="t(124)("meta"),i=t(51),o=t(41),u=t(72).f,c=0,a=Object.isExtensible||function(){return!0},f=!t(35)(function(){return" a(object.preventextensions({}))}),s="function(t){u(t,e,{value:{i:"O"+" ++c,w:{}}})},l="function(t,n){if(!i(t))return"symbol"==typeof" t?t:("string"="=typeof" t?"s":"p")+t;if(!o(t,e)){if(!a(t))return"f";if(!n)return"e";s(t)}return t[e].i},h="function(t,n){if(!o(t,e)){if(!a(t))return!0;if(!n)return!1;s(t)}return" t[e].w},v="function(t){return" f&&p.need&&a(t)&&!o(t,e)&&s(t),t},p="n.exports={KEY:e,NEED:!1,fastKey:l,getWeak:h,onFreeze:v}},{124:124,35:35,41:41,51:51,72:72}],67:[function(t,n,r){var" i="u.get(t);if(!i){if(!r)return;u.set(t,i=new" e)}var o="i.get(n);if(!o){if(!r)return;i.set(n,o=new" e)}return o},a="function(t,n,r){var" void 0!="=e&&e.has(t)},f=function(t,n,r){var" 0:e.get(t)},s="function(t,n,r,e){c(r,e,!0).set(t,n)},l=function(t,n){var" r="c(t,n,!1),e=[];return" r&&r.foreach(function(t,n){e.push(n)}),e},h="function(t){return" t?t:string(t)},v="function(t){i(i.S,"Reflect",t)};n.exports={store:u,map:c,has:a,get:f,set:s,keys:l,key:h,exp:v}},{103:103,160:160,266:266,33:33}],68:[function(t,n,r){var" t,n,r,f="function(){var" e,i;for(a&&(e="u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw" t?r():n="void" 0,e}}n="void" 0,e&&e.enter()};if(a)r="function(){u.nextTick(f)};else" if(o){var s="!0,l=document.createTextNode("");new" o(f).observe(l,{characterdata:!0}),r="function(){l.data=s=!s}}else" if(c&&c.resolve){var h="c.resolve();r=function(){h.then(f)}}else" function(e){var 0};n&&(n.next="i),t||(t=i,r()),n=i}}},{113:113,18:18,40:40}],69:[function(t,n,r){"use" strict";function promisecapability(t){var n,r;this.promise="new" t(function(t,e){if(void typeerror("bad promise constructor");n="t,r=e}),this.resolve=e(n),this.reject=e(r)}var" new promisecapability(t)}},{3:3}],70:[function(t,n,r){"use strict";var t="{},n={},r=Symbol(),e="abcdefghijklmnopqrst";return" t[r]="7,e.split("").forEach(function(t){n[t]=t}),7!=a({},t)[r]||Object.keys(a({},n)).join("")!=e})?function" assign(t,n){for(var>f;)for(var h,v=c(arguments[f++]),p=s?e(v).concat(s(v)):e(v),d=p.length,y=0;d>y;)l.call(v,h=p[y++])&&(r[h]=v[h]);return r}:a},{119:119,35:35,47:47,78:78,81:81,82:82}],71:[function(t,n,r){var e=t(7),i=t(73),o=t(31),u=t(102)("IE_PROTO"),c=function(){},a=function(){var n,r=t(30)("iframe"),e=o.length;for(r.style.display="none",t(43).appendChild(r),r.src="javascript:",n=r.contentWindow.document,n.open(),n.write("<script>document.F=Object<\/script>"),n.close(),a=n.F;e--;)delete a.prototype[o[e]];return a()};n.exports=Object.create||function create(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:i(r,n)}},{102:102,30:30,31:31,43:43,7:7,73:73}],72:[function(t,n,r){var e=t(7),i=t(44),o=t(120),u=Object.defineProperty;r.f=t(29)?Object.defineProperty:function defineProperty(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},{120:120,29:29,44:44,7:7}],73:[function(t,n,r){var e=t(72),i=t(7),o=t(81);n.exports=t(29)?Object.defineProperties:function defineProperties(t,n){i(t);for(var r,u=o(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},{29:29,7:7,72:72,81:81}],74:[function(t,n,r){"use strict";n.exports=t(60)||!t(35)(function(){var n=Math.random();__defineSetter__.call(null,n,function(){}),delete t(40)[n]})},{35:35,40:40,60:60}],75:[function(t,n,r){var e=t(82),i=t(92),o=t(117),u=t(120),c=t(41),a=t(44),f=Object.getOwnPropertyDescriptor;r.f=t(29)?f:function getOwnPropertyDescriptor(t,n){if(t=o(t),n=u(n,!0),a)try{return f(t,n)}catch(t){}if(c(t,n))return i(!e.f.call(t,n),t[n])}},{117:117,120:120,29:29,41:41,44:44,82:82,92:92}],76:[function(t,n,r){var e=t(117),i=t(77).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return i(t)}catch(t){return u.slice()}};n.exports.f=function getOwnPropertyNames(t){return u&&"[object Window]"==o.call(t)?c(t):i(e(t))}},{117:117,77:77}],77:[function(t,n,r){var e=t(80),i=t(31).concat("length","prototype");r.f=Object.getOwnPropertyNames||function getOwnPropertyNames(t){return e(t,i)}},{31:31,80:80}],78:[function(t,n,r){r.f=Object.getOwnPropertySymbols},{}],79:[function(t,n,r){var e=t(41),i=t(119),o=t(102)("IE_PROTO"),u=Object.prototype;n.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},{102:102,119:119,41:41}],80:[function(t,n,r){var e=t(41),i=t(117),o=t(11)(!1),u=t(102)("IE_PROTO");n.exports=function(t,n){var r,c=i(t),a=0,f=[];for(r in c)r!=u&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~o(f,r)||f.push(r));return f}},{102:102,11:11,117:117,41:41}],81:[function(t,n,r){var e=t(80),i=t(31);n.exports=Object.keys||function keys(t){return e(t,i)}},{31:31,80:80}],82:[function(t,n,r){r.f={}.propertyIsEnumerable},{}],83:[function(t,n,r){var e=t(33),i=t(23),o=t(35);n.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},{23:23,33:33,35:35}],84:[function(t,n,r){var e=t(81),i=t(117),o=t(82).f;n.exports=function(t){return function(n){for(var r,u=i(n),c=e(u),a=c.length,f=0,s=[];a>f;)o.call(u,r=c[f++])&&s.push(t?[r,u[r]]:u[r]);return s}}},{117:117,81:81,82:82}],85:[function(t,n,r){var e=t(77),i=t(78),o=t(7),u=t(40).Reflect;n.exports=u&&u.ownKeys||function ownKeys(t){var n=e.f(o(t)),r=i.f;return r?n.concat(r(t)):n}},{40:40,7:7,77:77,78:78}],86:[function(t,n,r){var e=t(40).parseFloat,i=t(111).trim;n.exports=1/e(t(112)+"-0")!=-1/0?function parseFloat(t){var n=i(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},{111:111,112:112,40:40}],87:[function(t,n,r){var e=t(40).parseInt,i=t(111).trim,o=t(112),u=/^[-+]?0[xX]/;n.exports=8!==e(o+"08")||22!==e(o+"0x16")?function parseInt(t,n){var r=i(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},{111:111,112:112,40:40}],88:[function(t,n,r){"use strict";var e=t(89),i=t(46),o=t(3);n.exports=function(){for(var t=o(this),n=arguments.length,r=Array(n),u=0,c=e._,a=!1;n>u;)(r[u]=arguments[u++])===c&&(a=!0);return function(){var e,o=this,u=arguments.length,f=0,s=0;if(!a&&!u)return i(t,r,o);if(e=r.slice(),a)for(;n>f;f++)e[f]===c&&(e[f]=arguments[s++]);for(;u>s;)e.push(arguments[s++]);return i(t,e,o)}}},{3:3,46:46,89:89}],89:[function(t,n,r){n.exports=t(40)},{40:40}],90:[function(t,n,r){n.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,n,r){var e=t(69);n.exports=function(t,n){var r=e.f(t);return(0,r.resolve)(n),r.promise}},{69:69}],92:[function(t,n,r){n.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},{}],93:[function(t,n,r){var e=t(94);n.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},{94:94}],94:[function(t,n,r){var e=t(40),i=t(42),o=t(41),u=t(124)("src"),c=Function.toString,a=(""+c).split("toString");t(23).inspectSource=function(t){return c.call(t)},(n.exports=function(t,n,r,c){var f="function"==typeof r;f&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(f&&(o(r,u)||i(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function toString(){return"function"==typeof this&&this[u]||c.call(this)})},{124:124,23:23,40:40,41:41,42:42}],95:[function(t,n,r){n.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},{}],96:[function(t,n,r){n.exports=Object.is||function is(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},{}],97:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(25),u=t(39);n.exports=function(t){e(e.S,t,{from:function from(t){var n,r,e,c,a=arguments[1];return i(this),n=void 0!==a,n&&i(a),void 0==t?new this:(r=[],n?(e=0,c=o(a,arguments[2],2),u(t,!1,function(t){r.push(c(t,e++))})):u(t,!1,r.push,r),new this(r))}})}},{25:25,3:3,33:33,39:39}],98:[function(t,n,r){"use strict";var e=t(33);n.exports=function(t){e(e.S,t,{of:function of(){for(var t=arguments.length,n=Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},{33:33}],99:[function(t,n,r){var e=t(51),i=t(7),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,r,e){try{e=t(25)(Function.call,t(75).f(Object.prototype,"__proto__").set,2),e(n,[]),r=!(n instanceof Array)}catch(t){r=!0}return function setPrototypeOf(t,n){return o(t,n),r?t.__proto__=n:e(t,n),t}}({},!1):void 0),check:o}},{25:25,51:51,7:7,75:75}],100:[function(t,n,r){"use strict";var e=t(40),i=t(72),o=t(29),u=t(128)("species");n.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},{128:128,29:29,40:40,72:72}],101:[function(t,n,r){var e=t(72).f,i=t(41),o=t(128)("toStringTag");n.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},{128:128,41:41,72:72}],102:[function(t,n,r){var e=t(103)("keys"),i=t(124);n.exports=function(t){return e[t]||(e[t]=i(t))}},{103:103,124:124}],103:[function(t,n,r){var e=t(40),i=e["__core-js_shared__"]||(e["__core-js_shared__"]={});n.exports=function(t){return i[t]||(i[t]={})}},{40:40}],104:[function(t,n,r){var e=t(7),i=t(3),o=t(128)("species");n.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||void 0==(r=e(u)[o])?n:i(r)}},{128:128,3:3,7:7}],105:[function(t,n,r){"use strict";var e=t(35);n.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},{35:35}],106:[function(t,n,r){var e=t(116),i=t(28);n.exports=function(t){return function(n,r){var o,u,c=String(i(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(o=c.charCodeAt(a),o<55296||o>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536)}}},{116:116,28:28}],107:[function(t,n,r){var e=t(52),i=t(28);n.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},{28:28,52:52}],108:[function(t,n,r){var e=t(33),i=t(35),o=t(28),u=/"/g,c=function(t,n,r,e){var i=String(o(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};n.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",r)}},{28:28,33:33,35:35}],109:[function(t,n,r){var e=t(118),i=t(110),o=t(28);n.exports=function(t,n,r,u){var c=String(o(t)),a=c.length,f=void 0===r?" ":String(r),s=e(n);if(s<=a||""==f)return c;var l=s-a,h=i.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},{110:110,118:118,28:28}],110:[function(t,n,r){"use strict";var e=t(116),i=t(28);n.exports=function repeat(t){var n=String(i(this)),r="",o=e(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(r+=n);return r}},{116:116,28:28}],111:[function(t,n,r){var e=t(33),i=t(28),o=t(35),u=t(112),c="["+u+"]",a="​",f=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),l=function(t,n,r){var i={},c=o(function(){return!!u[t]()||a[t]()!=a}),f=i[t]=c?n(h):u[t];r&&(i[r]=f),e(e.P+e.F*c,"String",i)},h=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(f,"")),2&n&&(t=t.replace(s,"")),t};n.exports=l},{112:112,28:28,33:33,35:35}],112:[function(t,n,r){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],113:[function(t,n,r){var e,i,o,u=t(25),c=t(46),a=t(43),f=t(30),s=t(40),l=s.process,h=s.setImmediate,v=s.clearImmediate,p=s.MessageChannel,d=s.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){m.call(t.data)};h&&v||(h=function setImmediate(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return g[++y]=function(){c("function"==typeof t?t:Function(t),n)},e(y),y},v=function clearImmediate(t){delete g[t]},"process"==t(18)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:p?(i=new p,o=i.port2,i.port1.onmessage=b,e=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),n.exports={set:h,clear:v}},{18:18,25:25,30:30,40:40,43:43,46:46}],114:[function(t,n,r){var e=t(116),i=Math.max,o=Math.min;n.exports=function(t,n){return t=e(t),t<0?i(t+n,0):o(t,n)}},{116:116}],115:[function(t,n,r){var e=t(116),i=t(118);n.exports=function(t){if(void 0===t)return 0;var n=e(t),r=i(n);if(n!==r)throw RangeError("Wrong length!");return r}},{116:116,118:118}],116:[function(t,n,r){var e=Math.ceil,i=Math.floor;n.exports=function(t){return isNaN(t=+t)?0:(t>0?i:e)(t)}},{}],117:[function(t,n,r){var e=t(47),i=t(28);n.exports=function(t){return e(i(t))}},{28:28,47:47}],118:[function(t,n,r){var e=t(116),i=Math.min;n.exports=function(t){return t>0?i(e(t),9007199254740991):0}},{116:116}],119:[function(t,n,r){var e=t(28);n.exports=function(t){return Object(e(t))}},{28:28}],120:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},{51:51}],121:[function(t,n,r){"use strict";if(t(29)){var e=t(60),i=t(40),o=t(35),u=t(33),c=t(123),a=t(122),f=t(25),s=t(6),l=t(92),h=t(42),v=t(93),p=t(116),d=t(118),y=t(115),g=t(114),m=t(120),b=t(41),x=t(17),S=t(51),w=t(119),_=t(48),E=t(71),O=t(79),P=t(77).f,M=t(129),F=t(124),I=t(128),A=t(12),k=t(11),N=t(104),j=t(141),T=t(58),R=t(56),L=t(100),G=t(9),D=t(8),C=t(72),W=t(75),U=C.f,B=W.f,V=i.RangeError,z=i.TypeError,q=i.Uint8Array,K=Array.prototype,Y=a.ArrayBuffer,J=a.DataView,H=A(0),X=A(2),$=A(3),Z=A(4),Q=A(5),tt=A(6),nt=k(!0),rt=k(!1),et=j.values,it=j.keys,ot=j.entries,ut=K.lastIndexOf,ct=K.reduce,at=K.reduceRight,ft=K.join,st=K.sort,lt=K.slice,ht=K.toString,vt=K.toLocaleString,pt=I("iterator"),dt=I("toStringTag"),yt=F("typed_constructor"),gt=F("def_constructor"),mt=c.CONSTR,bt=c.TYPED,xt=c.VIEW,St=A(1,function(t,n){return Pt(N(t,t[gt]),n)}),wt=o(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),_t=!!q&&!!q.prototype.set&&o(function(){new q(1).set({})}),Et=function(t,n){var r=p(t);if(r<0||r%n)throw V("Wrong offset!");return r},Ot=function(t){if(S(t)&&bt in t)return t;throw z(t+" is not a typed array!")},Pt=function(t,n){if(!(S(t)&&yt in t))throw z("It is not a typed array constructor!");return new t(n)},Mt=function(t,n){return Ft(N(t,t[gt]),n)},Ft=function(t,n){for(var r=0,e=n.length,i=Pt(t,e);e>r;)i[r]=n[r++];return i},It=function(t,n,r){U(t,n,{get:function(){return this._d[r]}})},At=function from(t){var n,r,e,i,o,u,c=w(t),a=arguments.length,s=a>1?arguments[1]:void 0,l=void 0!==s,h=M(c);if(void 0!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(o=u.next()).done;n++)e.push(o.value);c=e}for(l&&a>2&&(s=f(s,arguments[2],2)),n=0,r=d(c.length),i=Pt(this,r);r>n;n++)i[n]=l?s(c[n],n):c[n];return i},kt=function of(){for(var t=0,n=arguments.length,r=Pt(this,n);n>t;)r[t]=arguments[t++];return r},Nt=!!q&&o(function(){vt.call(new q(1))}),jt=function toLocaleString(){return vt.apply(Nt?lt.call(Ot(this)):Ot(this),arguments)},Tt={copyWithin:function copyWithin(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function every(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function fill(t){return G.apply(Ot(this),arguments)},filter:function filter(t){return Mt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function find(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function findIndex(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function forEach(t){H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function indexOf(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function includes(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function join(t){return ft.apply(Ot(this),arguments)},lastIndexOf:function lastIndexOf(t){return ut.apply(Ot(this),arguments)},map:function map(t){return St(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function reduce(t){return ct.apply(Ot(this),arguments)},reduceRight:function reduceRight(t){return at.apply(Ot(this),arguments)},reverse:function reverse(){for(var t,n=this,r=Ot(n).length,e=Math.floor(r/2),i=0;i<e;)t=n[i],n[i++]=n[--r],n[r]=t;return n},some:function some(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function sort(t){return st.call(Ot(this),t)},subarray:function subarray(t,n){var r=Ot(this),e=r.length,i=g(t,e);return new(N(r,r[gt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,d((void 0===n?e:g(n,e))-i))}},Rt=function slice(t,n){return Mt(this,lt.call(Ot(this),t,n))},Lt=function set(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=w(t),i=d(e.length),o=0;if(i+n>r)throw V("Wrong length!");for(;o<i;)this[n+o]=e[o++]},Gt={entries:function entries(){return ot.call(Ot(this))},keys:function keys(){return it.call(Ot(this))},values:function values(){return et.call(Ot(this))}},Dt=function(t,n){return S(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ct=function getOwnPropertyDescriptor(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):B(t,n)},Wt=function defineProperty(t,n,r){return!(Dt(t,n=m(n,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?U(t,n,r):(t[n]=r.value,t)};mt||(W.f=Ct,C.f=Wt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Ct,defineProperty:Wt}),o(function(){ht.call({})})&&(ht=vt=function toString(){return ft.call(this)});var Ut=v({},Tt);v(Ut,Gt),h(Ut,pt,Gt.values),v(Ut,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:jt}),It(Ut,"buffer","b"),It(Ut,"byteOffset","o"),It(Ut,"byteLength","l"),It(Ut,"length","e"),U(Ut,dt,{get:function(){return this[bt]}}),n.exports=function(t,n,r,a){a=!!a;var f=t+(a?"Clamped":"")+"Array",l="get"+t,v="set"+t,p=i[f],g=p||{},m=p&&O(p),b=!p||!c.ABV,w={},_=p&&p.prototype,M=function(t,r){var e=t._d;return e.v[l](r*n+e.o,wt)},F=function(t,r,e){var i=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),i.v[v](r*n+i.o,e,wt)},I=function(t,n){U(t,n,{get:function(){return M(this,n)},set:function(t){return F(this,n,t)},enumerable:!0})};b?(p=r(function(t,r,e,i){s(t,p,f,"_d");var o,u,c,a,l=0,v=0;if(S(r)){if(!(r instanceof Y||"ArrayBuffer"==(a=x(r))||"SharedArrayBuffer"==a))return bt in r?Ft(p,r):At.call(p,r);o=r,v=Et(e,n);var g=r.byteLength;if(void 0===i){if(g%n)throw V("Wrong length!");if((u=g-v)<0)throw V("Wrong length!")}else if((u=d(i)*n)+v>g)throw V("Wrong length!");c=u/n}else c=y(r),u=c*n,o=new Y(u);for(h(t,"_d",{b:o,o:v,l:u,e:c,v:new J(o)});l<c;)I(t,l++)}),_=p.prototype=E(Ut),h(_,"constructor",p)):o(function(){p(1)})&&o(function(){new p(-1)})&&R(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=r(function(t,r,e,i){s(t,p,f);var o;return S(r)?r instanceof Y||"ArrayBuffer"==(o=x(r))||"SharedArrayBuffer"==o?void 0!==i?new g(r,Et(e,n),i):void 0!==e?new g(r,Et(e,n)):new g(r):bt in r?Ft(p,r):At.call(p,r):new g(y(r))}),H(m!==Function.prototype?P(g).concat(P(m)):P(g),function(t){t in p||h(p,t,g[t])}),p.prototype=_,e||(_.constructor=p));var A=_[pt],k=!!A&&("values"==A.name||void 0==A.name),N=Gt.values;h(p,yt,!0),h(_,bt,f),h(_,xt,!0),h(_,gt,p),(a?new p(1)[dt]==f:dt in _)||U(_,dt,{get:function(){return f}}),w[f]=p,u(u.G+u.W+u.F*(p!=g),w),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){g.of.call(p,1)}),f,{from:At,of:kt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,f,Tt),L(f),u(u.P+u.F*_t,f,{set:Lt}),u(u.P+u.F*!k,f,Gt),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*o(function(){new p(1).slice()}),f,{slice:Rt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!o(function(){_.toLocaleString.call([1,2])})),f,{toLocaleString:jt}),T[f]=k?A:N,e||k||h(_,pt,N)}}else n.exports=function(){}},{100:100,104:104,11:11,114:114,115:115,116:116,118:118,119:119,12:12,120:120,122:122,123:123,124:124,128:128,129:129,141:141,17:17,25:25,29:29,33:33,35:35,40:40,41:41,42:42,48:48,51:51,56:56,58:58,6:6,60:60,71:71,72:72,75:75,77:77,79:79,8:8,9:9,92:92,93:93}],122:[function(t,n,r){"use strict";function packIEEE754(t,n,r){var e,i,o,u=Array(r),c=8*r-n-1,a=(1<<c)-1,f=a>>1,s=23===n?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for(t=P(t),t!=t||t===E?(i=t!=t?1:0,e=a):(e=F(I(t)/A),t*(o=M(2,-e))<1&&(e--,o*=2),t+=e+f>=1?s/o:s*M(2,1-f),t*o>=2&&(e++,o/=2),e+f>=a?(i=0,e=a):e+f>=1?(i=(t*o-1)*M(2,n),e+=f):(i=t*M(2,f-1)*M(2,n),e=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(e=e<<n|i,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function unpackIEEE754(t,n,r){var e,i=8*r-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=r-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===o)return e?NaN:f?-E:E;e+=M(2,n),s-=u}return(f?-1:1)*e*M(2,s-n)}function unpackI32(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function packI8(t){return[255&t]}function packI16(t){return[255&t,t>>8&255]}function packI32(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function packF64(t){return packIEEE754(t,52,8)}function packF32(t){return packIEEE754(t,23,4)}function addGetter(t,n,r){d(t[m],n,{get:function(){return this[r]}})}function get(t,n,r,e){var i=+r,o=v(i);if(o+n>t[N])throw _(b);var u=t[k]._b,c=o+t[j],a=u.slice(c,c+n);return e?a:a.reverse()}function set(t,n,r,e,i,o){var u=+r,c=v(u);if(c+n>t[N])throw _(b);for(var a=t[k]._b,f=c+t[j],s=e(+i),l=0;l<n;l++)a[f+l]=s[o?l:n-l-1]}var e=t(40),i=t(29),o=t(60),u=t(123),c=t(42),a=t(93),f=t(35),s=t(6),l=t(116),h=t(118),v=t(115),p=t(77).f,d=t(72).f,y=t(9),g=t(101),m="prototype",b="Wrong index!",x=e.ArrayBuffer,S=e.DataView,w=e.Math,_=e.RangeError,E=e.Infinity,O=x,P=w.abs,M=w.pow,F=w.floor,I=w.log,A=w.LN2,k=i?"_b":"buffer",N=i?"_l":"byteLength",j=i?"_o":"byteOffset";if(u.ABV){if(!f(function(){x(1)})||!f(function(){new x(-1)})||f(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){x=function ArrayBuffer(t){return s(this,x),new O(v(t))};for(var T,R=x[m]=O[m],L=p(O),G=0;L.length>G;)(T=L[G++])in x||c(x,T,O[T]);o||(R.constructor=x)}var D=new S(new x(2)),C=S[m].setInt8;D.setInt8(0,2147483648),D.setInt8(1,2147483649),!D.getInt8(0)&&D.getInt8(1)||a(S[m],{setInt8:function setInt8(t,n){C.call(this,t,n<<24>>24)},setUint8:function setUint8(t,n){C.call(this,t,n<<24>>24)}},!0)}else x=function ArrayBuffer(t){s(this,x,"ArrayBuffer");var n=v(t);this._b=y.call(Array(n),0),this[N]=n},S=function DataView(t,n,r){s(this,S,"DataView"),s(t,x,"DataView");var e=t[N],i=l(n);if(i<0||i>e)throw _("Wrong offset!");if(r=void 0===r?e-i:h(r),i+r>e)throw _("Wrong length!");this[k]=t,this[j]=i,this[N]=r},i&&(addGetter(x,"byteLength","_l"),addGetter(S,"buffer","_b"),addGetter(S,"byteLength","_l"),addGetter(S,"byteOffset","_o")),a(S[m],{getInt8:function getInt8(t){return get(this,1,t)[0]<<24>>24},getUint8:function getUint8(t){return get(this,1,t)[0]},getInt16:function getInt16(t){var n=get(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function getUint16(t){var n=get(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function getInt32(t){return unpackI32(get(this,4,t,arguments[1]))},getUint32:function getUint32(t){return unpackI32(get(this,4,t,arguments[1]))>>>0},getFloat32:function getFloat32(t){return unpackIEEE754(get(this,4,t,arguments[1]),23,4)},getFloat64:function getFloat64(t){return unpackIEEE754(get(this,8,t,arguments[1]),52,8)},setInt8:function setInt8(t,n){set(this,1,t,packI8,n)},setUint8:function setUint8(t,n){set(this,1,t,packI8,n)},setInt16:function setInt16(t,n){set(this,2,t,packI16,n,arguments[2])},setUint16:function setUint16(t,n){set(this,2,t,packI16,n,arguments[2])},setInt32:function setInt32(t,n){set(this,4,t,packI32,n,arguments[2])},setUint32:function setUint32(t,n){set(this,4,t,packI32,n,arguments[2])},setFloat32:function setFloat32(t,n){set(this,4,t,packF32,n,arguments[2])},setFloat64:function setFloat64(t,n){set(this,8,t,packF64,n,arguments[2])}});g(x,"ArrayBuffer"),g(S,"DataView"),c(S[m],u.VIEW,!0),r.ArrayBuffer=x,r.DataView=S},{101:101,115:115,116:116,118:118,123:123,29:29,35:35,40:40,42:42,6:6,60:60,72:72,77:77,9:9,93:93}],123:[function(t,n,r){for(var e,i=t(40),o=t(42),u=t(124),c=u("typed_array"),a=u("view"),f=!(!i.ArrayBuffer||!i.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=i[h[l++]])?(o(e.prototype,c,!0),o(e.prototype,a,!0)):s=!1;n.exports={ABV:f,CONSTR:s,TYPED:c,VIEW:a}},{124:124,40:40,42:42}],124:[function(t,n,r){var e=0,i=Math.random();n.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+i).toString(36))}},{}],125:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},{51:51}],126:[function(t,n,r){var e=t(40),i=t(23),o=t(60),u=t(127),c=t(72).f;n.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},{127:127,23:23,40:40,60:60,72:72}],127:[function(t,n,r){r.f=t(128)},{128:128}],128:[function(t,n,r){var e=t(103)("wks"),i=t(124),o=t(40).Symbol,u="function"==typeof o;(n.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},{103:103,124:124,40:40}],129:[function(t,n,r){var e=t(17),i=t(128)("iterator"),o=t(58);n.exports=t(23).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[e(t)]}},{128:128,17:17,23:23,58:58}],130:[function(t,n,r){var e=t(33),i=t(95)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function escape(t){return i(t)}})},{33:33,95:95}],131:[function(t,n,r){var e=t(33);e(e.P,"Array",{copyWithin:t(8)}),t(5)("copyWithin")},{33:33,5:5,8:8}],132:[function(t,n,r){"use strict";var e=t(33),i=t(12)(4);e(e.P+e.F*!t(105)([].every,!0),"Array",{every:function every(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],133:[function(t,n,r){var e=t(33);e(e.P,"Array",{fill:t(9)}),t(5)("fill")},{33:33,5:5,9:9}],134:[function(t,n,r){"use strict";var e=t(33),i=t(12)(2);e(e.P+e.F*!t(105)([].filter,!0),"Array",{filter:function filter(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],135:[function(t,n,r){"use strict";var e=t(33),i=t(12)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),e(e.P+e.F*u,"Array",{findIndex:function findIndex(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)(o)},{12:12,33:33,5:5}],136:[function(t,n,r){"use strict";var e=t(33),i=t(12)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),e(e.P+e.F*o,"Array",{find:function find(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("find")},{12:12,33:33,5:5}],137:[function(t,n,r){"use strict";var e=t(33),i=t(12)(0),o=t(105)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function forEach(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],138:[function(t,n,r){"use strict";var e=t(25),i=t(33),o=t(119),u=t(53),c=t(48),a=t(118),f=t(24),s=t(129);i(i.S+i.F*!t(56)(function(t){Array.from(t)}),"Array",{from:function from(t){var n,r,i,l,h=o(t),v="function"==typeof this?this:Array,p=arguments.length,d=p>1?arguments[1]:void 0,y=void 0!==d,g=0,m=s(h);if(y&&(d=e(d,p>2?arguments[2]:void 0,2)),void 0==m||v==Array&&c(m))for(n=a(h.length),r=new v(n);n>g;g++)f(r,g,y?d(h[g],g):h[g]);else for(l=m.call(h),r=new v;!(i=l.next()).done;g++)f(r,g,y?u(l,d,[i.value,g],!0):i.value);return r.length=g,r}})},{118:118,119:119,129:129,24:24,25:25,33:33,48:48,53:53,56:56}],139:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!t(105)(o)),"Array",{indexOf:function indexOf(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},{105:105,11:11,33:33}],140:[function(t,n,r){var e=t(33);e(e.S,"Array",{isArray:t(49)})},{33:33,49:49}],141:[function(t,n,r){"use strict";var e=t(5),i=t(57),o=t(58),u=t(117);n.exports=t(55)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):"keys"==n?i(0,r):"values"==n?i(0,t[r]):i(0,[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},{117:117,5:5,55:55,57:57,58:58}],142:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=[].join;e(e.P+e.F*(t(47)!=Object||!t(105)(o)),"Array",{join:function join(t){return o.call(i(this),void 0===t?",":t)}})},{105:105,117:117,33:33,47:47}],143:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=t(116),u=t(118),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!t(105)(c)),"Array",{lastIndexOf:function lastIndexOf(t){if(a)return c.apply(this,arguments)||0;var n=i(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,o(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},{105:105,116:116,117:117,118:118,33:33}],144:[function(t,n,r){"use strict";var e=t(33),i=t(12)(1);e(e.P+e.F*!t(105)([].map,!0),"Array",{map:function map(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],145:[function(t,n,r){"use strict";var e=t(33),i=t(24);e(e.S+e.F*t(35)(function(){function F(){}return!(Array.of.call(F)instanceof F)}),"Array",{of:function of(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)i(r,t,arguments[t++]);return r.length=n,r}})},{24:24,33:33,35:35}],146:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduceRight,!0),"Array",{reduceRight:function reduceRight(t){return i(this,t,arguments.length,arguments[1],!0)}})},{105:105,13:13,33:33}],147:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduce,!0),"Array",{reduce:function reduce(t){return i(this,t,arguments.length,arguments[1],!1)}})},{105:105,13:13,33:33}],148:[function(t,n,r){"use strict";var e=t(33),i=t(43),o=t(18),u=t(114),c=t(118),a=[].slice;e(e.P+e.F*t(35)(function(){i&&a.call(i)}),"Array",{slice:function slice(t,n){var r=c(this.length),e=o(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var i=u(t,r),f=u(n,r),s=c(f-i),l=Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(i+h):this[i+h];return l}})},{114:114,118:118,18:18,33:33,35:35,43:43}],149:[function(t,n,r){"use strict";var e=t(33),i=t(12)(3);e(e.P+e.F*!t(105)([].some,!0),"Array",{some:function some(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],150:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(119),u=t(35),c=[].sort,a=[1,2,3];e(e.P+e.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!t(105)(c)),"Array",{sort:function sort(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},{105:105,119:119,3:3,33:33,35:35}],151:[function(t,n,r){t(100)("Array")},{100:100}],152:[function(t,n,r){var e=t(33);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},{33:33}],153:[function(t,n,r){var e=t(33),i=t(26);e(e.P+e.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},{26:26,33:33}],154:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120);e(e.P+e.F*t(35)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function toJSON(t){var n=i(this),r=o(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},{119:119,120:120,33:33,35:35}],155:[function(t,n,r){var e=t(128)("toPrimitive"),i=Date.prototype;e in i||t(42)(i,e,t(27))},{128:128,27:27,42:42}],156:[function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&t(94)(e,"toString",function toString(){var t=o.call(this);return t===t?i.call(this):"Invalid Date"})},{94:94}],157:[function(t,n,r){var e=t(33);e(e.P,"Function",{bind:t(16)})},{16:16,33:33}],158:[function(t,n,r){"use strict";var e=t(51),i=t(79),o=t(128)("hasInstance"),u=Function.prototype;o in u||t(72).f(u,o,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},{128:128,51:51,72:72,79:79}],159:[function(t,n,r){var e=t(72).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||t(29)&&e(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},{29:29,72:72}],160:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Map",function(t){return function Map(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function get(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function set(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},{125:125,19:19,22:22}],161:[function(t,n,r){var e=t(33),i=t(63),o=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function acosh(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},{33:33,63:63}],162:[function(t,n,r){function asinh(t){return isFinite(t=+t)&&0!=t?t<0?-asinh(-t):Math.log(t+Math.sqrt(t*t+1)):t}var e=t(33),i=Math.asinh;e(e.S+e.F*!(i&&1/i(0)>0),"Math",{asinh:asinh})},{33:33}],163:[function(t,n,r){var e=t(33),i=Math.atanh;e(e.S+e.F*!(i&&1/i(-0)<0),"Math",{atanh:function atanh(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{33:33}],164:[function(t,n,r){var e=t(33),i=t(65);e(e.S,"Math",{cbrt:function cbrt(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},{33:33,65:65}],165:[function(t,n,r){var e=t(33);e(e.S,"Math",{clz32:function clz32(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{33:33}],166:[function(t,n,r){var e=t(33),i=Math.exp;e(e.S,"Math",{cosh:function cosh(t){return(i(t=+t)+i(-t))/2}})},{33:33}],167:[function(t,n,r){var e=t(33),i=t(61);e(e.S+e.F*(i!=Math.expm1),"Math",{expm1:i})},{33:33,61:61}],168:[function(t,n,r){var e=t(33);e(e.S,"Math",{fround:t(62)})},{33:33,62:62}],169:[function(t,n,r){var e=t(33),i=Math.abs;e(e.S,"Math",{hypot:function hypot(t,n){for(var r,e,o=0,u=0,c=arguments.length,a=0;u<c;)r=i(arguments[u++]),a<r?(e=a/r,o=o*e*e+1,a=r):r>0?(e=r/a,o+=e*e):o+=r;return a===1/0?1/0:a*Math.sqrt(o)}})},{33:33}],170:[function(t,n,r){var e=t(33),i=Math.imul;e(e.S+e.F*t(35)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function imul(t,n){var r=+t,e=+n,i=65535&r,o=65535&e;return 0|i*o+((65535&r>>>16)*o+i*(65535&e>>>16)<<16>>>0)}})},{33:33,35:35}],171:[function(t,n,r){var e=t(33);e(e.S,"Math",{log10:function log10(t){return Math.log(t)*Math.LOG10E}})},{33:33}],172:[function(t,n,r){var e=t(33);e(e.S,"Math",{log1p:t(63)})},{33:33,63:63}],173:[function(t,n,r){var e=t(33);e(e.S,"Math",{log2:function log2(t){return Math.log(t)/Math.LN2}})},{33:33}],174:[function(t,n,r){var e=t(33);e(e.S,"Math",{sign:t(65)})},{33:33,65:65}],175:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S+e.F*t(35)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function sinh(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},{33:33,35:35,61:61}],176:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S,"Math",{tanh:function tanh(t){var n=i(t=+t),r=i(-t);return n==1/0?1:r==1/0?-1:(n-r)/(o(t)+o(-t))}})},{33:33,61:61}],177:[function(t,n,r){var e=t(33);e(e.S,"Math",{trunc:function trunc(t){return(t>0?Math.floor:Math.ceil)(t)}})},{33:33}],178:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(18),u=t(45),c=t(120),a=t(35),f=t(77).f,s=t(75).f,l=t(72).f,h=t(111).trim,v=e.Number,p=v,d=v.prototype,y="Number"==o(t(71)(d)),g="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){n=g?n.trim():h(n,3);var r,e,i,o=n.charCodeAt(0);if(43===o||45===o){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:e=2,i=49;break;case 79:case 111:e=8,i=55;break;default:return+n}for(var u,a=n.slice(2),f=0,s=a.length;f<s;f++)if((u=a.charCodeAt(f))<48||u>i)return NaN;return parseInt(a,e)}}return+n};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function Number(t){var n=arguments.length<1?0:t,r=this;return r instanceof v&&(y?a(function(){d.valueOf.call(r)}):"Number"!=o(r))?u(new p(m(n)),r,v):m(n)};for(var b,x=t(29)?f(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;x.length>S;S++)i(p,b=x[S])&&!i(v,b)&&l(v,b,s(p,b));v.prototype=d,d.constructor=v,t(94)(e,"Number",v)}},{111:111,120:120,18:18,29:29,35:35,40:40,41:41,45:45,71:71,72:72,75:75,77:77,94:94}],179:[function(t,n,r){var e=t(33);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},{33:33}],180:[function(t,n,r){var e=t(33),i=t(40).isFinite;e(e.S,"Number",{isFinite:function isFinite(t){return"number"==typeof t&&i(t)}})},{33:33,40:40}],181:[function(t,n,r){var e=t(33);e(e.S,"Number",{isInteger:t(50)})},{33:33,50:50}],182:[function(t,n,r){var e=t(33);e(e.S,"Number",{isNaN:function isNaN(t){return t!=t}})},{33:33}],183:[function(t,n,r){var e=t(33),i=t(50),o=Math.abs;e(e.S,"Number",{isSafeInteger:function isSafeInteger(t){return i(t)&&o(t)<=9007199254740991}})},{33:33,50:50}],184:[function(t,n,r){var e=t(33);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{33:33}],185:[function(t,n,r){var e=t(33);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{33:33}],186:[function(t,n,r){var e=t(33),i=t(86);e(e.S+e.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},{33:33,86:86}],187:[function(t,n,r){var e=t(33),i=t(87);e(e.S+e.F*(Number.parseInt!=i),"Number",{parseInt:i})},{33:33,87:87}],188:[function(t,n,r){"use strict";var e=t(33),i=t(116),o=t(4),u=t(110),c=1..toFixed,a=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*f[r],f[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=f[n],f[n]=a(r/t),r=r%t*1e7},v=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var r=String(f[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},p=function(t,n,r){return 0===n?r:n%2==1?p(t,n-1,r*t):p(t*t,n/2,r)},d=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(35)(function(){c.call({})})),"Number",{toFixed:function toFixed(t){var n,r,e,c,a=o(this,s),f=i(t),y="",g="0";if(f<0||f>20)throw RangeError(s);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(y="-",a=-a),a>1e-21)if(n=d(a*p(2,69,1))-69,r=n<0?a*p(2,-n,1):a/p(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=f;e>=7;)l(1e7,0),e-=7;for(l(p(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=v()}else l(0,r),l(1<<-n,0),g=v()+u.call("0",f);return f>0?(c=g.length,g=y+(c<=f?"0."+u.call("0",f-c)+g:g.slice(0,c-f)+"."+g.slice(c-f))):g=y+g,g}})},{110:110,116:116,33:33,35:35,4:4}],189:[function(t,n,r){"use strict";var e=t(33),i=t(35),o=t(4),u=1..toPrecision;e(e.P+e.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function toPrecision(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},{33:33,35:35,4:4}],190:[function(t,n,r){var e=t(33);e(e.S+e.F,"Object",{assign:t(70)})},{33:33,70:70}],191:[function(t,n,r){var e=t(33);e(e.S,"Object",{create:t(71)})},{33:33,71:71}],192:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperties:t(73)})},{29:29,33:33,73:73}],193:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperty:t(72).f})},{29:29,33:33,72:72}],194:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("freeze",function(t){return function freeze(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],195:[function(t,n,r){var e=t(117),i=t(75).f;t(83)("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(t,n){return i(e(t),n)}})},{117:117,75:75,83:83}],196:[function(t,n,r){t(83)("getOwnPropertyNames",function(){return t(76).f})},{76:76,83:83}],197:[function(t,n,r){var e=t(119),i=t(79);t(83)("getPrototypeOf",function(){return function getPrototypeOf(t){return i(e(t))}})},{119:119,79:79,83:83}],198:[function(t,n,r){var e=t(51);t(83)("isExtensible",function(t){return function isExtensible(n){return!!e(n)&&(!t||t(n))}})},{51:51,83:83}],199:[function(t,n,r){var e=t(51);t(83)("isFrozen",function(t){return function isFrozen(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],200:[function(t,n,r){var e=t(51);t(83)("isSealed",function(t){return function isSealed(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],201:[function(t,n,r){var e=t(33);e(e.S,"Object",{is:t(96)})},{33:33,96:96}],202:[function(t,n,r){var e=t(119),i=t(81);t(83)("keys",function(){return function keys(t){return i(e(t))}})},{119:119,81:81,83:83}],203:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("preventExtensions",function(t){return function preventExtensions(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],204:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("seal",function(t){return function seal(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],205:[function(t,n,r){var e=t(33);e(e.S,"Object",{setPrototypeOf:t(99).set})},{33:33,99:99}],206:[function(t,n,r){"use strict";var e=t(17),i={};i[t(128)("toStringTag")]="z",i+""!="[object z]"&&t(94)(Object.prototype,"toString",function toString(){return"[object "+e(this)+"]"},!0)},{128:128,17:17,94:94}],207:[function(t,n,r){var e=t(33),i=t(86);e(e.G+e.F*(parseFloat!=i),{parseFloat:i})},{33:33,86:86}],208:[function(t,n,r){var e=t(33),i=t(87);e(e.G+e.F*(parseInt!=i),{parseInt:i})},{33:33,87:87}],209:[function(t,n,r){"use strict";var e,i,o,u,c=t(60),a=t(40),f=t(25),s=t(17),l=t(33),h=t(51),v=t(3),p=t(6),d=t(39),y=t(104),g=t(113).set,m=t(68)(),b=t(69),x=t(90),S=t(91),w=a.TypeError,_=a.process,E=a.Promise,O="process"==s(_),P=function(){},M=i=b.f,F=!!function(){try{var n=E.resolve(1),r=(n.constructor={})[t(128)("species")]=function(t){t(P,P)};return(O||"function"==typeof PromiseRejectionEvent)&&n.then(P)instanceof r}catch(t){}}(),I=c?function(t,n){return t===n||t===E&&n===u}:function(t,n){return t===n},A=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},k=function(t,n){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var e=t._v,i=1==t._s,o=0;r.length>o;)!function(n){var r,o,u=i?n.ok:n.fail,c=n.resolve,a=n.reject,f=n.domain;try{u?(i||(2==t._h&&T(t),t._h=1),!0===u?r=e:(f&&f.enter(),r=u(e),f&&f.exit()),r===n.promise?a(w("Promise-chain cycle")):(o=A(r))?o.call(r,c,a):c(r)):a(e)}catch(t){a(t)}}(r[o++]);t._c=[],t._n=!1,n&&!t._h&&N(t)})}},N=function(t){g.call(a,function(){var n,r,e,i=t._v,o=j(t);if(o&&(n=x(function(){O?_.emit("unhandledRejection",i,t):(r=a.onunhandledrejection)?r({promise:t,reason:i}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=O||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){if(1==t._h)return!1;for(var n,r=t._a||t._c,e=0;r.length>e;)if(n=r[e++],n.fail||!j(n.promise))return!1;return!0},T=function(t){g.call(a,function(){var n;O?_.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},R=function(t){var n=this;n._d||(n._d=!0,n=n._w||n,n._v=t,n._s=2,n._a||(n._a=n._c.slice()),k(n,!0))},L=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw w("Promise can't be resolved itself");(n=A(t))?m(function(){var e={_w:r,_d:!1};try{n.call(t,f(L,e,1),f(R,e,1))}catch(t){R.call(e,t)}}):(r._v=t,r._s=1,k(r,!1))}catch(t){R.call({_w:r,_d:!1},t)}}};F||(E=function Promise(t){p(this,E,"Promise","_h"),v(t),e.call(this);try{t(f(L,this,1),f(R,this,1))}catch(t){R.call(this,t)}},e=function Promise(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},e.prototype=t(93)(E.prototype,{then:function then(t,n){var r=M(y(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=O?_.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&k(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=f(L,t,1),this.reject=f(R,t,1)},b.f=M=function(t){return I(E,t)?new o(t):i(t)}),l(l.G+l.W+l.F*!F,{Promise:E}),t(101)(E,"Promise"),t(100)("Promise"),u=t(23).Promise,l(l.S+l.F*!F,"Promise",{reject:function reject(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!F),"Promise",{resolve:function resolve(t){return t instanceof E&&I(t.constructor,this)?t:S(this,t)}}),l(l.S+l.F*!(F&&t(56)(function(t){E.all(t).catch(P)})),"Promise",{all:function all(t){var n=this,r=M(n),e=r.resolve,i=r.reject,o=x(function(){var r=[],o=0,u=1;d(t,!1,function(t){var c=o++,a=!1;r.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,r[c]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function race(t){var n=this,r=M(n),e=r.reject,i=x(function(){d(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},{100:100,101:101,104:104,113:113,128:128,17:17,23:23,25:25,3:3,33:33,39:39,40:40,51:51,56:56,6:6,60:60,68:68,69:69,90:90,91:91,93:93}],210:[function(t,n,r){var e=t(33),i=t(3),o=t(7),u=(t(40).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!t(35)(function(){u(function(){})}),"Reflect",{apply:function apply(t,n,r){var e=i(t),a=o(r);return u?u(e,n,a):c.call(e,n,a)}})},{3:3,33:33,35:35,40:40,7:7}],211:[function(t,n,r){var e=t(33),i=t(71),o=t(3),u=t(7),c=t(51),a=t(35),f=t(16),s=(t(40).Reflect||{}).construct,l=a(function(){function F(){}return!(s(function(){},[],F)instanceof F)}),h=!a(function(){s(function(){})});e(e.S+e.F*(l||h),"Reflect",{construct:function construct(t,n){o(t),u(n);var r=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(f.apply(t,e))}var a=r.prototype,v=i(c(a)?a:Object.prototype),p=Function.apply.call(t,v,n);return c(p)?p:v}})},{16:16,3:3,33:33,35:35,40:40,51:51,7:7,71:71}],212:[function(t,n,r){var e=t(72),i=t(33),o=t(7),u=t(120);i(i.S+i.F*t(35)(function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function defineProperty(t,n,r){o(t),n=u(n,!0),o(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},{120:120,33:33,35:35,7:7,72:72}],213:[function(t,n,r){var e=t(33),i=t(75).f,o=t(7);e(e.S,"Reflect",{deleteProperty:function deleteProperty(t,n){var r=i(o(t),n);return!(r&&!r.configurable)&&delete t[n]}})},{33:33,7:7,75:75}],214:[function(t,n,r){"use strict";var e=t(33),i=t(7),o=function(t){this._t=i(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};t(54)(o,"Object",function(){var t,n=this,r=n._k;do{if(n._i>=r.length)return{value:void 0,done:!0}}while(!((t=r[n._i++])in n._t));return{value:t,done:!1}}),e(e.S,"Reflect",{enumerate:function enumerate(t){return new o(t)}})},{33:33,54:54,7:7}],215:[function(t,n,r){var e=t(75),i=t(33),o=t(7);i(i.S,"Reflect",{getOwnPropertyDescriptor:function getOwnPropertyDescriptor(t,n){return e.f(o(t),n)}})},{33:33,7:7,75:75}],216:[function(t,n,r){var e=t(33),i=t(79),o=t(7);e(e.S,"Reflect",{getPrototypeOf:function getPrototypeOf(t){return i(o(t))}})},{33:33,7:7,79:79}],217:[function(t,n,r){function get(t,n){var r,u,f=arguments.length<3?t:arguments[2];return a(t)===f?t[n]:(r=e.f(t,n))?o(r,"value")?r.value:void 0!==r.get?r.get.call(f):void 0:c(u=i(t))?get(u,n,f):void 0}var e=t(75),i=t(79),o=t(41),u=t(33),c=t(51),a=t(7);u(u.S,"Reflect",{get:get})},{33:33,41:41,51:51,7:7,75:75,79:79}],218:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{has:function has(t,n){return n in t}})},{33:33}],219:[function(t,n,r){var e=t(33),i=t(7),o=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function isExtensible(t){return i(t),!o||o(t)}})},{33:33,7:7}],220:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{ownKeys:t(85)})},{33:33,85:85}],221:[function(t,n,r){var e=t(33),i=t(7),o=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function preventExtensions(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},{33:33,7:7}],222:[function(t,n,r){var e=t(33),i=t(99);i&&e(e.S,"Reflect",{setPrototypeOf:function setPrototypeOf(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},{33:33,99:99}],223:[function(t,n,r){function set(t,n,r){var c,l,h=arguments.length<4?t:arguments[3],v=i.f(f(t),n);if(!v){if(s(l=o(t)))return set(l,n,r,h);v=a(0)}return u(v,"value")?!(!1===v.writable||!s(h))&&(c=i.f(h,n)||a(0),c.value=r,e.f(h,n,c),!0):void 0!==v.set&&(v.set.call(h,r),!0)}var e=t(72),i=t(75),o=t(79),u=t(41),c=t(33),a=t(92),f=t(7),s=t(51);c(c.S,"Reflect",{set:set})},{33:33,41:41,51:51,7:7,72:72,75:75,79:79,92:92}],224:[function(t,n,r){var e=t(40),i=t(45),o=t(72).f,u=t(77).f,c=t(52),a=t(37),f=e.RegExp,s=f,l=f.prototype,h=/a/g,v=/a/g,p=new f(h)!==h;if(t(29)&&(!p||t(35)(function(){return v[t(128)("match")]=!1,f(h)!=h||f(v)==v||"/a/i"!=f(h,"i")}))){f=function RegExp(t,n){var r=this instanceof f,e=c(t),o=void 0===n;return!r&&e&&t.constructor===f&&o?t:i(p?new s(e&&!o?t.source:t,n):s((e=t instanceof f)?t.source:t,e&&o?a.call(t):n),r?this:l,f)};for(var d=u(s),y=0;d.length>y;)!function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})}(d[y++]);l.constructor=f,f.prototype=l,t(94)(e,"RegExp",f)}t(100)("RegExp")},{100:100,128:128,29:29,35:35,37:37,40:40,45:45,52:52,72:72,77:77,94:94}],225:[function(t,n,r){t(29)&&"g"!=/./g.flags&&t(72).f(RegExp.prototype,"flags",{configurable:!0,get:t(37)})},{29:29,37:37,72:72}],226:[function(t,n,r){t(36)("match",1,function(t,n,r){return[function match(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],227:[function(t,n,r){t(36)("replace",2,function(t,n,r){return[function replace(e,i){"use strict";var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},{36:36}],228:[function(t,n,r){t(36)("search",1,function(t,n,r){return[function search(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],229:[function(t,n,r){t(36)("split",2,function(n,r,e){"use strict";var i=t(52),o=e,u=[].push,c="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[c]||2!="ab".split(/(?:ab)*/)[c]||4!=".".split(/(.?)(.?)/)[c]||".".split(/()()/)[c]>1||"".split(/.?/)[c]){var a=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(r,t,n);var e,f,s,l,h,v=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,y=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,p+"g");for(a||(e=new RegExp("^"+g.source+"$(?!\\s)",p));(f=g.exec(r))&&!((s=f.index+f[0][c])>d&&(v.push(r.slice(d,f.index)),!a&&f[c]>1&&f[0].replace(e,function(){for(h=1;h<arguments[c]-2;h++)void 0===arguments[h]&&(f[h]=void 0)}),f[c]>1&&f.index<r[c]&&u.apply(v,f.slice(1)),l=f[0][c],d=s,v[c]>=y));)g.lastIndex===f.index&&g.lastIndex++;return d===r[c]?!l&&g.test("")||v.push(""):v.push(r.slice(d)),v[c]>y?v.slice(0,y):v}}else"0".split(void 0,0)[c]&&(e=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function split(t,i){var o=n(this),u=void 0==t?void 0:t[r];return void 0!==u?u.call(t,o,i):e.call(String(o),t,i)},e]})},{36:36,52:52}],230:[function(t,n,r){"use strict";t(225);var e=t(7),i=t(37),o=t(29),u=/./.toString,c=function(n){t(94)(RegExp.prototype,"toString",n,!0)};t(35)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function toString(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function toString(){return u.call(this)})},{225:225,29:29,35:35,37:37,7:7,94:94}],231:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Set",function(t){return function Set(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},{125:125,19:19,22:22}],232:[function(t,n,r){"use strict";t(108)("anchor",function(t){return function anchor(n){return t(this,"a","name",n)}})},{108:108}],233:[function(t,n,r){"use strict";t(108)("big",function(t){return function big(){return t(this,"big","","")}})},{108:108}],234:[function(t,n,r){"use strict";t(108)("blink",function(t){return function blink(){return t(this,"blink","","")}})},{108:108}],235:[function(t,n,r){"use strict";t(108)("bold",function(t){return function bold(){return t(this,"b","","")}})},{108:108}],236:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!1);e(e.P,"String",{codePointAt:function codePointAt(t){return i(this,t)}})},{106:106,33:33}],237:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".endsWith;e(e.P+e.F*t(34)("endsWith"),"String",{endsWith:function endsWith(t){var n=o(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=i(n.length),c=void 0===r?e:Math.min(i(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},{107:107,118:118,33:33,34:34}],238:[function(t,n,r){"use strict";t(108)("fixed",function(t){return function fixed(){return t(this,"tt","","")}})},{108:108}],239:[function(t,n,r){"use strict";t(108)("fontcolor",function(t){return function fontcolor(n){return t(this,"font","color",n)}})},{108:108}],240:[function(t,n,r){"use strict";t(108)("fontsize",function(t){return function fontsize(n){return t(this,"font","size",n)}})},{108:108}],241:[function(t,n,r){var e=t(33),i=t(114),o=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function fromCodePoint(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},{114:114,33:33}],242:[function(t,n,r){"use strict";var e=t(33),i=t(107);e(e.P+e.F*t(34)("includes"),"String",{includes:function includes(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},{107:107,33:33,34:34}],243:[function(t,n,r){"use strict";t(108)("italics",function(t){return function italics(){return t(this,"i","","")}})},{108:108}],244:[function(t,n,r){"use strict";var e=t(106)(!0);t(55)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},{106:106,55:55}],245:[function(t,n,r){"use strict";t(108)("link",function(t){return function link(n){return t(this,"a","href",n)}})},{108:108}],246:[function(t,n,r){var e=t(33),i=t(117),o=t(118);e(e.S,"String",{raw:function raw(t){for(var n=i(t.raw),r=o(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},{117:117,118:118,33:33}],247:[function(t,n,r){var e=t(33);e(e.P,"String",{repeat:t(110)})},{110:110,33:33}],248:[function(t,n,r){"use strict";t(108)("small",function(t){return function small(){return t(this,"small","","")}})},{108:108}],249:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".startsWith;e(e.P+e.F*t(34)("startsWith"),"String",{startsWith:function startsWith(t){var n=o(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},{107:107,118:118,33:33,34:34}],250:[function(t,n,r){"use strict";t(108)("strike",function(t){return function strike(){return t(this,"strike","","")}})},{108:108}],251:[function(t,n,r){"use strict";t(108)("sub",function(t){return function sub(){return t(this,"sub","","")}})},{108:108}],252:[function(t,n,r){"use strict";t(108)("sup",function(t){return function sup(){return t(this,"sup","","")}})},{108:108}],253:[function(t,n,r){"use strict";t(111)("trim",function(t){return function trim(){return t(this,3)}})},{111:111}],254:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(29),u=t(33),c=t(94),a=t(66).KEY,f=t(35),s=t(103),l=t(101),h=t(124),v=t(128),p=t(127),d=t(126),y=t(59),g=t(32),m=t(49),b=t(7),x=t(117),S=t(120),w=t(92),_=t(71),E=t(76),O=t(75),P=t(72),M=t(81),F=O.f,I=P.f,A=E.f,k=e.Symbol,N=e.JSON,j=N&&N.stringify,T=v("_hidden"),R=v("toPrimitive"),L={}.propertyIsEnumerable,G=s("symbol-registry"),D=s("symbols"),C=s("op-symbols"),W=Object.prototype,U="function"==typeof k,B=e.QObject,V=!B||!B.prototype||!B.prototype.findChild,z=o&&f(function(){return 7!=_(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=F(W,n);e&&delete W[n],I(t,n,r),e&&t!==W&&I(W,n,e)}:I,q=function(t){var n=D[t]=_(k.prototype);return n._k=t,n},K=U&&"symbol"==typeof k.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof k},Y=function defineProperty(t,n,r){return t===W&&Y(C,n,r),b(t),n=S(n,!0),b(r),i(D,n)?(r.enumerable?(i(t,T)&&t[T][n]&&(t[T][n]=!1),r=_(r,{enumerable:w(0,!1)})):(i(t,T)||I(t,T,w(1,{})),t[T][n]=!0),z(t,n,r)):I(t,n,r)},J=function defineProperties(t,n){b(t);for(var r,e=g(n=x(n)),i=0,o=e.length;o>i;)Y(t,r=e[i++],n[r]);return t},H=function create(t,n){return void 0===n?_(t):J(_(t),n)},X=function propertyIsEnumerable(t){var n=L.call(this,t=S(t,!0));return!(this===W&&i(D,t)&&!i(C,t))&&(!(n||!i(this,t)||!i(D,t)||i(this,T)&&this[T][t])||n)},$=function getOwnPropertyDescriptor(t,n){if(t=x(t),n=S(n,!0),t!==W||!i(D,n)||i(C,n)){var r=F(t,n);return!r||!i(D,n)||i(t,T)&&t[T][n]||(r.enumerable=!0),r}},Z=function getOwnPropertyNames(t){for(var n,r=A(x(t)),e=[],o=0;r.length>o;)i(D,n=r[o++])||n==T||n==a||e.push(n);return e},Q=function getOwnPropertySymbols(t){for(var n,r=t===W,e=A(r?C:x(t)),o=[],u=0;e.length>u;)!i(D,n=e[u++])||r&&!i(W,n)||o.push(D[n]);return o};U||(k=function Symbol(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===W&&n.call(C,r),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),z(this,t,w(1,r))};return o&&V&&z(W,t,{configurable:!0,set:n}),q(t)},c(k.prototype,"toString",function toString(){return this._k}),O.f=$,P.f=Y,t(77).f=E.f=Z,t(82).f=X,t(78).f=Q,o&&!t(60)&&c(W,"propertyIsEnumerable",X,!0),p.f=function(t){return q(v(t))}),u(u.G+u.W+u.F*!U,{Symbol:k});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;tt.length>nt;)v(tt[nt++]);for(var rt=M(v.store),et=0;rt.length>et;)d(rt[et++]);u(u.S+u.F*!U,"Symbol",{for:function(t){return i(G,t+="")?G[t]:G[t]=k(t)},keyFor:function keyFor(t){if(K(t))return y(G,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){V=!0},useSimple:function(){V=!1}}),u(u.S+u.F*!U,"Object",{create:H,defineProperty:Y,defineProperties:J,getOwnPropertyDescriptor:$,getOwnPropertyNames:Z,getOwnPropertySymbols:Q}),N&&u(u.S+u.F*(!U||f(function(){var t=k();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))})),"JSON",{stringify:function stringify(t){if(void 0!==t&&!K(t)){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);return n=e[1],"function"==typeof n&&(r=n),!r&&m(n)||(n=function(t,n){if(r&&(n=r.call(this,t,n)),!K(n))return n}),e[1]=n,j.apply(N,e)}}}),k.prototype[R]||t(42)(k.prototype,R,k.prototype.valueOf),l(k,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},{101:101,103:103,117:117,120:120,124:124,126:126,127:127,128:128,29:29,32:32,33:33,35:35,40:40,41:41,42:42,49:49,59:59,60:60,66:66,7:7,71:71,72:72,75:75,76:76,77:77,78:78,81:81,82:82,92:92,94:94}],255:[function(t,n,r){"use strict";var e=t(33),i=t(123),o=t(122),u=t(7),c=t(114),a=t(118),f=t(51),s=t(40).ArrayBuffer,l=t(104),h=o.ArrayBuffer,v=o.DataView,p=i.ABV&&s.isView,d=h.prototype.slice,y=i.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!i.CONSTR,"ArrayBuffer",{isView:function isView(t){return p&&p(t)||f(t)&&y in t}}),e(e.P+e.U+e.F*t(35)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function slice(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),i=c(void 0===n?r:n,r),o=new(l(this,h))(a(i-e)),f=new v(this),s=new v(o),p=0;e<i;)s.setUint8(p++,f.getUint8(e++));return o}}),t(100)("ArrayBuffer")},{100:100,104:104,114:114,118:118,122:122,123:123,33:33,35:35,40:40,51:51,7:7}],256:[function(t,n,r){var e=t(33);e(e.G+e.W+e.F*!t(123).ABV,{DataView:t(122).DataView})},{122:122,123:123,33:33}],257:[function(t,n,r){t(121)("Float32",4,function(t){return function Float32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],258:[function(t,n,r){t(121)("Float64",8,function(t){return function Float64Array(n,r,e){return t(this,n,r,e)}})},{121:121}],259:[function(t,n,r){t(121)("Int16",2,function(t){return function Int16Array(n,r,e){return t(this,n,r,e)}})},{121:121}],260:[function(t,n,r){t(121)("Int32",4,function(t){return function Int32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],261:[function(t,n,r){t(121)("Int8",1,function(t){return function Int8Array(n,r,e){return t(this,n,r,e)}})},{121:121}],262:[function(t,n,r){t(121)("Uint16",2,function(t){return function Uint16Array(n,r,e){return t(this,n,r,e)}})},{121:121}],263:[function(t,n,r){t(121)("Uint32",4,function(t){return function Uint32Array(n,r,e){return t(this,n,r,e)}})},{121:121}],264:[function(t,n,r){t(121)("Uint8",1,function(t){return function Uint8Array(n,r,e){return t(this,n,r,e)}})},{121:121}],265:[function(t,n,r){t(121)("Uint8",1,function(t){return function Uint8ClampedArray(n,r,e){return t(this,n,r,e)}},!0)},{121:121}],266:[function(t,n,r){"use strict";var e,i=t(12)(0),o=t(94),u=t(66),c=t(70),a=t(21),f=t(51),s=t(35),l=t(125),h=u.getWeak,v=Object.isExtensible,p=a.ufstore,d={},y=function(t){return function WeakMap(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function get(t){if(f(t)){var n=h(t);return!0===n?p(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function set(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=n.exports=t(22)("WeakMap",y,g,a,!0,!0);s(function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)})&&(e=a.getConstructor(y,"WeakMap"),c(e.prototype,g),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,r=n[t];o(n,t,function(n,i){if(f(n)&&!v(n)){this._f||(this._f=new e);var o=this._f[t](n,i);return"set"==t?this:o}return r.call(this,n,i)})}))},{12:12,125:125,21:21,22:22,35:35,51:51,66:66,70:70,94:94}],267:[function(t,n,r){"use strict";var e=t(21),i=t(125);t(22)("WeakSet",function(t){return function WeakSet(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(t){return e.def(i(this,"WeakSet"),t,!0)}},e,!1,!0)},{125:125,21:21,22:22}],268:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(3),a=t(15);e(e.P,"Array",{flatMap:function flatMap(t){var n,r,e=o(this);return c(t),n=u(e.length),r=a(e,0),i(r,e,e,n,0,1,t,arguments[1]),r}}),t(5)("flatMap")},{118:118,119:119,15:15,3:3,33:33,38:38,5:5}],269:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(116),a=t(15);e(e.P,"Array",{flatten:function flatten(){var t=arguments[0],n=o(this),r=u(n.length),e=a(n,0);return i(e,n,n,r,0,void 0===t?1:c(t)),e}}),t(5)("flatten")},{116:116,118:118,119:119,15:15,33:33,38:38,5:5}],270:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!0);e(e.P,"Array",{includes:function includes(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("includes")},{11:11,33:33,5:5}],271:[function(t,n,r){var e=t(33),i=t(68)(),o=t(40).process,u="process"==t(18)(o);e(e.G,{asap:function asap(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},{18:18,33:33,40:40,68:68}],272:[function(t,n,r){var e=t(33),i=t(18);e(e.S,"Error",{isError:function isError(t){return"Error"===i(t)}})},{18:18,33:33}],273:[function(t,n,r){var e=t(33);e(e.G,{global:t(40)})},{33:33,40:40}],274:[function(t,n,r){t(97)("Map")},{97:97}],275:[function(t,n,r){t(98)("Map")},{98:98}],276:[function(t,n,r){var e=t(33);e(e.P+e.R,"Map",{toJSON:t(20)("Map")})},{20:20,33:33}],277:[function(t,n,r){var e=t(33);e(e.S,"Math",{clamp:function clamp(t,n,r){return Math.min(r,Math.max(n,t))}})},{33:33}],278:[function(t,n,r){var e=t(33);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},{33:33}],279:[function(t,n,r){var e=t(33),i=180/Math.PI;e(e.S,"Math",{degrees:function degrees(t){return t*i}})},{33:33}],280:[function(t,n,r){var e=t(33),i=t(64),o=t(62);e(e.S,"Math",{fscale:function fscale(t,n,r,e,u){return o(i(t,n,r,e,u))}})},{33:33,62:62,64:64}],281:[function(t,n,r){var e=t(33);e(e.S,"Math",{iaddh:function iaddh(t,n,r,e){var i=t>>>0,o=n>>>0,u=r>>>0;return o+(e>>>0)+((i&u|(i|u)&~(i+u>>>0))>>>31)|0}})},{33:33}],282:[function(t,n,r){var e=t(33);e(e.S,"Math",{imulh:function imulh(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>16,c=e>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},{33:33}],283:[function(t,n,r){var e=t(33);e(e.S,"Math",{isubh:function isubh(t,n,r,e){var i=t>>>0,o=n>>>0,u=r>>>0;return o-(e>>>0)-((~i&u|~(i^u)&i-u>>>0)>>>31)|0}})},{33:33}],284:[function(t,n,r){var e=t(33);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},{33:33}],285:[function(t,n,r){var e=t(33),i=Math.PI/180;e(e.S,"Math",{radians:function radians(t){return t*i}})},{33:33}],286:[function(t,n,r){var e=t(33);e(e.S,"Math",{scale:t(64)})},{33:33,64:64}],287:[function(t,n,r){var e=t(33);e(e.S,"Math",{signbit:function signbit(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},{33:33}],288:[function(t,n,r){var e=t(33);e(e.S,"Math",{umulh:function umulh(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>>16,c=e>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},{33:33}],289:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineGetter__:function __defineGetter__(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],290:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineSetter__:function __defineSetter__(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],291:[function(t,n,r){var e=t(33),i=t(84)(!0);e(e.S,"Object",{entries:function entries(t){return i(t)}})},{33:33,84:84}],292:[function(t,n,r){var e=t(33),i=t(85),o=t(117),u=t(75),c=t(24);e(e.S,"Object",{getOwnPropertyDescriptors:function getOwnPropertyDescriptors(t){for(var n,r,e=o(t),a=u.f,f=i(e),s={},l=0;f.length>l;)void 0!==(r=a(e,n=f[l++]))&&c(s,n,r);return s}})},{117:117,24:24,33:33,75:75,85:85}],293:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupGetter__:function __lookupGetter__(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],294:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupSetter__:function __lookupSetter__(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],295:[function(t,n,r){var e=t(33),i=t(84)(!1);e(e.S,"Object",{values:function values(t){return i(t)}})},{33:33,84:84}],296:[function(t,n,r){"use strict";var e=t(33),i=t(40),o=t(23),u=t(68)(),c=t(128)("observable"),a=t(3),f=t(7),s=t(6),l=t(93),h=t(42),v=t(39),p=v.RETURN,d=function(t){return null==t?void 0:a(t)},y=function(t){var n=t._c;n&&(t._c=void 0,n())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,y(t))},b=function(t,n){f(t),this._c=void 0,this._o=t,t=new x(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:a(r),this._c=r)}catch(n){return void t.error(n)}g(this)&&y(this)};b.prototype=l({},{unsubscribe:function unsubscribe(){m(this)}});var x=function(t){this._s=t};x.prototype=l({},{next:function next(t){var n=this._s;if(!g(n)){var r=n._o;try{var e=d(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function error(t){var n=this._s;if(g(n))throw t;var r=n._o;n._o=void 0;try{var e=d(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{y(n)}finally{throw t}}return y(n),t},complete:function complete(t){var n=this._s;if(!g(n)){var r=n._o;n._o=void 0;try{var e=d(r.complete);t=e?e.call(r,t):void 0}catch(t){try{y(n)}finally{throw t}}return y(n),t}}});var S=function Observable(t){s(this,S,"Observable","_f")._f=a(t)};l(S.prototype,{subscribe:function subscribe(t){return new b(t,this._f)},forEach:function forEach(t){var n=this;return new(o.Promise||i.Promise)(function(r,e){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),i.unsubscribe()}},error:e,complete:r})})}}),l(S,{from:function from(t){var n="function"==typeof this?this:S,r=d(f(t)[c]);if(r){var e=f(r.call(t));return e.constructor===n?e:new n(function(t){return e.subscribe(t)})}return new n(function(n){var r=!1;return u(function(){if(!r){try{if(v(t,!1,function(t){if(n.next(t),r)return p})===p)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}}),function(){r=!0}})},of:function of(){for(var t=0,n=arguments.length,r=Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var n=!1;return u(function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}}),function(){n=!0}})}}),h(S.prototype,c,function(){return this}),e(e.G,{Observable:S}),t(100)("Observable")},{100:100,128:128,23:23,3:3,33:33,39:39,40:40,42:42,6:6,68:68,7:7,93:93}],297:[function(t,n,r){"use strict";var e=t(33),i=t(23),o=t(40),u=t(104),c=t(91);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then(function(){return r})}:t,r?function(r){return c(n,t()).then(function(){throw r})}:t)}})},{104:104,23:23,33:33,40:40,91:91}],298:[function(t,n,r){"use strict";var e=t(33),i=t(69),o=t(90);e(e.S,"Promise",{try:function(t){var n=i.f(this),r=o(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},{33:33,69:69,90:90}],299:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.set;e.exp({defineMetadata:function defineMetadata(t,n,r,e){u(t,n,i(r),o(e))}})},{67:67,7:7}],300:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function deleteMetadata(t,n){var r=arguments.length<3?void 0:o(arguments[2]),e=u(i(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var a=c.get(n);return a.delete(r),!!a.size||c.delete(n)}})},{67:67,7:7}],301:[function(t,n,r){var e=t(231),i=t(10),o=t(67),u=t(7),c=t(79),a=o.keys,f=o.key,s=function(t,n){var r=a(t,n),o=c(t);if(null===o)return r;var u=s(o,n);return u.length?r.length?i(new e(r.concat(u))):u:r};o.exp({getMetadataKeys:function getMetadataKeys(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},{10:10,231:231,67:67,7:7,79:79}],302:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.get,a=e.key,f=function(t,n,r){if(u(t,n,r))return c(t,n,r);var e=o(n);return null!==e?f(t,e,r):void 0};e.exp({getMetadata:function getMetadata(t,n){return f(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},{67:67,7:7,79:79}],303:[function(t,n,r){var e=t(67),i=t(7),o=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function getOwnMetadataKeys(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},{67:67,7:7}],304:[function(t,n,r){var e=t(67),i=t(7),o=e.get,u=e.key;e.exp({getOwnMetadata:function getOwnMetadata(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],305:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.key,a=function(t,n,r){if(u(t,n,r))return!0;var e=o(n);return null!==e&&a(t,e,r)};e.exp({hasMetadata:function hasMetadata(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},{67:67,7:7,79:79}],306:[function(t,n,r){var e=t(67),i=t(7),o=e.has,u=e.key;e.exp({hasOwnMetadata:function hasOwnMetadata(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],307:[function(t,n,r){var e=t(67),i=t(7),o=t(3),u=e.key,c=e.set;e.exp({metadata:function metadata(t,n){return function decorator(r,e){c(t,n,(void 0!==e?i:o)(r),u(e))}}})},{3:3,67:67,7:7}],308:[function(t,n,r){t(97)("Set")},{97:97}],309:[function(t,n,r){t(98)("Set")},{98:98}],310:[function(t,n,r){var e=t(33);e(e.P+e.R,"Set",{toJSON:t(20)("Set")})},{20:20,33:33}],311:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!0);e(e.P,"String",{at:function at(t){return i(this,t)}})},{106:106,33:33}],312:[function(t,n,r){"use strict";var e=t(33),i=t(28),o=t(118),u=t(52),c=t(37),a=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};t(54)(f,"RegExp String",function next(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),e(e.P,"String",{matchAll:function matchAll(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in a?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=o(t.lastIndex),new f(e,n)}})},{118:118,28:28,33:33,37:37,52:52,54:54}],313:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padEnd:function padEnd(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},{109:109,33:33}],314:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padStart:function padStart(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},{109:109,33:33}],315:[function(t,n,r){"use strict";t(111)("trimLeft",function(t){return function trimLeft(){return t(this,1)}},"trimStart")},{111:111}],316:[function(t,n,r){"use strict";t(111)("trimRight",function(t){return function trimRight(){return t(this,2)}},"trimEnd")},{111:111}],317:[function(t,n,r){t(126)("asyncIterator")},{126:126}],318:[function(t,n,r){t(126)("observable")},{126:126}],319:[function(t,n,r){var e=t(33);e(e.S,"System",{global:t(40)})},{33:33,40:40}],320:[function(t,n,r){t(97)("WeakMap")},{97:97}],321:[function(t,n,r){t(98)("WeakMap")},{98:98}],322:[function(t,n,r){t(97)("WeakSet")},{97:97}],323:[function(t,n,r){t(98)("WeakSet")},{98:98}],324:[function(t,n,r){for(var e=t(141),i=t(81),o=t(94),u=t(40),c=t(42),a=t(58),f=t(128),s=f("iterator"),l=f("toStringTag"),h=a.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(v),d=0;d<p.length;d++){var y,g=p[d],m=v[g],b=u[g],x=b&&b.prototype;if(x&&(x[s]||c(x,s,h),x[l]||c(x,l,g),a[g]=h,m))for(y in e)x[y]||o(x,y,e[y],!0)}},{128:128,141:141,40:40,42:42,58:58,81:81,94:94}],325:[function(t,n,r){var e=t(33),i=t(113);e(e.G+e.B,{setImmediate:i.set,clearImmediate:i.clear})},{113:113,33:33}],326:[function(t,n,r){var e=t(40),i=t(33),o=t(46),u=t(88),c=e.navigator,a=!!c&&/MSIE .\./.test(c.userAgent),f=function(t){return a?function(n,r){return t(o(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),r)}:t};i(i.G+i.B+i.F*a,{setTimeout:f(e.setTimeout),setInterval:f(e.setInterval)})},{33:33,40:40,46:46,88:88}],327:[function(t,n,r){t(254),t(191),t(193),t(192),t(195),t(197),t(202),t(196),t(194),t(204),t(203),t(199),t(200),t(198),t(190),t(201),t(205),t(206),t(157),t(159),t(158),t(208),t(207),t(178),t(188),t(189),t(179),t(180),t(181),t(182),t(183),t(184),t(185),t(186),t(187),t(161),t(162),t(163),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(241),t(246),t(253),t(244),t(236),t(237),t(242),t(247),t(249),t(232),t(233),t(234),t(235),t(238),t(239),t(240),t(243),t(245),t(248),t(250),t(251),t(252),t(152),t(154),t(153),t(156),t(155),t(140),t(138),t(145),t(142),t(148),t(150),t(137),t(144),t(134),t(149),t(132),t(147),t(146),t(139),t(143),t(131),t(133),t(136),t(135),t(151),t(141),t(224),t(230),t(225),t(226),t(227),t(228),t(229),t(209),t(160),t(231),t(266),t(267),t(255),t(256),t(261),t(264),t(265),t(259),t(262),t(260),t(263),t(257),t(258),t(210),t(211),t(212),t(213),t(214),t(217),t(215),t(216),t(218),t(219),t(220),t(221),t(223),t(222),t(270),t(268),t(269),t(311),t(314),t(313),t(315),t(316),t(312),t(317),t(318),t(292),t(295),t(291),t(289),t(290),t(293),t(294),t(276),t(310),t(275),t(309),t(321),t(323),t(274),t(308),t(320),t(322),t(273),t(319),t(272),t(277),t(278),t(279),t(280),t(281),t(283),t(282),t(284),t(285),t(286),t(288),t(287),t(297),t(298),t(299),t(300),t(302),t(301),t(304),t(303),t(305),t(306),t(307),t(271),t(296),t(326),t(325),t(324),n.exports=t(23)},{131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,23:23,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326}],328:[function(t,n,r){(function(t){!function(t){"use strict";function wrap(t,n,r,e){var i=n&&n.prototype instanceof Generator?n:Generator,o=Object.create(i.prototype),u=new Context(e||[]);return o._invoke=makeInvokeMethod(t,r,u),o}function tryCatch(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function AsyncIterator(n){function invoke(t,r,e,o){var u=tryCatch(n[t],n,r);if("throw"!==u.type){var c=u.arg,a=c.value;return a&&"object"==typeof a&&i.call(a,"__await")?Promise.resolve(a.__await).then(function(t){invoke("next",t,e,o)},function(t){invoke("throw",t,e,o)}):Promise.resolve(a).then(function(t){c.value=t,e(c)},o)}o(u.arg)}function enqueue(t,n){function callInvokeWithMethodAndArg(){return new Promise(function(r,e){invoke(t,n,r,e)})}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}"object"==typeof t.process&&t.process.domain&&(invoke=t.process.domain.bind(invoke));var r;this._invoke=enqueue}function makeInvokeMethod(t,n,r){var e=l;return function invoke(i,o){if(e===v)throw new Error("Generator is already running");if(e===p){if("throw"===i)throw o;return doneResult()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var c=maybeInvokeDelegate(u,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=v;var a=tryCatch(t,n,r);if("normal"===a.type){if(e=r.done?p:h,a.arg===d)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(e=p,r.method="throw",r.arg=a.arg)}}}function maybeInvokeDelegate(t,n){var e=t.iterator[n.method];if(e===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=r,maybeInvokeDelegate(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=tryCatch(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=r),n.delegate=null,d):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function pushTryEntry(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function resetTryEntry(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,o=function next(){for(;++e<t.length;)if(i.call(t,e))return next.value=t[e],next.done=!1,next;return next.value=r,next.done=!0,next};return o.next=o}}return{next:doneResult}}function doneResult(){return{value:r,done:!0}}var r,e=Object.prototype,i=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof n,s=t.regeneratorRuntime;if(s)return void(f&&(n.exports=s));s=t.regeneratorRuntime=f?n.exports:{},s.wrap=wrap;var l="suspendedStart",h="suspendedYield",v="executing",p="completed",d={},y={};y[u]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(values([])));m&&m!==e&&i.call(m,u)&&(y=m);var b=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(y);GeneratorFunction.prototype=b.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[a]=GeneratorFunction.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===GeneratorFunction||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[c]=function(){return this},s.AsyncIterator=AsyncIterator,s.async=function(t,n,r,e){var i=new AsyncIterator(wrap(t,n,r,e));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},defineIteratorMethods(b),b[a]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function next(){for(;n.length;){var r=n.pop();if(r in t)return next.value=r,next.done=!1,next}return next.done=!0,next}},s.values=values,Context.prototype={constructor:Context,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(resetTryEntry),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0],n=t.completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(t){function handle(e,i){return u.type="throw",u.arg=t,n.next=e,i&&(n.method="next",n.arg=r),!!i}if(this.done)throw t;for(var n=this,e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e],u=o.completion;if("root"===o.tryLoc)return handle("end");if(o.tryLoc<=this.prev){var c=i.call(o,"catchLoc"),a=i.call(o,"finallyLoc");if(c&&a){if(this.prev<o.catchLoc)return handle(o.catchLoc,!0);if(this.prev<o.finallyLoc)return handle(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return handle(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return handle(o.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var o=e;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;resetTryEntry(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:values(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=r),d}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);</script></1e-8?t-t*t></1e-6?t+t*t></22025.465794806718||-2e-17!=e(-2e-17)?function></a;){if(y></0?"-":n></n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return></2)for(;;){if(h></c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s--></r.length;o++)s(r[o]);return>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/scripts/postpublish.js"/>
      <url>/node_modules/babel-polyfill/scripts/postpublish.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>var fs = require("fs");var path = require("path");try {  fs.unlinkSync(path.join(__dirname, "../browser.js"));} catch (err) {}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/scripts/prepublish.js"/>
      <url>/node_modules/babel-polyfill/scripts/prepublish.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>var fs = require("fs");var path = require("path");function relative(loc) {  return path.join(__dirname, "..", loc);}fs.writeFileSync(relative("browser.js"), fs.readFileSync(relative("dist/polyfill.min.js")));]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/asap.js"/>
      <url>/node_modules/babel-runtime/core-js/asap.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/asap"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/clear-immediate.js"/>
      <url>/node_modules/babel-runtime/core-js/clear-immediate.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/clear-immediate"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-polyfill/dist/polyfill.js"/>
      <url>/node_modules/babel-polyfill/dist/polyfill.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){ (function (global){ "use strict"; _dereq_(327); _dereq_(328); _dereq_(2); if (global._babelpolyfill) { throw new error("only one instance of babel-polyfill is allowed"); } global._babelpolyfill="true;" var define_property="defineProperty" ; function define(o, key, value) o[key] || object[define_property](o, writable: true, configurable: value: value }); define(string.prototype, "padleft", "".padstart); "padright", "".padend); "pop,reverse,shift,keys,values,entries,indexof,every,some,foreach,map,filter,find,findindex,includes,join,slice,concat,push,splice,unshift,sort,lastindexof,reduce,reduceright,copywithin,fill".split(",").foreach(function (key) [][key] && define(array, function.call.bind([][key])); }).call(this,typeof global !="=" "undefined" ? : typeof self window {}) },{"2":2,"327":327,"328":328}],2:[function(_dereq_,module,exports){ _dereq_(130); module.exports="_dereq_(23).RegExp.escape;" },{"130":130,"23":23}],3:[function(_dereq_,module,exports){ (it) (typeof it ) typeerror(it + ' not a function!'); return it; }; },{}],4:[function(_dereq_,module,exports){ cof="_dereq_(18);" (it, msg) cof(it) typeerror(msg); +it; },{"18":18}],5:[function(_dereq_,module,exports){ 22.1.3.31 array.prototype[@@unscopables] unscopables="_dereq_(128)('unscopables');" arrayproto="Array.prototype;" (arrayproto[unscopables]="=" undefined) _dereq_(42)(arrayproto, unscopables, {}); arrayproto[unscopables][key]="true;" },{"128":128,"42":42}],6:[function(_dereq_,module,exports){ constructor, name, forbiddenfield) (!(it instanceof constructor) (forbiddenfield undefined forbiddenfield in it)) typeerror(name ': incorrect invocation!'); },{}],7:[function(_dereq_,module,exports){ isobject="_dereq_(51);" (!isobject(it)) an object!'); },{"51":51}],8:[function(_dereq_,module,exports){ 22.1.3.3 array.prototype.copywithin(target, start, end="this.length)" 'use strict'; toobject="_dereq_(119);" toabsoluteindex="_dereq_(114);" tolength="_dereq_(118);" copywithin(target *="0" , start o="toObject(this);" len="toLength(O.length);" to="toAbsoluteIndex(target," len); from="toAbsoluteIndex(start,"> 2 ? arguments[2] : undefined;  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);  var inc = 1;  if (from < to && to < from + count) {    inc = -1;    from += count - 1;    to += count - 1;  }  while (count-- > 0) {    if (from in O) O[to] = O[from];    else delete O[to];    to += inc;    from += inc;  } return O;};},{"114":114,"118":118,"119":119}],9:[function(_dereq_,module,exports){// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)'use strict';var toObject = _dereq_(119);var toAbsoluteIndex = _dereq_(114);var toLength = _dereq_(118);module.exports = function fill(value /* , start = 0, end = @length */) {  var O = toObject(this);  var length = toLength(O.length);  var aLen = arguments.length;  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);  var end = aLen > 2 ? arguments[2] : undefined;  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);  while (endPos > index) O[index++] = value;  return O;};},{"114":114,"118":118,"119":119}],10:[function(_dereq_,module,exports){var forOf = _dereq_(39);module.exports = function (iter, ITERATOR) {  var result = [];  forOf(iter, false, result.push, result, ITERATOR);  return result;};},{"39":39}],11:[function(_dereq_,module,exports){// false -> Array#indexOf// true  -> Array#includesvar toIObject = _dereq_(117);var toLength = _dereq_(118);var toAbsoluteIndex = _dereq_(114);module.exports = function (IS_INCLUDES) {  return function ($this, el, fromIndex) {    var O = toIObject($this);    var length = toLength(O.length);    var index = toAbsoluteIndex(fromIndex, length);    var value;    // Array#includes uses SameValueZero equality algorithm    // eslint-disable-next-line no-self-compare    if (IS_INCLUDES && el != el) while (length > index) {      value = O[index++];      // eslint-disable-next-line no-self-compare      if (value != value) return true;    // Array#indexOf ignores holes, Array#includes - not    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {      if (O[index] === el) return IS_INCLUDES || index || 0;    } return !IS_INCLUDES && -1;  };};},{"114":114,"117":117,"118":118}],12:[function(_dereq_,module,exports){// 0 -> Array#forEach// 1 -> Array#map// 2 -> Array#filter// 3 -> Array#some// 4 -> Array#every// 5 -> Array#find// 6 -> Array#findIndexvar ctx = _dereq_(25);var IObject = _dereq_(47);var toObject = _dereq_(119);var toLength = _dereq_(118);var asc = _dereq_(15);module.exports = function (TYPE, $create) {  var IS_MAP = TYPE == 1;  var IS_FILTER = TYPE == 2;  var IS_SOME = TYPE == 3;  var IS_EVERY = TYPE == 4;  var IS_FIND_INDEX = TYPE == 6;  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;  var create = $create || asc;  return function ($this, callbackfn, that) {    var O = toObject($this);    var self = IObject(O);    var f = ctx(callbackfn, that, 3);    var length = toLength(self.length);    var index = 0;    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;    var val, res;    for (;length > index; index++) if (NO_HOLES || index in self) {      val = self[index];      res = f(val, index, O);      if (TYPE) {        if (IS_MAP) result[index] = res;   // map        else if (res) switch (TYPE) {          case 3: return true;             // some          case 5: return val;              // find          case 6: return index;            // findIndex          case 2: result.push(val);        // filter        } else if (IS_EVERY) return false; // every      }    }    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;  };};},{"118":118,"119":119,"15":15,"25":25,"47":47}],13:[function(_dereq_,module,exports){var aFunction = _dereq_(3);var toObject = _dereq_(119);var IObject = _dereq_(47);var toLength = _dereq_(118);module.exports = function (that, callbackfn, aLen, memo, isRight) {  aFunction(callbackfn);  var O = toObject(that);  var self = IObject(O);  var length = toLength(O.length);  var index = isRight ? length - 1 : 0;  var i = isRight ? -1 : 1;  if (aLen < 2) for (;;) {    if (index in self) {      memo = self[index];      index += i;      break;    }    index += i;    if (isRight ? index < 0 : length <= index) { throw typeerror('reduce of empty array with no initial value'); } for (;isright ? index>= 0 : length > index; index += i) if (index in self) {    memo = callbackfn(memo, self[index], index, O);  }  return memo;};},{"118":118,"119":119,"3":3,"47":47}],14:[function(_dereq_,module,exports){var isObject = _dereq_(51);var isArray = _dereq_(49);var SPECIES = _dereq_(128)('species');module.exports = function (original) {  var C;  if (isArray(original)) {    C = original.constructor;    // cross-realm fallback    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;    if (isObject(C)) {      C = C[SPECIES];      if (C === null) C = undefined;    }  } return C === undefined ? Array : C;};},{"128":128,"49":49,"51":51}],15:[function(_dereq_,module,exports){// 9.4.2.3 ArraySpeciesCreate(originalArray, length)var speciesConstructor = _dereq_(14);module.exports = function (original, length) {  return new (speciesConstructor(original))(length);};},{"14":14}],16:[function(_dereq_,module,exports){'use strict';var aFunction = _dereq_(3);var isObject = _dereq_(51);var invoke = _dereq_(46);var arraySlice = [].slice;var factories = {};var construct = function (F, len, args) {  if (!(len in factories)) {    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';    // eslint-disable-next-line no-new-func    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');  } return factories[len](F, args);};module.exports = Function.bind || function bind(that /* , ...args */) {  var fn = aFunction(this);  var partArgs = arraySlice.call(arguments, 1);  var bound = function (/* args... */) {    var args = partArgs.concat(arraySlice.call(arguments));    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);  };  if (isObject(fn.prototype)) bound.prototype = fn.prototype;  return bound;};},{"3":3,"46":46,"51":51}],17:[function(_dereq_,module,exports){// getting tag from 19.1.3.6 Object.prototype.toString()var cof = _dereq_(18);var TAG = _dereq_(128)('toStringTag');// ES3 wrong herevar ARG = cof(function () { return arguments; }()) == 'Arguments';// fallback for IE11 Script Access Denied errorvar tryGet = function (it, key) {  try {    return it[key];  } catch (e) { /* empty */ }};module.exports = function (it) {  var O, T, B;  return it === undefined ? 'Undefined' : it === null ? 'Null'    // @@toStringTag case    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T    // builtinTag case    : ARG ? cof(O)    // ES3 arguments fallback    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;};},{"128":128,"18":18}],18:[function(_dereq_,module,exports){var toString = {}.toString;module.exports = function (it) {  return toString.call(it).slice(8, -1);};},{}],19:[function(_dereq_,module,exports){'use strict';var dP = _dereq_(72).f;var create = _dereq_(71);var redefineAll = _dereq_(93);var ctx = _dereq_(25);var anInstance = _dereq_(6);var forOf = _dereq_(39);var $iterDefine = _dereq_(55);var step = _dereq_(57);var setSpecies = _dereq_(100);var DESCRIPTORS = _dereq_(29);var fastKey = _dereq_(66).fastKey;var validate = _dereq_(125);var SIZE = DESCRIPTORS ? '_s' : 'size';var getEntry = function (that, key) {  // fast case  var index = fastKey(key);  var entry;  if (index !== 'F') return that._i[index];  // frozen object case  for (entry = that._f; entry; entry = entry.n) {    if (entry.k == key) return entry;  }};module.exports = {  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {    var C = wrapper(function (that, iterable) {      anInstance(that, C, NAME, '_i');      that._t = NAME;         // collection type      that._i = create(null); // index      that._f = undefined;    // first entry      that._l = undefined;    // last entry      that[SIZE] = 0;         // size      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);    });    redefineAll(C.prototype, {      // 23.1.3.1 Map.prototype.clear()      // 23.2.3.2 Set.prototype.clear()      clear: function clear() {        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {          entry.r = true;          if (entry.p) entry.p = entry.p.n = undefined;          delete data[entry.i];        }        that._f = that._l = undefined;        that[SIZE] = 0;      },      // 23.1.3.3 Map.prototype.delete(key)      // 23.2.3.4 Set.prototype.delete(value)      'delete': function (key) {        var that = validate(this, NAME);        var entry = getEntry(that, key);        if (entry) {          var next = entry.n;          var prev = entry.p;          delete that._i[entry.i];          entry.r = true;          if (prev) prev.n = next;          if (next) next.p = prev;          if (that._f == entry) that._f = next;          if (that._l == entry) that._l = prev;          that[SIZE]--;        } return !!entry;      },      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)      forEach: function forEach(callbackfn /* , that = undefined */) {        validate(this, NAME);        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);        var entry;        while (entry = entry ? entry.n : this._f) {          f(entry.v, entry.k, this);          // revert to the last existing entry          while (entry && entry.r) entry = entry.p;        }      },      // 23.1.3.7 Map.prototype.has(key)      // 23.2.3.7 Set.prototype.has(value)      has: function has(key) {        return !!getEntry(validate(this, NAME), key);      }    });    if (DESCRIPTORS) dP(C.prototype, 'size', {      get: function () {        return validate(this, NAME)[SIZE];      }    });    return C;  },  def: function (that, key, value) {    var entry = getEntry(that, key);    var prev, index;    // change existing entry    if (entry) {      entry.v = value;    // create new entry    } else {      that._l = entry = {        i: index = fastKey(key, true), // <- 0 index k: key, <- key v: value, value p: prev="that._l," previous entry n: undefined, next r: false removed }; if (!that._f) that._f="entry;" (prev) prev.n="entry;" that[size]++; add to (index !="=" 'f') that._i[index]="entry;" } return that; }, getentry: getentry, setstrong: function (c, name, is_map) { .keys, .values, .entries, [@@iterator] 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11 $iterdefine(c, (iterated, kind) this._t="validate(iterated," name); target this._k="kind;" kind this._l="undefined;" () var that="this;" revert the last existing while (entry && entry.r) get (!that._t || !(that._l="entry" = ? entry.n : that._t._f)) or finish iteration that._t="undefined;" step(1); step by (kind="=" 'keys') step(0, entry.k); 'values') entry.v); [entry.k, entry.v]); is_map 'entries' 'values', !is_map, true); [@@species], 23.1.2.2, 23.2.2.2 setspecies(name); },{"100":100,"125":125,"25":25,"29":29,"39":39,"55":55,"57":57,"6":6,"66":66,"71":71,"72":72,"93":93}],20:[function(_dereq_,module,exports){ https: github.com davidbruant map-set.prototype.tojson classof="_dereq_(17);" from="_dereq_(10);" module.exports="function" (name) tojson() (classof(this) throw typeerror(name + "#tojson isn't generic"); from(this); },{"10":10,"17":17}],21:[function(_dereq_,module,exports){ 'use strict'; redefineall="_dereq_(93);" getweak="_dereq_(66).getWeak;" anobject="_dereq_(7);" isobject="_dereq_(51);" aninstance="_dereq_(6);" forof="_dereq_(39);" createarraymethod="_dereq_(12);" $has="_dereq_(41);" validate="_dereq_(125);" arrayfind="createArrayMethod(5);" arrayfindindex="createArrayMethod(6);" id="0;" fallback for uncaught frozen keys uncaughtfrozenstore="function" (that) that._l (that._l="new" uncaughtfrozenstore()); this.a="[];" finduncaughtfrozen="function" (store, key) arrayfind(store.a, (it) it[0]="==" key; }); uncaughtfrozenstore.prototype="{" get: (key) key); (entry) entry[1]; has: !!finduncaughtfrozen(this, set: (key, value) entry[1]="value;" else this.a.push([key, value]); 'delete': (~index) this.a.splice(index, 1); !!~index; getconstructor: (wrapper, is_map, adder) c="wrapper(function" (that, iterable) aninstance(that, c, '_i'); collection type that._i="id++;" leak store objects (iterable forof(iterable, that[adder], that); redefineall(c.prototype, 23.3.3.2 weakmap.prototype.delete(key) 23.4.3.3 weakset.prototype.delete(value) (!isobject(key)) false; data="getWeak(key);" (data="==" true) uncaughtfrozenstore(validate(this, name))['delete'](key); $has(data, this._i) delete data[this._i]; 23.3.3.4 weakmap.prototype.has(key) 23.4.3.4 weakset.prototype.has(value) has(key) name)).has(key); this._i); c; def: uncaughtfrozenstore(that).set(key, value); data[that._i]="value;" ufstore: },{"12":12,"125":125,"39":39,"41":41,"51":51,"6":6,"66":66,"7":7,"93":93}],22:[function(_dereq_,module,exports){ global="_dereq_(40);" $export="_dereq_(33);" redefine="_dereq_(94);" meta="_dereq_(66);" fails="_dereq_(35);" $iterdetect="_dereq_(56);" settostringtag="_dereq_(101);" inheritifrequired="_dereq_(45);" (name, wrapper, methods, common, is_weak) base="global[NAME];" adder="IS_MAP" 'set' 'add'; proto="C" c.prototype; o="{};" fixmethod="function" fn="proto[KEY];" redefine(proto, 'delete' (a) is_weak !isobject(a) fn.call(this, a="==" a); 'has' has(a) 'get' get(a) undefined 'add' add(a) this; set(a, b) a, b); ); (typeof !(is_weak proto.foreach !fails(function new c().entries().next(); }))) create constructor adder); methods); meta.need="true;" instance="new" c(); early implementations not supports chaining hasnt_chaining="instance[ADDER](IS_WEAK" {} -0, 1) v8 ~ chromium 40- weak-collections throws on primitives, but should throws_on_primitives="fails(function" instance.has(1); most doesn't iterables, modern - close it correctly accept_iterables="$iterDetect(function" (iter) c(iter); eslint-disable-line no-new -0 and +0 same buggy_zero="!IS_WEAK" fails(function 42- only with 5+ elements $instance="new" (index--) $instance[adder](index, index); !$instance.has(-0); (!accept_iterables) (target, aninstance(target, base(), target, c); c.prototype="proto;" proto.constructor="C;" (throws_on_primitives buggy_zero) fixmethod('delete'); fixmethod('has'); fixmethod('get'); (buggy_zero hasnt_chaining) fixmethod(adder); weak collections contains .clear method (is_weak proto.clear) proto.clear; settostringtag(c, o[name]="C;" $export($export.g $export.w $export.f * (c o); (!is_weak) common.setstrong(c, is_map); },{"101":101,"33":33,"35":35,"39":39,"40":40,"45":45,"51":51,"56":56,"6":6,"66":66,"93":93,"94":94}],23:[function(_dereq_,module,exports){ core="module.exports" version: '2.5.0' __e="=" 'number') no-undef },{}],24:[function(_dereq_,module,exports){ $defineproperty="_dereq_(72);" createdesc="_dereq_(92);" (object, index, in object) $defineproperty.f(object, createdesc(0, value)); object[index]="value;" },{"72":72,"92":92}],25:[function(_dereq_,module,exports){ optional simple context binding afunction="_dereq_(3);" (fn, that, length) afunction(fn); (that="==" undefined) fn; switch (length) case 1: fn.call(that, 2: (a, 3: b, c) ( ...args ) fn.apply(that, arguments); },{"3":3}],26:[function(_dereq_,module,exports){ 20.3.4.36 15.9.5.43 date.prototype.toisostring() gettime="Date.prototype.getTime;" $toisostring="Date.prototype.toISOString;" lz="function" (num) num> 9 ? num : '0' + num;};// PhantomJS / old WebKit has a broken implementationsmodule.exports = (fails(function () {  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';}) || !fails(function () {  $toISOString.call(new Date(NaN));})) ? function toISOString() {  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');  var d = this;  var y = d.getUTCFullYear();  var m = d.getUTCMilliseconds();  var s = y < 0 ? '-' : y > 9999 ? '+' : '';  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';} : $toISOString;},{"35":35}],27:[function(_dereq_,module,exports){'use strict';var anObject = _dereq_(7);var toPrimitive = _dereq_(120);var NUMBER = 'number';module.exports = function (hint) {  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');  return toPrimitive(anObject(this), hint != NUMBER);};},{"120":120,"7":7}],28:[function(_dereq_,module,exports){// 7.2.1 RequireObjectCoercible(argument)module.exports = function (it) {  if (it == undefined) throw TypeError("Can't call method on  " + it);  return it;};},{}],29:[function(_dereq_,module,exports){// Thank's IE8 for his funny definePropertymodule.exports = !_dereq_(35)(function () {  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;});},{"35":35}],30:[function(_dereq_,module,exports){var isObject = _dereq_(51);var document = _dereq_(40).document;// typeof document.createElement is 'object' in old IEvar is = isObject(document) && isObject(document.createElement);module.exports = function (it) {  return is ? document.createElement(it) : {};};},{"40":40,"51":51}],31:[function(_dereq_,module,exports){// IE 8- don't enum bug keysmodule.exports = (  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').split(',');},{}],32:[function(_dereq_,module,exports){// all enumerable object keys, includes symbolsvar getKeys = _dereq_(81);var gOPS = _dereq_(78);var pIE = _dereq_(82);module.exports = function (it) {  var result = getKeys(it);  var getSymbols = gOPS.f;  if (getSymbols) {    var symbols = getSymbols(it);    var isEnum = pIE.f;    var i = 0;    var key;    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);  } return result;};},{"78":78,"81":81,"82":82}],33:[function(_dereq_,module,exports){var global = _dereq_(40);var core = _dereq_(23);var hide = _dereq_(42);var redefine = _dereq_(94);var ctx = _dereq_(25);var PROTOTYPE = 'prototype';var $export = function (type, name, source) {  var IS_FORCED = type & $export.F;  var IS_GLOBAL = type & $export.G;  var IS_STATIC = type & $export.S;  var IS_PROTO = type & $export.P;  var IS_BIND = type & $export.B;  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});  var key, own, out, exp;  if (IS_GLOBAL) source = name;  for (key in source) {    // contains in native    own = !IS_FORCED && target && target[key] !== undefined;    // export native or passed    out = (own ? target : source)[key];    // bind timers to global for call from export context    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;    // extend global    if (target) redefine(target, key, out, type & $export.U);    // export    if (exports[key] != out) hide(exports, key, exp);    if (IS_PROTO && expProto[key] != out) expProto[key] = out;  }};global.core = core;// type bitmap$export.F = 1;   // forced$export.G = 2;   // global$export.S = 4;   // static$export.P = 8;   // proto$export.B = 16;  // bind$export.W = 32;  // wrap$export.U = 64;  // safe$export.R = 128; // real proto method for `library`module.exports = $export;},{"23":23,"25":25,"40":40,"42":42,"94":94}],34:[function(_dereq_,module,exports){var MATCH = _dereq_(128)('match');module.exports = function (KEY) {  var re = /./;  try {    '/./'[KEY](re);  } catch (e) {    try {      re[MATCH] = false;      return !'/./'[KEY](re);    } catch (f) { /* empty */ }  } return true;};},{"128":128}],35:[function(_dereq_,module,exports){module.exports = function (exec) {  try {    return !!exec();  } catch (e) {    return true;  }};},{}],36:[function(_dereq_,module,exports){'use strict';var hide = _dereq_(42);var redefine = _dereq_(94);var fails = _dereq_(35);var defined = _dereq_(28);var wks = _dereq_(128);module.exports = function (KEY, length, exec) {  var SYMBOL = wks(KEY);  var fns = exec(defined, SYMBOL, ''[KEY]);  var strfn = fns[0];  var rxfn = fns[1];  if (fails(function () {    var O = {};    O[SYMBOL] = function () { return 7; };    return ''[KEY](O) != 7;  })) {    redefine(String.prototype, KEY, strfn);    hide(RegExp.prototype, SYMBOL, length == 2      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)      // 21.2.5.11 RegExp.prototype[@@split](string, limit)      ? function (string, arg) { return rxfn.call(string, this, arg); }      // 21.2.5.6 RegExp.prototype[@@match](string)      // 21.2.5.9 RegExp.prototype[@@search](string)      : function (string) { return rxfn.call(string, this); }    );  }};},{"128":128,"28":28,"35":35,"42":42,"94":94}],37:[function(_dereq_,module,exports){'use strict';// 21.2.5.3 get RegExp.prototype.flagsvar anObject = _dereq_(7);module.exports = function () {  var that = anObject(this);  var result = '';  if (that.global) result += 'g';  if (that.ignoreCase) result += 'i';  if (that.multiline) result += 'm';  if (that.unicode) result += 'u';  if (that.sticky) result += 'y';  return result;};},{"7":7}],38:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArrayvar isArray = _dereq_(49);var isObject = _dereq_(51);var toLength = _dereq_(118);var ctx = _dereq_(25);var IS_CONCAT_SPREADABLE = _dereq_(128)('isConcatSpreadable');function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {  var targetIndex = start;  var sourceIndex = 0;  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;  var element, spreadable;  while (sourceIndex < sourceLen) {    if (sourceIndex in source) {      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];      spreadable = false;      if (isObject(element)) {        spreadable = element[IS_CONCAT_SPREADABLE];        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);      }      if (spreadable && depth > 0) {        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;      } else {        if (targetIndex >= 0x1fffffffffffff) throw TypeError();        target[targetIndex] = element;      }      targetIndex++;    }    sourceIndex++;  }  return targetIndex;}module.exports = flattenIntoArray;},{"118":118,"128":128,"25":25,"49":49,"51":51}],39:[function(_dereq_,module,exports){var ctx = _dereq_(25);var call = _dereq_(53);var isArrayIter = _dereq_(48);var anObject = _dereq_(7);var toLength = _dereq_(118);var getIterFn = _dereq_(129);var BREAK = {};var RETURN = {};var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);  var f = ctx(fn, that, entries ? 2 : 1);  var index = 0;  var length, step, iterator, result;  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');  // fast case for arrays with default iterator  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);    if (result === BREAK || result === RETURN) return result;  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {    result = call(iterator, f, step.value, entries);    if (result === BREAK || result === RETURN) return result;  }};exports.BREAK = BREAK;exports.RETURN = RETURN;},{"118":118,"129":129,"25":25,"48":48,"53":53,"7":7}],40:[function(_dereq_,module,exports){// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028var global = module.exports = typeof window != 'undefined' && window.Math == Math  ? window : typeof self != 'undefined' && self.Math == Math ? self  // eslint-disable-next-line no-new-func  : Function('return this')();if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef},{}],41:[function(_dereq_,module,exports){var hasOwnProperty = {}.hasOwnProperty;module.exports = function (it, key) {  return hasOwnProperty.call(it, key);};},{}],42:[function(_dereq_,module,exports){var dP = _dereq_(72);var createDesc = _dereq_(92);module.exports = _dereq_(29) ? function (object, key, value) {  return dP.f(object, key, createDesc(1, value));} : function (object, key, value) {  object[key] = value;  return object;};},{"29":29,"72":72,"92":92}],43:[function(_dereq_,module,exports){var document = _dereq_(40).document;module.exports = document && document.documentElement;},{"40":40}],44:[function(_dereq_,module,exports){module.exports = !_dereq_(29) && !_dereq_(35)(function () {  return Object.defineProperty(_dereq_(30)('div'), 'a', { get: function () { return 7; } }).a != 7;});},{"29":29,"30":30,"35":35}],45:[function(_dereq_,module,exports){var isObject = _dereq_(51);var setPrototypeOf = _dereq_(99).set;module.exports = function (that, target, C) {  var S = target.constructor;  var P;  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {    setPrototypeOf(that, P);  } return that;};},{"51":51,"99":99}],46:[function(_dereq_,module,exports){// fast apply, http://jsperf.lnkit.com/fast-apply/5module.exports = function (fn, args, that) {  var un = that === undefined;  switch (args.length) {    case 0: return un ? fn()                      : fn.call(that);    case 1: return un ? fn(args[0])                      : fn.call(that, args[0]);    case 2: return un ? fn(args[0], args[1])                      : fn.call(that, args[0], args[1]);    case 3: return un ? fn(args[0], args[1], args[2])                      : fn.call(that, args[0], args[1], args[2]);    case 4: return un ? fn(args[0], args[1], args[2], args[3])                      : fn.call(that, args[0], args[1], args[2], args[3]);  } return fn.apply(that, args);};},{}],47:[function(_dereq_,module,exports){// fallback for non-array-like ES3 and non-enumerable old V8 stringsvar cof = _dereq_(18);// eslint-disable-next-line no-prototype-builtinsmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {  return cof(it) == 'String' ? it.split('') : Object(it);};},{"18":18}],48:[function(_dereq_,module,exports){// check on default Array iteratorvar Iterators = _dereq_(58);var ITERATOR = _dereq_(128)('iterator');var ArrayProto = Array.prototype;module.exports = function (it) {  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);};},{"128":128,"58":58}],49:[function(_dereq_,module,exports){// 7.2.2 IsArray(argument)var cof = _dereq_(18);module.exports = Array.isArray || function isArray(arg) {  return cof(arg) == 'Array';};},{"18":18}],50:[function(_dereq_,module,exports){// 20.1.2.3 Number.isInteger(number)var isObject = _dereq_(51);var floor = Math.floor;module.exports = function isInteger(it) {  return !isObject(it) && isFinite(it) && floor(it) === it;};},{"51":51}],51:[function(_dereq_,module,exports){module.exports = function (it) {  return typeof it === 'object' ? it !== null : typeof it === 'function';};},{}],52:[function(_dereq_,module,exports){// 7.2.8 IsRegExp(argument)var isObject = _dereq_(51);var cof = _dereq_(18);var MATCH = _dereq_(128)('match');module.exports = function (it) {  var isRegExp;  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');};},{"128":128,"18":18,"51":51}],53:[function(_dereq_,module,exports){// call something on iterator step with safe closing on errorvar anObject = _dereq_(7);module.exports = function (iterator, fn, value, entries) {  try {    return entries ? fn(anObject(value)[0], value[1]) : fn(value);  // 7.4.6 IteratorClose(iterator, completion)  } catch (e) {    var ret = iterator['return'];    if (ret !== undefined) anObject(ret.call(iterator));    throw e;  }};},{"7":7}],54:[function(_dereq_,module,exports){'use strict';var create = _dereq_(71);var descriptor = _dereq_(92);var setToStringTag = _dereq_(101);var IteratorPrototype = {};// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()_dereq_(42)(IteratorPrototype, _dereq_(128)('iterator'), function () { return this; });module.exports = function (Constructor, NAME, next) {  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });  setToStringTag(Constructor, NAME + ' Iterator');};},{"101":101,"128":128,"42":42,"71":71,"92":92}],55:[function(_dereq_,module,exports){'use strict';var LIBRARY = _dereq_(60);var $export = _dereq_(33);var redefine = _dereq_(94);var hide = _dereq_(42);var has = _dereq_(41);var Iterators = _dereq_(58);var $iterCreate = _dereq_(54);var setToStringTag = _dereq_(101);var getPrototypeOf = _dereq_(79);var ITERATOR = _dereq_(128)('iterator');var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`var FF_ITERATOR = '@@iterator';var KEYS = 'keys';var VALUES = 'values';var returnThis = function () { return this; };module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {  $iterCreate(Constructor, NAME, next);  var getMethod = function (kind) {    if (!BUGGY && kind in proto) return proto[kind];    switch (kind) {      case KEYS: return function keys() { return new Constructor(this, kind); };      case VALUES: return function values() { return new Constructor(this, kind); };    } return function entries() { return new Constructor(this, kind); };  };  var TAG = NAME + ' Iterator';  var DEF_VALUES = DEFAULT == VALUES;  var VALUES_BUG = false;  var proto = Base.prototype;  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];  var $default = $native || getMethod(DEFAULT);  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;  var methods, key, IteratorPrototype;  // Fix native  if ($anyNative) {    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {      // Set @@toStringTag to native iterators      setToStringTag(IteratorPrototype, TAG, true);      // fix for some old engines      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);    }  }  // fix Array#{values, @@iterator}.name in V8 / FF  if (DEF_VALUES && $native && $native.name !== VALUES) {    VALUES_BUG = true;    $default = function values() { return $native.call(this); };  }  // Define iterator  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {    hide(proto, ITERATOR, $default);  }  // Plug for library  Iterators[NAME] = $default;  Iterators[TAG] = returnThis;  if (DEFAULT) {    methods = {      values: DEF_VALUES ? $default : getMethod(VALUES),      keys: IS_SET ? $default : getMethod(KEYS),      entries: $entries    };    if (FORCED) for (key in methods) {      if (!(key in proto)) redefine(proto, key, methods[key]);    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);  }  return methods;};},{"101":101,"128":128,"33":33,"41":41,"42":42,"54":54,"58":58,"60":60,"79":79,"94":94}],56:[function(_dereq_,module,exports){var ITERATOR = _dereq_(128)('iterator');var SAFE_CLOSING = false;try {  var riter = [7][ITERATOR]();  riter['return'] = function () { SAFE_CLOSING = true; };  // eslint-disable-next-line no-throw-literal  Array.from(riter, function () { throw 2; });} catch (e) { /* empty */ }module.exports = function (exec, skipClosing) {  if (!skipClosing && !SAFE_CLOSING) return false;  var safe = false;  try {    var arr = [7];    var iter = arr[ITERATOR]();    iter.next = function () { return { done: safe = true }; };    arr[ITERATOR] = function () { return iter; };    exec(arr);  } catch (e) { /* empty */ }  return safe;};},{"128":128}],57:[function(_dereq_,module,exports){module.exports = function (done, value) {  return { value: value, done: !!done };};},{}],58:[function(_dereq_,module,exports){module.exports = {};},{}],59:[function(_dereq_,module,exports){var getKeys = _dereq_(81);var toIObject = _dereq_(117);module.exports = function (object, el) {  var O = toIObject(object);  var keys = getKeys(O);  var length = keys.length;  var index = 0;  var key;  while (length > index) if (O[key = keys[index++]] === el) return key;};},{"117":117,"81":81}],60:[function(_dereq_,module,exports){module.exports = false;},{}],61:[function(_dereq_,module,exports){// 20.2.2.14 Math.expm1(x)var $expm1 = Math.expm1;module.exports = (!$expm1  // Old FF bug  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168  // Tor Browser bug  || $expm1(-2e-17) != -2e-17) ? function expm1(x) {  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;} : $expm1;},{}],62:[function(_dereq_,module,exports){// 20.2.2.16 Math.fround(x)var sign = _dereq_(65);var pow = Math.pow;var EPSILON = pow(2, -52);var EPSILON32 = pow(2, -23);var MAX32 = pow(2, 127) * (2 - EPSILON32);var MIN32 = pow(2, -126);var roundTiesToEven = function (n) {  return n + 1 / EPSILON - 1 / EPSILON;};module.exports = Math.fround || function fround(x) {  var $abs = Math.abs(x);  var $sign = sign(x);  var a, result;  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;  a = (1 + EPSILON32 / EPSILON) * $abs;  result = a - (a - $abs);  // eslint-disable-next-line no-self-compare  if (result > MAX32 || result != result) return $sign * Infinity;  return $sign * result;};},{"65":65}],63:[function(_dereq_,module,exports){// 20.2.2.20 Math.log1p(x)module.exports = Math.log1p || function log1p(x) {  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);};},{}],64:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {  if (    arguments.length === 0      // eslint-disable-next-line no-self-compare      || x != x      // eslint-disable-next-line no-self-compare      || inLow != inLow      // eslint-disable-next-line no-self-compare      || inHigh != inHigh      // eslint-disable-next-line no-self-compare      || outLow != outLow      // eslint-disable-next-line no-self-compare      || outHigh != outHigh  ) return NaN;  if (x === Infinity || x === -Infinity) return x;  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;};},{}],65:[function(_dereq_,module,exports){// 20.2.2.28 Math.sign(x)module.exports = Math.sign || function sign(x) {  // eslint-disable-next-line no-self-compare  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;};},{}],66:[function(_dereq_,module,exports){var META = _dereq_(124)('meta');var isObject = _dereq_(51);var has = _dereq_(41);var setDesc = _dereq_(72).f;var id = 0;var isExtensible = Object.isExtensible || function () {  return true;};var FREEZE = !_dereq_(35)(function () {  return isExtensible(Object.preventExtensions({}));});var setMeta = function (it) {  setDesc(it, META, { value: {    i: 'O' + ++id, // object ID    w: {}          // weak collections IDs  } });};var fastKey = function (it, create) {  // return primitive with prefix  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;  if (!has(it, META)) {    // can't set metadata to uncaught frozen object    if (!isExtensible(it)) return 'F';    // not necessary to add metadata    if (!create) return 'E';    // add missing metadata    setMeta(it);  // return object ID  } return it[META].i;};var getWeak = function (it, create) {  if (!has(it, META)) {    // can't set metadata to uncaught frozen object    if (!isExtensible(it)) return true;    // not necessary to add metadata    if (!create) return false;    // add missing metadata    setMeta(it);  // return hash weak collections IDs  } return it[META].w;};// add metadata on freeze-family methods callingvar onFreeze = function (it) {  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);  return it;};var meta = module.exports = {  KEY: META,  NEED: false,  fastKey: fastKey,  getWeak: getWeak,  onFreeze: onFreeze};},{"124":124,"35":35,"41":41,"51":51,"72":72}],67:[function(_dereq_,module,exports){var Map = _dereq_(160);var $export = _dereq_(33);var shared = _dereq_(103)('metadata');var store = shared.store || (shared.store = new (_dereq_(266))());var getOrCreateMetadataMap = function (target, targetKey, create) {  var targetMetadata = store.get(target);  if (!targetMetadata) {    if (!create) return undefined;    store.set(target, targetMetadata = new Map());  }  var keyMetadata = targetMetadata.get(targetKey);  if (!keyMetadata) {    if (!create) return undefined;    targetMetadata.set(targetKey, keyMetadata = new Map());  } return keyMetadata;};var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {  var metadataMap = getOrCreateMetadataMap(O, P, false);  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);};var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {  var metadataMap = getOrCreateMetadataMap(O, P, false);  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);};var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);};var ordinaryOwnMetadataKeys = function (target, targetKey) {  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);  var keys = [];  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });  return keys;};var toMetaKey = function (it) {  return it === undefined || typeof it == 'symbol' ? it : String(it);};var exp = function (O) {  $export($export.S, 'Reflect', O);};module.exports = {  store: store,  map: getOrCreateMetadataMap,  has: ordinaryHasOwnMetadata,  get: ordinaryGetOwnMetadata,  set: ordinaryDefineOwnMetadata,  keys: ordinaryOwnMetadataKeys,  key: toMetaKey,  exp: exp};},{"103":103,"160":160,"266":266,"33":33}],68:[function(_dereq_,module,exports){var global = _dereq_(40);var macrotask = _dereq_(113).set;var Observer = global.MutationObserver || global.WebKitMutationObserver;var process = global.process;var Promise = global.Promise;var isNode = _dereq_(18)(process) == 'process';module.exports = function () {  var head, last, notify;  var flush = function () {    var parent, fn;    if (isNode && (parent = process.domain)) parent.exit();    while (head) {      fn = head.fn;      head = head.next;      try {        fn();      } catch (e) {        if (head) notify();        else last = undefined;        throw e;      }    } last = undefined;    if (parent) parent.enter();  };  // Node.js  if (isNode) {    notify = function () {      process.nextTick(flush);    };  // browsers with MutationObserver  } else if (Observer) {    var toggle = true;    var node = document.createTextNode('');    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new    notify = function () {      node.data = toggle = !toggle;    };  // environments with maybe non-completely correct, but existent Promise  } else if (Promise && Promise.resolve) {    var promise = Promise.resolve();    notify = function () {      promise.then(flush);    };  // for other environments - macrotask based on:  // - setImmediate  // - MessageChannel  // - window.postMessag  // - onreadystatechange  // - setTimeout  } else {    notify = function () {      // strange IE + webpack dev server bug - use .call(global)      macrotask.call(global, flush);    };  }  return function (fn) {    var task = { fn: fn, next: undefined };    if (last) last.next = task;    if (!head) {      head = task;      notify();    } last = task;  };};},{"113":113,"18":18,"40":40}],69:[function(_dereq_,module,exports){'use strict';// 25.4.1.5 NewPromiseCapability(C)var aFunction = _dereq_(3);function PromiseCapability(C) {  var resolve, reject;  this.promise = new C(function ($$resolve, $$reject) {    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');    resolve = $$resolve;    reject = $$reject;  });  this.resolve = aFunction(resolve);  this.reject = aFunction(reject);}module.exports.f = function (C) {  return new PromiseCapability(C);};},{"3":3}],70:[function(_dereq_,module,exports){'use strict';// 19.1.2.1 Object.assign(target, source, ...)var getKeys = _dereq_(81);var gOPS = _dereq_(78);var pIE = _dereq_(82);var toObject = _dereq_(119);var IObject = _dereq_(47);var $assign = Object.assign;// should work with symbols and should have deterministic property order (V8 bug)module.exports = !$assign || _dereq_(35)(function () {  var A = {};  var B = {};  // eslint-disable-next-line no-undef  var S = Symbol();  var K = 'abcdefghijklmnopqrst';  A[S] = 7;  K.split('').forEach(function (k) { B[k] = k; });  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;}) ? function assign(target, source) { // eslint-disable-line no-unused-vars  var T = toObject(target);  var aLen = arguments.length;  var index = 1;  var getSymbols = gOPS.f;  var isEnum = pIE.f;  while (aLen > index) {    var S = IObject(arguments[index++]);    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);    var length = keys.length;    var j = 0;    var key;    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];  } return T;} : $assign;},{"119":119,"35":35,"47":47,"78":78,"81":81,"82":82}],71:[function(_dereq_,module,exports){// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])var anObject = _dereq_(7);var dPs = _dereq_(73);var enumBugKeys = _dereq_(31);var IE_PROTO = _dereq_(102)('IE_PROTO');var Empty = function () { /* empty */ };var PROTOTYPE = 'prototype';// Create object with fake `null` prototype: use iframe Object with cleared prototypevar createDict = function () {  // Thrash, waste and sodomy: IE GC bug  var iframe = _dereq_(30)('iframe');  var i = enumBugKeys.length;  var lt = '<'; var gt=">" ; iframedocument; iframe.style.display="none" _dereq_(43).appendchild(iframe); iframe.src="javascript:" eslint-disable-line no-script-url createdict="iframe.contentWindow.Object;" html.removechild(iframe); iframedocument="iframe.contentWindow.document;" iframedocument.open(); iframedocument.write(lt + 'script' 'document.f="Object'" lt ' script' gt); iframedocument.close(); while (i--) delete createdict[prototype][enumbugkeys[i]]; return createdict(); }; module.exports="Object.create" || function create(o, properties) { result; if (o !="=" null) empty[prototype]="anObject(O);" result="new" empty(); add "__proto__" for object.getprototypeof polyfill result[ie_proto]="O;" } else properties="==" undefined ? : dps(result, properties); },{"102":102,"30":30,"31":31,"43":43,"7":7,"73":73}],72:[function(_dereq_,module,exports){ anobject="_dereq_(7);" ie8_dom_define="_dereq_(44);" toprimitive="_dereq_(120);" dp="Object.defineProperty;" exports.f="_dereq_(29)" object.defineproperty defineproperty(o, p, attributes) anobject(o); p="toPrimitive(P," true); anobject(attributes); (ie8_dom_define) try dp(o, attributes); catch (e) * empty ('get' in attributes 'set' throw typeerror('accessors not supported!'); ('value' o[p]="Attributes.value;" o; },{"120":120,"29":29,"44":44,"7":7}],73:[function(_dereq_,module,exports){ getkeys="_dereq_(81);" object.defineproperties defineproperties(o, keys="getKeys(Properties);" length="keys.length;" i="0;" p; (length> i) dP.f(O, P = keys[i++], Properties[P]);  return O;};},{"29":29,"7":7,"72":72,"81":81}],74:[function(_dereq_,module,exports){'use strict';// Forced replacement prototype accessors methodsmodule.exports = _dereq_(60) || !_dereq_(35)(function () {  var K = Math.random();  // In FF throws only define methods  // eslint-disable-next-line no-undef, no-useless-call  __defineSetter__.call(null, K, function () { /* empty */ });  delete _dereq_(40)[K];});},{"35":35,"40":40,"60":60}],75:[function(_dereq_,module,exports){var pIE = _dereq_(82);var createDesc = _dereq_(92);var toIObject = _dereq_(117);var toPrimitive = _dereq_(120);var has = _dereq_(41);var IE8_DOM_DEFINE = _dereq_(44);var gOPD = Object.getOwnPropertyDescriptor;exports.f = _dereq_(29) ? gOPD : function getOwnPropertyDescriptor(O, P) {  O = toIObject(O);  P = toPrimitive(P, true);  if (IE8_DOM_DEFINE) try {    return gOPD(O, P);  } catch (e) { /* empty */ }  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);};},{"117":117,"120":120,"29":29,"41":41,"44":44,"82":82,"92":92}],76:[function(_dereq_,module,exports){// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and windowvar toIObject = _dereq_(117);var gOPN = _dereq_(77).f;var toString = {}.toString;var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames  ? Object.getOwnPropertyNames(window) : [];var getWindowNames = function (it) {  try {    return gOPN(it);  } catch (e) {    return windowNames.slice();  }};module.exports.f = function getOwnPropertyNames(it) {  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));};},{"117":117,"77":77}],77:[function(_dereq_,module,exports){// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)var $keys = _dereq_(80);var hiddenKeys = _dereq_(31).concat('length', 'prototype');exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {  return $keys(O, hiddenKeys);};},{"31":31,"80":80}],78:[function(_dereq_,module,exports){exports.f = Object.getOwnPropertySymbols;},{}],79:[function(_dereq_,module,exports){// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)var has = _dereq_(41);var toObject = _dereq_(119);var IE_PROTO = _dereq_(102)('IE_PROTO');var ObjectProto = Object.prototype;module.exports = Object.getPrototypeOf || function (O) {  O = toObject(O);  if (has(O, IE_PROTO)) return O[IE_PROTO];  if (typeof O.constructor == 'function' && O instanceof O.constructor) {    return O.constructor.prototype;  } return O instanceof Object ? ObjectProto : null;};},{"102":102,"119":119,"41":41}],80:[function(_dereq_,module,exports){var has = _dereq_(41);var toIObject = _dereq_(117);var arrayIndexOf = _dereq_(11)(false);var IE_PROTO = _dereq_(102)('IE_PROTO');module.exports = function (object, names) {  var O = toIObject(object);  var i = 0;  var result = [];  var key;  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);  // Don't enum bug & hidden keys  while (names.length > i) if (has(O, key = names[i++])) {    ~arrayIndexOf(result, key) || result.push(key);  }  return result;};},{"102":102,"11":11,"117":117,"41":41}],81:[function(_dereq_,module,exports){// 19.1.2.14 / 15.2.3.14 Object.keys(O)var $keys = _dereq_(80);var enumBugKeys = _dereq_(31);module.exports = Object.keys || function keys(O) {  return $keys(O, enumBugKeys);};},{"31":31,"80":80}],82:[function(_dereq_,module,exports){exports.f = {}.propertyIsEnumerable;},{}],83:[function(_dereq_,module,exports){// most Object methods by ES6 should accept primitivesvar $export = _dereq_(33);var core = _dereq_(23);var fails = _dereq_(35);module.exports = function (KEY, exec) {  var fn = (core.Object || {})[KEY] || Object[KEY];  var exp = {};  exp[KEY] = exec(fn);  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);};},{"23":23,"33":33,"35":35}],84:[function(_dereq_,module,exports){var getKeys = _dereq_(81);var toIObject = _dereq_(117);var isEnum = _dereq_(82).f;module.exports = function (isEntries) {  return function (it) {    var O = toIObject(it);    var keys = getKeys(O);    var length = keys.length;    var i = 0;    var result = [];    var key;    while (length > i) if (isEnum.call(O, key = keys[i++])) {      result.push(isEntries ? [key, O[key]] : O[key]);    } return result;  };};},{"117":117,"81":81,"82":82}],85:[function(_dereq_,module,exports){// all object keys, includes non-enumerable and symbolsvar gOPN = _dereq_(77);var gOPS = _dereq_(78);var anObject = _dereq_(7);var Reflect = _dereq_(40).Reflect;module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {  var keys = gOPN.f(anObject(it));  var getSymbols = gOPS.f;  return getSymbols ? keys.concat(getSymbols(it)) : keys;};},{"40":40,"7":7,"77":77,"78":78}],86:[function(_dereq_,module,exports){var $parseFloat = _dereq_(40).parseFloat;var $trim = _dereq_(111).trim;module.exports = 1 / $parseFloat(_dereq_(112) + '-0') !== -Infinity ? function parseFloat(str) {  var string = $trim(String(str), 3);  var result = $parseFloat(string);  return result === 0 && string.charAt(0) == '-' ? -0 : result;} : $parseFloat;},{"111":111,"112":112,"40":40}],87:[function(_dereq_,module,exports){var $parseInt = _dereq_(40).parseInt;var $trim = _dereq_(111).trim;var ws = _dereq_(112);var hex = /^[-+]?0[xX]/;module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {  var string = $trim(String(str), 3);  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));} : $parseInt;},{"111":111,"112":112,"40":40}],88:[function(_dereq_,module,exports){'use strict';var path = _dereq_(89);var invoke = _dereq_(46);var aFunction = _dereq_(3);module.exports = function (/* ...pargs */) {  var fn = aFunction(this);  var length = arguments.length;  var pargs = Array(length);  var i = 0;  var _ = path._;  var holder = false;  while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;  return function (/* ...args */) {    var that = this;    var aLen = arguments.length;    var j = 0;    var k = 0;    var args;    if (!holder && !aLen) return invoke(fn, pargs, that);    args = pargs.slice();    if (holder) for (;length > j; j++) if (args[j] === _) args[j] = arguments[k++];    while (aLen > k) args.push(arguments[k++]);    return invoke(fn, args, that);  };};},{"3":3,"46":46,"89":89}],89:[function(_dereq_,module,exports){module.exports = _dereq_(40);},{"40":40}],90:[function(_dereq_,module,exports){module.exports = function (exec) {  try {    return { e: false, v: exec() };  } catch (e) {    return { e: true, v: e };  }};},{}],91:[function(_dereq_,module,exports){var newPromiseCapability = _dereq_(69);module.exports = function (C, x) {  var promiseCapability = newPromiseCapability.f(C);  var resolve = promiseCapability.resolve;  resolve(x);  return promiseCapability.promise;};},{"69":69}],92:[function(_dereq_,module,exports){module.exports = function (bitmap, value) {  return {    enumerable: !(bitmap & 1),    configurable: !(bitmap & 2),    writable: !(bitmap & 4),    value: value  };};},{}],93:[function(_dereq_,module,exports){var redefine = _dereq_(94);module.exports = function (target, src, safe) {  for (var key in src) redefine(target, key, src[key], safe);  return target;};},{"94":94}],94:[function(_dereq_,module,exports){var global = _dereq_(40);var hide = _dereq_(42);var has = _dereq_(41);var SRC = _dereq_(124)('src');var TO_STRING = 'toString';var $toString = Function[TO_STRING];var TPL = ('' + $toString).split(TO_STRING);_dereq_(23).inspectSource = function (it) {  return $toString.call(it);};(module.exports = function (O, key, val, safe) {  var isFunction = typeof val == 'function';  if (isFunction) has(val, 'name') || hide(val, 'name', key);  if (O[key] === val) return;  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));  if (O === global) {    O[key] = val;  } else if (!safe) {    delete O[key];    hide(O, key, val);  } else if (O[key]) {    O[key] = val;  } else {    hide(O, key, val);  }// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative})(Function.prototype, TO_STRING, function toString() {  return typeof this == 'function' && this[SRC] || $toString.call(this);});},{"124":124,"23":23,"40":40,"41":41,"42":42}],95:[function(_dereq_,module,exports){module.exports = function (regExp, replace) {  var replacer = replace === Object(replace) ? function (part) {    return replace[part];  } : replace;  return function (it) {    return String(it).replace(regExp, replacer);  };};},{}],96:[function(_dereq_,module,exports){// 7.2.9 SameValue(x, y)module.exports = Object.is || function is(x, y) {  // eslint-disable-next-line no-self-compare  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;};},{}],97:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/proposal-setmap-offrom/var $export = _dereq_(33);var aFunction = _dereq_(3);var ctx = _dereq_(25);var forOf = _dereq_(39);module.exports = function (COLLECTION) {  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {    var mapFn = arguments[1];    var mapping, A, n, cb;    aFunction(this);    mapping = mapFn !== undefined;    if (mapping) aFunction(mapFn);    if (source == undefined) return new this();    A = [];    if (mapping) {      n = 0;      cb = ctx(mapFn, arguments[2], 2);      forOf(source, false, function (nextItem) {        A.push(cb(nextItem, n++));      });    } else {      forOf(source, false, A.push, A);    }    return new this(A);  } });};},{"25":25,"3":3,"33":33,"39":39}],98:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/proposal-setmap-offrom/var $export = _dereq_(33);module.exports = function (COLLECTION) {  $export($export.S, COLLECTION, { of: function of() {    var length = arguments.length;    var A = Array(length);    while (length--) A[length] = arguments[length];    return new this(A);  } });};},{"33":33}],99:[function(_dereq_,module,exports){// Works with __proto__ only. Old v8 can't work with null proto objects./* eslint-disable no-proto */var isObject = _dereq_(51);var anObject = _dereq_(7);var check = function (O, proto) {  anObject(O);  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");};module.exports = {  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line    function (test, buggy, set) {      try {        set = _dereq_(25)(Function.call, _dereq_(75).f(Object.prototype, '__proto__').set, 2);        set(test, []);        buggy = !(test instanceof Array);      } catch (e) { buggy = true; }      return function setPrototypeOf(O, proto) {        check(O, proto);        if (buggy) O.__proto__ = proto;        else set(O, proto);        return O;      };    }({}, false) : undefined),  check: check};},{"25":25,"51":51,"7":7,"75":75}],100:[function(_dereq_,module,exports){'use strict';var global = _dereq_(40);var dP = _dereq_(72);var DESCRIPTORS = _dereq_(29);var SPECIES = _dereq_(128)('species');module.exports = function (KEY) {  var C = global[KEY];  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {    configurable: true,    get: function () { return this; }  });};},{"128":128,"29":29,"40":40,"72":72}],101:[function(_dereq_,module,exports){var def = _dereq_(72).f;var has = _dereq_(41);var TAG = _dereq_(128)('toStringTag');module.exports = function (it, tag, stat) {  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });};},{"128":128,"41":41,"72":72}],102:[function(_dereq_,module,exports){var shared = _dereq_(103)('keys');var uid = _dereq_(124);module.exports = function (key) {  return shared[key] || (shared[key] = uid(key));};},{"103":103,"124":124}],103:[function(_dereq_,module,exports){var global = _dereq_(40);var SHARED = '__core-js_shared__';var store = global[SHARED] || (global[SHARED] = {});module.exports = function (key) {  return store[key] || (store[key] = {});};},{"40":40}],104:[function(_dereq_,module,exports){// 7.3.20 SpeciesConstructor(O, defaultConstructor)var anObject = _dereq_(7);var aFunction = _dereq_(3);var SPECIES = _dereq_(128)('species');module.exports = function (O, D) {  var C = anObject(O).constructor;  var S;  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);};},{"128":128,"3":3,"7":7}],105:[function(_dereq_,module,exports){'use strict';var fails = _dereq_(35);module.exports = function (method, arg) {  return !!method && fails(function () {    // eslint-disable-next-line no-useless-call    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);  });};},{"35":35}],106:[function(_dereq_,module,exports){var toInteger = _dereq_(116);var defined = _dereq_(28);// true  -> String#at// false -> String#codePointAtmodule.exports = function (TO_STRING) {  return function (that, pos) {    var s = String(defined(that));    var i = toInteger(pos);    var l = s.length;    var a, b;    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;    a = s.charCodeAt(i);    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff      ? TO_STRING ? s.charAt(i) : a      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;  };};},{"116":116,"28":28}],107:[function(_dereq_,module,exports){// helper for String#{startsWith, endsWith, includes}var isRegExp = _dereq_(52);var defined = _dereq_(28);module.exports = function (that, searchString, NAME) {  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");  return String(defined(that));};},{"28":28,"52":52}],108:[function(_dereq_,module,exports){var $export = _dereq_(33);var fails = _dereq_(35);var defined = _dereq_(28);var quot = /"/g;// B.2.3.2.1 CreateHTML(string, tag, attribute, value)var createHTML = function (string, tag, attribute, value) {  var S = String(defined(string));  var p1 = '<' + tag; if (attribute !="=" '') p1 attribute '="' + String(value).replace(quot, '&quot;') + '" '; return>' + S + '</'>';};module.exports = function (NAME, exec) {  var O = {};  O[NAME] = exec(createHTML);  $export($export.P + $export.F * fails(function () {    var test = ''[NAME]('"');    return test !== test.toLowerCase() || test.split('"').length > 3;  }), 'String', O);};},{"28":28,"33":33,"35":35}],109:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-string-pad-start-endvar toLength = _dereq_(118);var repeat = _dereq_(110);var defined = _dereq_(28);module.exports = function (that, maxLength, fillString, left) {  var S = String(defined(that));  var stringLength = S.length;  var fillStr = fillString === undefined ? ' ' : String(fillString);  var intMaxLength = toLength(maxLength);  if (intMaxLength <= stringlength || fillstr="=" '') return s; var filllen="intMaxLength" - stringlength; stringfiller="repeat.call(fillStr," math.ceil(filllen fillstr.length)); if (stringfiller.length> fillLen) stringFiller = stringFiller.slice(0, fillLen);  return left ? stringFiller + S : S + stringFiller;};},{"110":110,"118":118,"28":28}],110:[function(_dereq_,module,exports){'use strict';var toInteger = _dereq_(116);var defined = _dereq_(28);module.exports = function repeat(count) {  var str = String(defined(this));  var res = '';  var n = toInteger(count);  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;  return res;};},{"116":116,"28":28}],111:[function(_dereq_,module,exports){var $export = _dereq_(33);var defined = _dereq_(28);var fails = _dereq_(35);var spaces = _dereq_(112);var space = '[' + spaces + ']';var non = '\u200b\u0085';var ltrim = RegExp('^' + space + space + '*');var rtrim = RegExp(space + space + '*$');var exporter = function (KEY, exec, ALIAS) {  var exp = {};  var FORCE = fails(function () {    return !!spaces[KEY]() || non[KEY]() != non;  });  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];  if (ALIAS) exp[ALIAS] = fn;  $export($export.P + $export.F * FORCE, 'String', exp);};// 1 -> String#trimLeft// 2 -> String#trimRight// 3 -> String#trimvar trim = exporter.trim = function (string, TYPE) {  string = String(defined(string));  if (TYPE & 1) string = string.replace(ltrim, '');  if (TYPE & 2) string = string.replace(rtrim, '');  return string;};module.exports = exporter;},{"112":112,"28":28,"33":33,"35":35}],112:[function(_dereq_,module,exports){module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';},{}],113:[function(_dereq_,module,exports){var ctx = _dereq_(25);var invoke = _dereq_(46);var html = _dereq_(43);var cel = _dereq_(30);var global = _dereq_(40);var process = global.process;var setTask = global.setImmediate;var clearTask = global.clearImmediate;var MessageChannel = global.MessageChannel;var Dispatch = global.Dispatch;var counter = 0;var queue = {};var ONREADYSTATECHANGE = 'onreadystatechange';var defer, channel, port;var run = function () {  var id = +this;  // eslint-disable-next-line no-prototype-builtins  if (queue.hasOwnProperty(id)) {    var fn = queue[id];    delete queue[id];    fn();  }};var listener = function (event) {  run.call(event.data);};// Node.js 0.9+ & IE10+ has setImmediate, otherwise:if (!setTask || !clearTask) {  setTask = function setImmediate(fn) {    var args = [];    var i = 1;    while (arguments.length > i) args.push(arguments[i++]);    queue[++counter] = function () {      // eslint-disable-next-line no-new-func      invoke(typeof fn == 'function' ? fn : Function(fn), args);    };    defer(counter);    return counter;  };  clearTask = function clearImmediate(id) {    delete queue[id];  };  // Node.js 0.8-  if (_dereq_(18)(process) == 'process') {    defer = function (id) {      process.nextTick(ctx(run, id, 1));    };  // Sphere (JS game engine) Dispatch API  } else if (Dispatch && Dispatch.now) {    defer = function (id) {      Dispatch.now(ctx(run, id, 1));    };  // Browsers with MessageChannel, includes WebWorkers  } else if (MessageChannel) {    channel = new MessageChannel();    port = channel.port2;    channel.port1.onmessage = listener;    defer = ctx(port.postMessage, port, 1);  // Browsers with postMessage, skip WebWorkers  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {    defer = function (id) {      global.postMessage(id + '', '*');    };    global.addEventListener('message', listener, false);  // IE8-  } else if (ONREADYSTATECHANGE in cel('script')) {    defer = function (id) {      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {        html.removeChild(this);        run.call(id);      };    };  // Rest old browsers  } else {    defer = function (id) {      setTimeout(ctx(run, id, 1), 0);    };  }}module.exports = {  set: setTask,  clear: clearTask};},{"18":18,"25":25,"30":30,"40":40,"43":43,"46":46}],114:[function(_dereq_,module,exports){var toInteger = _dereq_(116);var max = Math.max;var min = Math.min;module.exports = function (index, length) {  index = toInteger(index);  return index < 0 ? max(index + length, 0) : min(index, length);};},{"116":116}],115:[function(_dereq_,module,exports){// https://tc39.github.io/ecma262/#sec-toindexvar toInteger = _dereq_(116);var toLength = _dereq_(118);module.exports = function (it) {  if (it === undefined) return 0;  var number = toInteger(it);  var length = toLength(number);  if (number !== length) throw RangeError('Wrong length!');  return length;};},{"116":116,"118":118}],116:[function(_dereq_,module,exports){// 7.1.4 ToIntegervar ceil = Math.ceil;var floor = Math.floor;module.exports = function (it) {  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);};},{}],117:[function(_dereq_,module,exports){// to indexed object, toObject with fallback for non-array-like ES3 stringsvar IObject = _dereq_(47);var defined = _dereq_(28);module.exports = function (it) {  return IObject(defined(it));};},{"28":28,"47":47}],118:[function(_dereq_,module,exports){// 7.1.15 ToLengthvar toInteger = _dereq_(116);var min = Math.min;module.exports = function (it) {  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991};},{"116":116}],119:[function(_dereq_,module,exports){// 7.1.13 ToObject(argument)var defined = _dereq_(28);module.exports = function (it) {  return Object(defined(it));};},{"28":28}],120:[function(_dereq_,module,exports){// 7.1.1 ToPrimitive(input [, PreferredType])var isObject = _dereq_(51);// instead of the ES6 spec version, we didn't implement @@toPrimitive case// and the second argument - flag - preferred type is a stringmodule.exports = function (it, S) {  if (!isObject(it)) return it;  var fn, val;  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;  throw TypeError("Can't convert object to primitive value");};},{"51":51}],121:[function(_dereq_,module,exports){'use strict';if (_dereq_(29)) {  var LIBRARY = _dereq_(60);  var global = _dereq_(40);  var fails = _dereq_(35);  var $export = _dereq_(33);  var $typed = _dereq_(123);  var $buffer = _dereq_(122);  var ctx = _dereq_(25);  var anInstance = _dereq_(6);  var propertyDesc = _dereq_(92);  var hide = _dereq_(42);  var redefineAll = _dereq_(93);  var toInteger = _dereq_(116);  var toLength = _dereq_(118);  var toIndex = _dereq_(115);  var toAbsoluteIndex = _dereq_(114);  var toPrimitive = _dereq_(120);  var has = _dereq_(41);  var classof = _dereq_(17);  var isObject = _dereq_(51);  var toObject = _dereq_(119);  var isArrayIter = _dereq_(48);  var create = _dereq_(71);  var getPrototypeOf = _dereq_(79);  var gOPN = _dereq_(77).f;  var getIterFn = _dereq_(129);  var uid = _dereq_(124);  var wks = _dereq_(128);  var createArrayMethod = _dereq_(12);  var createArrayIncludes = _dereq_(11);  var speciesConstructor = _dereq_(104);  var ArrayIterators = _dereq_(141);  var Iterators = _dereq_(58);  var $iterDetect = _dereq_(56);  var setSpecies = _dereq_(100);  var arrayFill = _dereq_(9);  var arrayCopyWithin = _dereq_(8);  var $DP = _dereq_(72);  var $GOPD = _dereq_(75);  var dP = $DP.f;  var gOPD = $GOPD.f;  var RangeError = global.RangeError;  var TypeError = global.TypeError;  var Uint8Array = global.Uint8Array;  var ARRAY_BUFFER = 'ArrayBuffer';  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';  var PROTOTYPE = 'prototype';  var ArrayProto = Array[PROTOTYPE];  var $ArrayBuffer = $buffer.ArrayBuffer;  var $DataView = $buffer.DataView;  var arrayForEach = createArrayMethod(0);  var arrayFilter = createArrayMethod(2);  var arraySome = createArrayMethod(3);  var arrayEvery = createArrayMethod(4);  var arrayFind = createArrayMethod(5);  var arrayFindIndex = createArrayMethod(6);  var arrayIncludes = createArrayIncludes(true);  var arrayIndexOf = createArrayIncludes(false);  var arrayValues = ArrayIterators.values;  var arrayKeys = ArrayIterators.keys;  var arrayEntries = ArrayIterators.entries;  var arrayLastIndexOf = ArrayProto.lastIndexOf;  var arrayReduce = ArrayProto.reduce;  var arrayReduceRight = ArrayProto.reduceRight;  var arrayJoin = ArrayProto.join;  var arraySort = ArrayProto.sort;  var arraySlice = ArrayProto.slice;  var arrayToString = ArrayProto.toString;  var arrayToLocaleString = ArrayProto.toLocaleString;  var ITERATOR = wks('iterator');  var TAG = wks('toStringTag');  var TYPED_CONSTRUCTOR = uid('typed_constructor');  var DEF_CONSTRUCTOR = uid('def_constructor');  var ALL_CONSTRUCTORS = $typed.CONSTR;  var TYPED_ARRAY = $typed.TYPED;  var VIEW = $typed.VIEW;  var WRONG_LENGTH = 'Wrong length!';  var $map = createArrayMethod(1, function (O, length) {    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);  });  var LITTLE_ENDIAN = fails(function () {    // eslint-disable-next-line no-undef    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;  });  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {    new Uint8Array(1).set({});  });  var toOffset = function (it, BYTES) {    var offset = toInteger(it);    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');    return offset;  };  var validate = function (it) {    if (isObject(it) && TYPED_ARRAY in it) return it;    throw TypeError(it + ' is not a typed array!');  };  var allocate = function (C, length) {    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {      throw TypeError('It is not a typed array constructor!');    } return new C(length);  };  var speciesFromList = function (O, list) {    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);  };  var fromList = function (C, list) {    var index = 0;    var length = list.length;    var result = allocate(C, length);    while (length > index) result[index] = list[index++];    return result;  };  var addGetter = function (it, key, internal) {    dP(it, key, { get: function () { return this._d[internal]; } });  };  var $from = function from(source /* , mapfn, thisArg */) {    var O = toObject(source);    var aLen = arguments.length;    var mapfn = aLen > 1 ? arguments[1] : undefined;    var mapping = mapfn !== undefined;    var iterFn = getIterFn(O);    var i, length, values, result, step, iterator;    if (iterFn != undefined && !isArrayIter(iterFn)) {      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {        values.push(step.value);      } O = values;    }    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {      result[i] = mapping ? mapfn(O[i], i) : O[i];    }    return result;  };  var $of = function of(/* ...items */) {    var index = 0;    var length = arguments.length;    var result = allocate(this, length);    while (length > index) result[index] = arguments[index++];    return result;  };  // iOS Safari 6.x fails here  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });  var $toLocaleString = function toLocaleString() {    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);  };  var proto = {    copyWithin: function copyWithin(target, start /* , end */) {      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);    },    every: function every(callbackfn /* , thisArg */) {      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);    },    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars      return arrayFill.apply(validate(this), arguments);    },    filter: function filter(callbackfn /* , thisArg */) {      return speciesFromList(this, arrayFilter(validate(this), callbackfn,        arguments.length > 1 ? arguments[1] : undefined));    },    find: function find(predicate /* , thisArg */) {      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);    },    findIndex: function findIndex(predicate /* , thisArg */) {      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);    },    forEach: function forEach(callbackfn /* , thisArg */) {      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);    },    indexOf: function indexOf(searchElement /* , fromIndex */) {      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);    },    includes: function includes(searchElement /* , fromIndex */) {      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);    },    join: function join(separator) { // eslint-disable-line no-unused-vars      return arrayJoin.apply(validate(this), arguments);    },    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars      return arrayLastIndexOf.apply(validate(this), arguments);    },    map: function map(mapfn /* , thisArg */) {      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);    },    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars      return arrayReduce.apply(validate(this), arguments);    },    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars      return arrayReduceRight.apply(validate(this), arguments);    },    reverse: function reverse() {      var that = this;      var length = validate(that).length;      var middle = Math.floor(length / 2);      var index = 0;      var value;      while (index < middle) {        value = that[index];        that[index++] = that[--length];        that[length] = value;      } return that;    },    some: function some(callbackfn /* , thisArg */) {      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);    },    sort: function sort(comparefn) {      return arraySort.call(validate(this), comparefn);    },    subarray: function subarray(begin, end) {      var O = validate(this);      var length = O.length;      var $begin = toAbsoluteIndex(begin, length);      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(        O.buffer,        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)      );    }  };  var $slice = function slice(start, end) {    return speciesFromList(this, arraySlice.call(validate(this), start, end));  };  var $set = function set(arrayLike /* , offset */) {    validate(this);    var offset = toOffset(arguments[1], 1);    var length = this.length;    var src = toObject(arrayLike);    var len = toLength(src.length);    var index = 0;    if (len + offset > length) throw RangeError(WRONG_LENGTH);    while (index < len) this[offset + index] = src[index++];  };  var $iterators = {    entries: function entries() {      return arrayEntries.call(validate(this));    },    keys: function keys() {      return arrayKeys.call(validate(this));    },    values: function values() {      return arrayValues.call(validate(this));    }  };  var isTAIndex = function (target, key) {    return isObject(target)      && target[TYPED_ARRAY]      && typeof key != 'symbol'      && key in target      && String(+key) == String(key);  };  var $getDesc = function getOwnPropertyDescriptor(target, key) {    return isTAIndex(target, key = toPrimitive(key, true))      ? propertyDesc(2, target[key])      : gOPD(target, key);  };  var $setDesc = function defineProperty(target, key, desc) {    if (isTAIndex(target, key = toPrimitive(key, true))      && isObject(desc)      && has(desc, 'value')      && !has(desc, 'get')      && !has(desc, 'set')      // TODO: add validation descriptor w/o calling accessors      && !desc.configurable      && (!has(desc, 'writable') || desc.writable)      && (!has(desc, 'enumerable') || desc.enumerable)    ) {      target[key] = desc.value;      return target;    } return dP(target, key, desc);  };  if (!ALL_CONSTRUCTORS) {    $GOPD.f = $getDesc;    $DP.f = $setDesc;  }  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {    getOwnPropertyDescriptor: $getDesc,    defineProperty: $setDesc  });  if (fails(function () { arrayToString.call({}); })) {    arrayToString = arrayToLocaleString = function toString() {      return arrayJoin.call(this);    };  }  var $TypedArrayPrototype$ = redefineAll({}, proto);  redefineAll($TypedArrayPrototype$, $iterators);  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);  redefineAll($TypedArrayPrototype$, {    slice: $slice,    set: $set,    constructor: function () { /* noop */ },    toString: arrayToString,    toLocaleString: $toLocaleString  });  addGetter($TypedArrayPrototype$, 'buffer', 'b');  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');  addGetter($TypedArrayPrototype$, 'byteLength', 'l');  addGetter($TypedArrayPrototype$, 'length', 'e');  dP($TypedArrayPrototype$, TAG, {    get: function () { return this[TYPED_ARRAY]; }  });  // eslint-disable-next-line max-statements  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {    CLAMPED = !!CLAMPED;    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';    var GETTER = 'get' + KEY;    var SETTER = 'set' + KEY;    var TypedArray = global[NAME];    var Base = TypedArray || {};    var TAC = TypedArray && getPrototypeOf(TypedArray);    var FORCED = !TypedArray || !$typed.ABV;    var O = {};    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];    var getter = function (that, index) {      var data = that._d;      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);    };    var setter = function (that, index, value) {      var data = that._d;      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);    };    var addElement = function (that, index) {      dP(that, index, {        get: function () {          return getter(this, index);        },        set: function (value) {          return setter(this, index, value);        },        enumerable: true      });    };    if (FORCED) {      TypedArray = wrapper(function (that, data, $offset, $length) {        anInstance(that, TypedArray, NAME, '_d');        var index = 0;        var offset = 0;        var buffer, byteLength, length, klass;        if (!isObject(data)) {          length = toIndex(data);          byteLength = length * BYTES;          buffer = new $ArrayBuffer(byteLength);        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {          buffer = data;          offset = toOffset($offset, BYTES);          var $len = data.byteLength;          if ($length === undefined) {            if ($len % BYTES) throw RangeError(WRONG_LENGTH);            byteLength = $len - offset;            if (byteLength < 0) throw RangeError(WRONG_LENGTH);          } else {            byteLength = toLength($length) * BYTES;            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);          }          length = byteLength / BYTES;        } else if (TYPED_ARRAY in data) {          return fromList(TypedArray, data);        } else {          return $from.call(TypedArray, data);        }        hide(that, '_d', {          b: buffer,          o: offset,          l: byteLength,          e: length,          v: new $DataView(buffer)        });        while (index < length) addElement(that, index++);      });      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);      hide(TypedArrayPrototype, 'constructor', TypedArray);    } else if (!fails(function () {      TypedArray(1);    }) || !fails(function () {      new TypedArray(-1); // eslint-disable-line no-new    }) || !$iterDetect(function (iter) {      new TypedArray(); // eslint-disable-line no-new      new TypedArray(null); // eslint-disable-line no-new      new TypedArray(1.5); // eslint-disable-line no-new      new TypedArray(iter); // eslint-disable-line no-new    }, true)) {      TypedArray = wrapper(function (that, data, $offset, $length) {        anInstance(that, TypedArray, NAME);        var klass;        // `ws` module bug, temporarily remove validation length for Uint8Array        // https://github.com/websockets/ws/pull/645        if (!isObject(data)) return new Base(toIndex(data));        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {          return $length !== undefined            ? new Base(data, toOffset($offset, BYTES), $length)            : $offset !== undefined              ? new Base(data, toOffset($offset, BYTES))              : new Base(data);        }        if (TYPED_ARRAY in data) return fromList(TypedArray, data);        return $from.call(TypedArray, data);      });      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);      });      TypedArray[PROTOTYPE] = TypedArrayPrototype;      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;    }    var $nativeIterator = TypedArrayPrototype[ITERATOR];    var CORRECT_ITER_NAME = !!$nativeIterator      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);    var $iterator = $iterators.values;    hide(TypedArray, TYPED_CONSTRUCTOR, true);    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);    hide(TypedArrayPrototype, VIEW, true);    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {      dP(TypedArrayPrototype, TAG, {        get: function () { return NAME; }      });    }    O[NAME] = TypedArray;    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);    $export($export.S, NAME, {      BYTES_PER_ELEMENT: BYTES    });    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {      from: $from,      of: $of    });    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);    $export($export.P, NAME, proto);    setSpecies(NAME);    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;    $export($export.P + $export.F * fails(function () {      new TypedArray(1).slice();    }), NAME, { slice: $slice });    $export($export.P + $export.F * (fails(function () {      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();    }) || !fails(function () {      TypedArrayPrototype.toLocaleString.call([1, 2]);    })), NAME, { toLocaleString: $toLocaleString });    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);  };} else module.exports = function () { /* empty */ };},{"100":100,"104":104,"11":11,"114":114,"115":115,"116":116,"118":118,"119":119,"12":12,"120":120,"122":122,"123":123,"124":124,"128":128,"129":129,"141":141,"17":17,"25":25,"29":29,"33":33,"35":35,"40":40,"41":41,"42":42,"48":48,"51":51,"56":56,"58":58,"6":6,"60":60,"71":71,"72":72,"75":75,"77":77,"79":79,"8":8,"9":9,"92":92,"93":93}],122:[function(_dereq_,module,exports){'use strict';var global = _dereq_(40);var DESCRIPTORS = _dereq_(29);var LIBRARY = _dereq_(60);var $typed = _dereq_(123);var hide = _dereq_(42);var redefineAll = _dereq_(93);var fails = _dereq_(35);var anInstance = _dereq_(6);var toInteger = _dereq_(116);var toLength = _dereq_(118);var toIndex = _dereq_(115);var gOPN = _dereq_(77).f;var dP = _dereq_(72).f;var arrayFill = _dereq_(9);var setToStringTag = _dereq_(101);var ARRAY_BUFFER = 'ArrayBuffer';var DATA_VIEW = 'DataView';var PROTOTYPE = 'prototype';var WRONG_LENGTH = 'Wrong length!';var WRONG_INDEX = 'Wrong index!';var $ArrayBuffer = global[ARRAY_BUFFER];var $DataView = global[DATA_VIEW];var Math = global.Math;var RangeError = global.RangeError;// eslint-disable-next-line no-shadow-restricted-namesvar Infinity = global.Infinity;var BaseBuffer = $ArrayBuffer;var abs = Math.abs;var pow = Math.pow;var floor = Math.floor;var log = Math.log;var LN2 = Math.LN2;var BUFFER = 'buffer';var BYTE_LENGTH = 'byteLength';var BYTE_OFFSET = 'byteOffset';var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;// IEEE754 conversions based on https://github.com/feross/ieee754function packIEEE754(value, mLen, nBytes) {  var buffer = Array(nBytes);  var eLen = nBytes * 8 - mLen - 1;  var eMax = (1 << eLen) - 1;  var eBias = eMax >> 1;  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;  var i = 0;  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;  var e, m, c;  value = abs(value);  // eslint-disable-next-line no-self-compare  if (value != value || value === Infinity) {    // eslint-disable-next-line no-self-compare    m = value != value ? 1 : 0;    e = eMax;  } else {    e = floor(log(value) / LN2);    if (value * (c = pow(2, -e)) < 1) {      e--;      c *= 2;    }    if (e + eBias >= 1) {      value += rt / c;    } else {      value += rt * pow(2, 1 - eBias);    }    if (value * c >= 2) {      e++;      c /= 2;    }    if (e + eBias >= eMax) {      m = 0;      e = eMax;    } else if (e + eBias >= 1) {      m = (value * c - 1) * pow(2, mLen);      e = e + eBias;    } else {      m = value * pow(2, eBias - 1) * pow(2, mLen);      e = 0;    }  }  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);  e = e << mLen | m;  eLen += mLen;  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);  buffer[--i] |= s * 128;  return buffer;}function unpackIEEE754(buffer, mLen, nBytes) {  var eLen = nBytes * 8 - mLen - 1;  var eMax = (1 << eLen) - 1;  var eBias = eMax >> 1;  var nBits = eLen - 7;  var i = nBytes - 1;  var s = buffer[i--];  var e = s & 127;  var m;  s >>= 7;  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);  m = e & (1 << -nBits) - 1;  e >>= -nBits;  nBits += mLen;  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);  if (e === 0) {    e = 1 - eBias;  } else if (e === eMax) {    return m ? NaN : s ? -Infinity : Infinity;  } else {    m = m + pow(2, mLen);    e = e - eBias;  } return (s ? -1 : 1) * m * pow(2, e - mLen);}function unpackI32(bytes) {  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];}function packI8(it) {  return [it & 0xff];}function packI16(it) {  return [it & 0xff, it >> 8 & 0xff];}function packI32(it) {  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];}function packF64(it) {  return packIEEE754(it, 52, 8);}function packF32(it) {  return packIEEE754(it, 23, 4);}function addGetter(C, key, internal) {  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });}function get(view, bytes, index, isLittleEndian) {  var numIndex = +index;  var intIndex = toIndex(numIndex);  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);  var store = view[$BUFFER]._b;  var start = intIndex + view[$OFFSET];  var pack = store.slice(start, start + bytes);  return isLittleEndian ? pack : pack.reverse();}function set(view, bytes, index, conversion, value, isLittleEndian) {  var numIndex = +index;  var intIndex = toIndex(numIndex);  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);  var store = view[$BUFFER]._b;  var start = intIndex + view[$OFFSET];  var pack = conversion(+value);  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];}if (!$typed.ABV) {  $ArrayBuffer = function ArrayBuffer(length) {    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);    var byteLength = toIndex(length);    this._b = arrayFill.call(Array(byteLength), 0);    this[$LENGTH] = byteLength;  };  $DataView = function DataView(buffer, byteOffset, byteLength) {    anInstance(this, $DataView, DATA_VIEW);    anInstance(buffer, $ArrayBuffer, DATA_VIEW);    var bufferLength = buffer[$LENGTH];    var offset = toInteger(byteOffset);    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);    this[$BUFFER] = buffer;    this[$OFFSET] = offset;    this[$LENGTH] = byteLength;  };  if (DESCRIPTORS) {    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');    addGetter($DataView, BUFFER, '_b');    addGetter($DataView, BYTE_LENGTH, '_l');    addGetter($DataView, BYTE_OFFSET, '_o');  }  redefineAll($DataView[PROTOTYPE], {    getInt8: function getInt8(byteOffset) {      return get(this, 1, byteOffset)[0] << 24 >> 24;    },    getUint8: function getUint8(byteOffset) {      return get(this, 1, byteOffset)[0];    },    getInt16: function getInt16(byteOffset /* , littleEndian */) {      var bytes = get(this, 2, byteOffset, arguments[1]);      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;    },    getUint16: function getUint16(byteOffset /* , littleEndian */) {      var bytes = get(this, 2, byteOffset, arguments[1]);      return bytes[1] << 8 | bytes[0];    },    getInt32: function getInt32(byteOffset /* , littleEndian */) {      return unpackI32(get(this, 4, byteOffset, arguments[1]));    },    getUint32: function getUint32(byteOffset /* , littleEndian */) {      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;    },    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);    },    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);    },    setInt8: function setInt8(byteOffset, value) {      set(this, 1, byteOffset, packI8, value);    },    setUint8: function setUint8(byteOffset, value) {      set(this, 1, byteOffset, packI8, value);    },    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {      set(this, 2, byteOffset, packI16, value, arguments[2]);    },    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {      set(this, 2, byteOffset, packI16, value, arguments[2]);    },    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {      set(this, 4, byteOffset, packI32, value, arguments[2]);    },    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {      set(this, 4, byteOffset, packI32, value, arguments[2]);    },    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {      set(this, 4, byteOffset, packF32, value, arguments[2]);    },    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {      set(this, 8, byteOffset, packF64, value, arguments[2]);    }  });} else {  if (!fails(function () {    $ArrayBuffer(1);  }) || !fails(function () {    new $ArrayBuffer(-1); // eslint-disable-line no-new  }) || fails(function () {    new $ArrayBuffer(); // eslint-disable-line no-new    new $ArrayBuffer(1.5); // eslint-disable-line no-new    new $ArrayBuffer(NaN); // eslint-disable-line no-new    return $ArrayBuffer.name != ARRAY_BUFFER;  })) {    $ArrayBuffer = function ArrayBuffer(length) {      anInstance(this, $ArrayBuffer);      return new BaseBuffer(toIndex(length));    };    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);    }    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;  }  // iOS Safari 7.x bug  var view = new $DataView(new $ArrayBuffer(2));  var $setInt8 = $DataView[PROTOTYPE].setInt8;  view.setInt8(0, 2147483648);  view.setInt8(1, 2147483649);  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {    setInt8: function setInt8(byteOffset, value) {      $setInt8.call(this, byteOffset, value << 24 >> 24);    },    setUint8: function setUint8(byteOffset, value) {      $setInt8.call(this, byteOffset, value << 24 >> 24);    }  }, true);}setToStringTag($ArrayBuffer, ARRAY_BUFFER);setToStringTag($DataView, DATA_VIEW);hide($DataView[PROTOTYPE], $typed.VIEW, true);exports[ARRAY_BUFFER] = $ArrayBuffer;exports[DATA_VIEW] = $DataView;},{"101":101,"115":115,"116":116,"118":118,"123":123,"29":29,"35":35,"40":40,"42":42,"6":6,"60":60,"72":72,"77":77,"9":9,"93":93}],123:[function(_dereq_,module,exports){var global = _dereq_(40);var hide = _dereq_(42);var uid = _dereq_(124);var TYPED = uid('typed_array');var VIEW = uid('view');var ABV = !!(global.ArrayBuffer && global.DataView);var CONSTR = ABV;var i = 0;var l = 9;var Typed;var TypedArrayConstructors = (  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array').split(',');while (i < l) {  if (Typed = global[TypedArrayConstructors[i++]]) {    hide(Typed.prototype, TYPED, true);    hide(Typed.prototype, VIEW, true);  } else CONSTR = false;}module.exports = {  ABV: ABV,  CONSTR: CONSTR,  TYPED: TYPED,  VIEW: VIEW};},{"124":124,"40":40,"42":42}],124:[function(_dereq_,module,exports){var id = 0;var px = Math.random();module.exports = function (key) {  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));};},{}],125:[function(_dereq_,module,exports){var isObject = _dereq_(51);module.exports = function (it, TYPE) {  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');  return it;};},{"51":51}],126:[function(_dereq_,module,exports){var global = _dereq_(40);var core = _dereq_(23);var LIBRARY = _dereq_(60);var wksExt = _dereq_(127);var defineProperty = _dereq_(72).f;module.exports = function (name) {  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });};},{"127":127,"23":23,"40":40,"60":60,"72":72}],127:[function(_dereq_,module,exports){exports.f = _dereq_(128);},{"128":128}],128:[function(_dereq_,module,exports){var store = _dereq_(103)('wks');var uid = _dereq_(124);var Symbol = _dereq_(40).Symbol;var USE_SYMBOL = typeof Symbol == 'function';var $exports = module.exports = function (name) {  return store[name] || (store[name] =    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));};$exports.store = store;},{"103":103,"124":124,"40":40}],129:[function(_dereq_,module,exports){var classof = _dereq_(17);var ITERATOR = _dereq_(128)('iterator');var Iterators = _dereq_(58);module.exports = _dereq_(23).getIteratorMethod = function (it) {  if (it != undefined) return it[ITERATOR]    || it['@@iterator']    || Iterators[classof(it)];};},{"128":128,"17":17,"23":23,"58":58}],130:[function(_dereq_,module,exports){// https://github.com/benjamingr/RexExp.escapevar $export = _dereq_(33);var $re = _dereq_(95)(/[\\^$*+?.()|[\]{}]/g, '\\$&');$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });},{"33":33,"95":95}],131:[function(_dereq_,module,exports){// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)var $export = _dereq_(33);$export($export.P, 'Array', { copyWithin: _dereq_(8) });_dereq_(5)('copyWithin');},{"33":33,"5":5,"8":8}],132:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $every = _dereq_(12)(4);$export($export.P + $export.F * !_dereq_(105)([].every, true), 'Array', {  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])  every: function every(callbackfn /* , thisArg */) {    return $every(this, callbackfn, arguments[1]);  }});},{"105":105,"12":12,"33":33}],133:[function(_dereq_,module,exports){// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)var $export = _dereq_(33);$export($export.P, 'Array', { fill: _dereq_(9) });_dereq_(5)('fill');},{"33":33,"5":5,"9":9}],134:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $filter = _dereq_(12)(2);$export($export.P + $export.F * !_dereq_(105)([].filter, true), 'Array', {  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])  filter: function filter(callbackfn /* , thisArg */) {    return $filter(this, callbackfn, arguments[1]);  }});},{"105":105,"12":12,"33":33}],135:[function(_dereq_,module,exports){'use strict';// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)var $export = _dereq_(33);var $find = _dereq_(12)(6);var KEY = 'findIndex';var forced = true;// Shouldn't skip holesif (KEY in []) Array(1)[KEY](function () { forced = false; });$export($export.P + $export.F * forced, 'Array', {  findIndex: function findIndex(callbackfn /* , that = undefined */) {    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);  }});_dereq_(5)(KEY);},{"12":12,"33":33,"5":5}],136:[function(_dereq_,module,exports){'use strict';// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)var $export = _dereq_(33);var $find = _dereq_(12)(5);var KEY = 'find';var forced = true;// Shouldn't skip holesif (KEY in []) Array(1)[KEY](function () { forced = false; });$export($export.P + $export.F * forced, 'Array', {  find: function find(callbackfn /* , that = undefined */) {    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);  }});_dereq_(5)(KEY);},{"12":12,"33":33,"5":5}],137:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $forEach = _dereq_(12)(0);var STRICT = _dereq_(105)([].forEach, true);$export($export.P + $export.F * !STRICT, 'Array', {  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])  forEach: function forEach(callbackfn /* , thisArg */) {    return $forEach(this, callbackfn, arguments[1]);  }});},{"105":105,"12":12,"33":33}],138:[function(_dereq_,module,exports){'use strict';var ctx = _dereq_(25);var $export = _dereq_(33);var toObject = _dereq_(119);var call = _dereq_(53);var isArrayIter = _dereq_(48);var toLength = _dereq_(118);var createProperty = _dereq_(24);var getIterFn = _dereq_(129);$export($export.S + $export.F * !_dereq_(56)(function (iter) { Array.from(iter); }), 'Array', {  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {    var O = toObject(arrayLike);    var C = typeof this == 'function' ? this : Array;    var aLen = arguments.length;    var mapfn = aLen > 1 ? arguments[1] : undefined;    var mapping = mapfn !== undefined;    var index = 0;    var iterFn = getIterFn(O);    var length, result, step, iterator;    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);    // if object isn't iterable or it's array with default iterator - use simple case    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);      }    } else {      length = toLength(O.length);      for (result = new C(length); length > index; index++) {        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);      }    }    result.length = index;    return result;  }});},{"118":118,"119":119,"129":129,"24":24,"25":25,"33":33,"48":48,"53":53,"56":56}],139:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $indexOf = _dereq_(11)(false);var $native = [].indexOf;var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(105)($native)), 'Array', {  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {    return NEGATIVE_ZERO      // convert -0 to +0      ? $native.apply(this, arguments) || 0      : $indexOf(this, searchElement, arguments[1]);  }});},{"105":105,"11":11,"33":33}],140:[function(_dereq_,module,exports){// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)var $export = _dereq_(33);$export($export.S, 'Array', { isArray: _dereq_(49) });},{"33":33,"49":49}],141:[function(_dereq_,module,exports){'use strict';var addToUnscopables = _dereq_(5);var step = _dereq_(57);var Iterators = _dereq_(58);var toIObject = _dereq_(117);// 22.1.3.4 Array.prototype.entries()// 22.1.3.13 Array.prototype.keys()// 22.1.3.29 Array.prototype.values()// 22.1.3.30 Array.prototype[@@iterator]()module.exports = _dereq_(55)(Array, 'Array', function (iterated, kind) {  this._t = toIObject(iterated); // target  this._i = 0;                   // next index  this._k = kind;                // kind// 22.1.5.2.1 %ArrayIteratorPrototype%.next()}, function () {  var O = this._t;  var kind = this._k;  var index = this._i++;  if (!O || index >= O.length) {    this._t = undefined;    return step(1);  }  if (kind == 'keys') return step(0, index);  if (kind == 'values') return step(0, O[index]);  return step(0, [index, O[index]]);}, 'values');// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)Iterators.Arguments = Iterators.Array;addToUnscopables('keys');addToUnscopables('values');addToUnscopables('entries');},{"117":117,"5":5,"55":55,"57":57,"58":58}],142:[function(_dereq_,module,exports){'use strict';// 22.1.3.13 Array.prototype.join(separator)var $export = _dereq_(33);var toIObject = _dereq_(117);var arrayJoin = [].join;// fallback for not array-like strings$export($export.P + $export.F * (_dereq_(47) != Object || !_dereq_(105)(arrayJoin)), 'Array', {  join: function join(separator) {    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);  }});},{"105":105,"117":117,"33":33,"47":47}],143:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toIObject = _dereq_(117);var toInteger = _dereq_(116);var toLength = _dereq_(118);var $native = [].lastIndexOf;var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(105)($native)), 'Array', {  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {    // convert -0 to +0    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;    var O = toIObject(this);    var length = toLength(O.length);    var index = length - 1;    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));    if (index < 0) index = length + index;    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;    return -1;  }});},{"105":105,"116":116,"117":117,"118":118,"33":33}],144:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $map = _dereq_(12)(1);$export($export.P + $export.F * !_dereq_(105)([].map, true), 'Array', {  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])  map: function map(callbackfn /* , thisArg */) {    return $map(this, callbackfn, arguments[1]);  }});},{"105":105,"12":12,"33":33}],145:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var createProperty = _dereq_(24);// WebKit Array.of isn't generic$export($export.S + $export.F * _dereq_(35)(function () {  function F() { /* empty */ }  return !(Array.of.call(F) instanceof F);}), 'Array', {  // 22.1.2.3 Array.of( ...items)  of: function of(/* ...args */) {    var index = 0;    var aLen = arguments.length;    var result = new (typeof this == 'function' ? this : Array)(aLen);    while (aLen > index) createProperty(result, index, arguments[index++]);    result.length = aLen;    return result;  }});},{"24":24,"33":33,"35":35}],146:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $reduce = _dereq_(13);$export($export.P + $export.F * !_dereq_(105)([].reduceRight, true), 'Array', {  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])  reduceRight: function reduceRight(callbackfn /* , initialValue */) {    return $reduce(this, callbackfn, arguments.length, arguments[1], true);  }});},{"105":105,"13":13,"33":33}],147:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $reduce = _dereq_(13);$export($export.P + $export.F * !_dereq_(105)([].reduce, true), 'Array', {  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])  reduce: function reduce(callbackfn /* , initialValue */) {    return $reduce(this, callbackfn, arguments.length, arguments[1], false);  }});},{"105":105,"13":13,"33":33}],148:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var html = _dereq_(43);var cof = _dereq_(18);var toAbsoluteIndex = _dereq_(114);var toLength = _dereq_(118);var arraySlice = [].slice;// fallback for not array-like ES3 strings and DOM objects$export($export.P + $export.F * _dereq_(35)(function () {  if (html) arraySlice.call(html);}), 'Array', {  slice: function slice(begin, end) {    var len = toLength(this.length);    var klass = cof(this);    end = end === undefined ? len : end;    if (klass == 'Array') return arraySlice.call(this, begin, end);    var start = toAbsoluteIndex(begin, len);    var upTo = toAbsoluteIndex(end, len);    var size = toLength(upTo - start);    var cloned = Array(size);    var i = 0;    for (; i < size; i++) cloned[i] = klass == 'String'      ? this.charAt(start + i)      : this[start + i];    return cloned;  }});},{"114":114,"118":118,"18":18,"33":33,"35":35,"43":43}],149:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $some = _dereq_(12)(3);$export($export.P + $export.F * !_dereq_(105)([].some, true), 'Array', {  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])  some: function some(callbackfn /* , thisArg */) {    return $some(this, callbackfn, arguments[1]);  }});},{"105":105,"12":12,"33":33}],150:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var aFunction = _dereq_(3);var toObject = _dereq_(119);var fails = _dereq_(35);var $sort = [].sort;var test = [1, 2, 3];$export($export.P + $export.F * (fails(function () {  // IE8-  test.sort(undefined);}) || !fails(function () {  // V8 bug  test.sort(null);  // Old WebKit}) || !_dereq_(105)($sort)), 'Array', {  // 22.1.3.25 Array.prototype.sort(comparefn)  sort: function sort(comparefn) {    return comparefn === undefined      ? $sort.call(toObject(this))      : $sort.call(toObject(this), aFunction(comparefn));  }});},{"105":105,"119":119,"3":3,"33":33,"35":35}],151:[function(_dereq_,module,exports){_dereq_(100)('Array');},{"100":100}],152:[function(_dereq_,module,exports){// 20.3.3.1 / 15.9.4.4 Date.now()var $export = _dereq_(33);$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });},{"33":33}],153:[function(_dereq_,module,exports){// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()var $export = _dereq_(33);var toISOString = _dereq_(26);// PhantomJS / old WebKit has a broken implementations$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {  toISOString: toISOString});},{"26":26,"33":33}],154:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toObject = _dereq_(119);var toPrimitive = _dereq_(120);$export($export.P + $export.F * _dereq_(35)(function () {  return new Date(NaN).toJSON() !== null    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;}), 'Date', {  // eslint-disable-next-line no-unused-vars  toJSON: function toJSON(key) {    var O = toObject(this);    var pv = toPrimitive(O);    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();  }});},{"119":119,"120":120,"33":33,"35":35}],155:[function(_dereq_,module,exports){var TO_PRIMITIVE = _dereq_(128)('toPrimitive');var proto = Date.prototype;if (!(TO_PRIMITIVE in proto)) _dereq_(42)(proto, TO_PRIMITIVE, _dereq_(27));},{"128":128,"27":27,"42":42}],156:[function(_dereq_,module,exports){var DateProto = Date.prototype;var INVALID_DATE = 'Invalid Date';var TO_STRING = 'toString';var $toString = DateProto[TO_STRING];var getTime = DateProto.getTime;if (new Date(NaN) + '' != INVALID_DATE) {  _dereq_(94)(DateProto, TO_STRING, function toString() {    var value = getTime.call(this);    // eslint-disable-next-line no-self-compare    return value === value ? $toString.call(this) : INVALID_DATE;  });}},{"94":94}],157:[function(_dereq_,module,exports){// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)var $export = _dereq_(33);$export($export.P, 'Function', { bind: _dereq_(16) });},{"16":16,"33":33}],158:[function(_dereq_,module,exports){'use strict';var isObject = _dereq_(51);var getPrototypeOf = _dereq_(79);var HAS_INSTANCE = _dereq_(128)('hasInstance');var FunctionProto = Function.prototype;// 19.2.3.6 Function.prototype[@@hasInstance](V)if (!(HAS_INSTANCE in FunctionProto)) _dereq_(72).f(FunctionProto, HAS_INSTANCE, { value: function (O) {  if (typeof this != 'function' || !isObject(O)) return false;  if (!isObject(this.prototype)) return O instanceof this;  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;  return false;} });},{"128":128,"51":51,"72":72,"79":79}],159:[function(_dereq_,module,exports){var dP = _dereq_(72).f;var FProto = Function.prototype;var nameRE = /^\s*function ([^ (]*)/;var NAME = 'name';// 19.2.4.2 nameNAME in FProto || _dereq_(29) && dP(FProto, NAME, {  configurable: true,  get: function () {    try {      return ('' + this).match(nameRE)[1];    } catch (e) {      return '';    }  }});},{"29":29,"72":72}],160:[function(_dereq_,module,exports){'use strict';var strong = _dereq_(19);var validate = _dereq_(125);var MAP = 'Map';// 23.1 Map Objectsmodule.exports = _dereq_(22)(MAP, function (get) {  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };}, {  // 23.1.3.6 Map.prototype.get(key)  get: function get(key) {    var entry = strong.getEntry(validate(this, MAP), key);    return entry && entry.v;  },  // 23.1.3.9 Map.prototype.set(key, value)  set: function set(key, value) {    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);  }}, strong, true);},{"125":125,"19":19,"22":22}],161:[function(_dereq_,module,exports){// 20.2.2.3 Math.acosh(x)var $export = _dereq_(33);var log1p = _dereq_(63);var sqrt = Math.sqrt;var $acosh = Math.acosh;$export($export.S + $export.F * !($acosh  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509  && Math.floor($acosh(Number.MAX_VALUE)) == 710  // Tor Browser bug: Math.acosh(Infinity) -> NaN  && $acosh(Infinity) == Infinity), 'Math', {  acosh: function acosh(x) {    return (x = +x) < 1 ? NaN : x > 94906265.62425156      ? Math.log(x) + Math.LN2      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));  }});},{"33":33,"63":63}],162:[function(_dereq_,module,exports){// 20.2.2.5 Math.asinh(x)var $export = _dereq_(33);var $asinh = Math.asinh;function asinh(x) {  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));}// Tor Browser bug: Math.asinh(0) -> -0$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });},{"33":33}],163:[function(_dereq_,module,exports){// 20.2.2.7 Math.atanh(x)var $export = _dereq_(33);var $atanh = Math.atanh;// Tor Browser bug: Math.atanh(-0) -> 0$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {  atanh: function atanh(x) {    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;  }});},{"33":33}],164:[function(_dereq_,module,exports){// 20.2.2.9 Math.cbrt(x)var $export = _dereq_(33);var sign = _dereq_(65);$export($export.S, 'Math', {  cbrt: function cbrt(x) {    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);  }});},{"33":33,"65":65}],165:[function(_dereq_,module,exports){// 20.2.2.11 Math.clz32(x)var $export = _dereq_(33);$export($export.S, 'Math', {  clz32: function clz32(x) {    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;  }});},{"33":33}],166:[function(_dereq_,module,exports){// 20.2.2.12 Math.cosh(x)var $export = _dereq_(33);var exp = Math.exp;$export($export.S, 'Math', {  cosh: function cosh(x) {    return (exp(x = +x) + exp(-x)) / 2;  }});},{"33":33}],167:[function(_dereq_,module,exports){// 20.2.2.14 Math.expm1(x)var $export = _dereq_(33);var $expm1 = _dereq_(61);$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });},{"33":33,"61":61}],168:[function(_dereq_,module,exports){// 20.2.2.16 Math.fround(x)var $export = _dereq_(33);$export($export.S, 'Math', { fround: _dereq_(62) });},{"33":33,"62":62}],169:[function(_dereq_,module,exports){// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])var $export = _dereq_(33);var abs = Math.abs;$export($export.S, 'Math', {  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars    var sum = 0;    var i = 0;    var aLen = arguments.length;    var larg = 0;    var arg, div;    while (i < aLen) {      arg = abs(arguments[i++]);      if (larg < arg) {        div = larg / arg;        sum = sum * div * div + 1;        larg = arg;      } else if (arg > 0) {        div = arg / larg;        sum += div * div;      } else sum += arg;    }    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);  }});},{"33":33}],170:[function(_dereq_,module,exports){// 20.2.2.18 Math.imul(x, y)var $export = _dereq_(33);var $imul = Math.imul;// some WebKit versions fails with big numbers, some has wrong arity$export($export.S + $export.F * _dereq_(35)(function () {  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;}), 'Math', {  imul: function imul(x, y) {    var UINT16 = 0xffff;    var xn = +x;    var yn = +y;    var xl = UINT16 & xn;    var yl = UINT16 & yn;    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);  }});},{"33":33,"35":35}],171:[function(_dereq_,module,exports){// 20.2.2.21 Math.log10(x)var $export = _dereq_(33);$export($export.S, 'Math', {  log10: function log10(x) {    return Math.log(x) * Math.LOG10E;  }});},{"33":33}],172:[function(_dereq_,module,exports){// 20.2.2.20 Math.log1p(x)var $export = _dereq_(33);$export($export.S, 'Math', { log1p: _dereq_(63) });},{"33":33,"63":63}],173:[function(_dereq_,module,exports){// 20.2.2.22 Math.log2(x)var $export = _dereq_(33);$export($export.S, 'Math', {  log2: function log2(x) {    return Math.log(x) / Math.LN2;  }});},{"33":33}],174:[function(_dereq_,module,exports){// 20.2.2.28 Math.sign(x)var $export = _dereq_(33);$export($export.S, 'Math', { sign: _dereq_(65) });},{"33":33,"65":65}],175:[function(_dereq_,module,exports){// 20.2.2.30 Math.sinh(x)var $export = _dereq_(33);var expm1 = _dereq_(61);var exp = Math.exp;// V8 near Chromium 38 has a problem with very small numbers$export($export.S + $export.F * _dereq_(35)(function () {  return !Math.sinh(-2e-17) != -2e-17;}), 'Math', {  sinh: function sinh(x) {    return Math.abs(x = +x) < 1      ? (expm1(x) - expm1(-x)) / 2      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);  }});},{"33":33,"35":35,"61":61}],176:[function(_dereq_,module,exports){// 20.2.2.33 Math.tanh(x)var $export = _dereq_(33);var expm1 = _dereq_(61);var exp = Math.exp;$export($export.S, 'Math', {  tanh: function tanh(x) {    var a = expm1(x = +x);    var b = expm1(-x);    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));  }});},{"33":33,"61":61}],177:[function(_dereq_,module,exports){// 20.2.2.34 Math.trunc(x)var $export = _dereq_(33);$export($export.S, 'Math', {  trunc: function trunc(it) {    return (it > 0 ? Math.floor : Math.ceil)(it);  }});},{"33":33}],178:[function(_dereq_,module,exports){'use strict';var global = _dereq_(40);var has = _dereq_(41);var cof = _dereq_(18);var inheritIfRequired = _dereq_(45);var toPrimitive = _dereq_(120);var fails = _dereq_(35);var gOPN = _dereq_(77).f;var gOPD = _dereq_(75).f;var dP = _dereq_(72).f;var $trim = _dereq_(111).trim;var NUMBER = 'Number';var $Number = global[NUMBER];var Base = $Number;var proto = $Number.prototype;// Opera ~12 has broken Object#toStringvar BROKEN_COF = cof(_dereq_(71)(proto)) == NUMBER;var TRIM = 'trim' in String.prototype;// 7.1.3 ToNumber(argument)var toNumber = function (argument) {  var it = toPrimitive(argument, false);  if (typeof it == 'string' && it.length > 2) {    it = TRIM ? it.trim() : $trim(it, 3);    var first = it.charCodeAt(0);    var third, radix, maxCode;    if (first === 43 || first === 45) {      third = it.charCodeAt(2);      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix    } else if (first === 48) {      switch (it.charCodeAt(1)) {        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i        default: return +it;      }      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {        code = digits.charCodeAt(i);        // parseInt parses a string to a first unavailable symbol        // but ToNumber should return NaN if a string contains unavailable symbols        if (code < 48 || code > maxCode) return NaN;      } return parseInt(digits, radix);    }  } return +it;};if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {  $Number = function Number(value) {    var it = arguments.length < 1 ? 0 : value;    var that = this;    return that instanceof $Number      // check on 1..constructor(foo) case      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);  };  for (var keys = _dereq_(29) ? gOPN(Base) : (    // ES3:    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +    // ES6 (in case, if modules with ES6 Number statics required before):    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'  ).split(','), j = 0, key; keys.length > j; j++) {    if (has(Base, key = keys[j]) && !has($Number, key)) {      dP($Number, key, gOPD(Base, key));    }  }  $Number.prototype = proto;  proto.constructor = $Number;  _dereq_(94)(global, NUMBER, $Number);}},{"111":111,"120":120,"18":18,"29":29,"35":35,"40":40,"41":41,"45":45,"71":71,"72":72,"75":75,"77":77,"94":94}],179:[function(_dereq_,module,exports){// 20.1.2.1 Number.EPSILONvar $export = _dereq_(33);$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });},{"33":33}],180:[function(_dereq_,module,exports){// 20.1.2.2 Number.isFinite(number)var $export = _dereq_(33);var _isFinite = _dereq_(40).isFinite;$export($export.S, 'Number', {  isFinite: function isFinite(it) {    return typeof it == 'number' && _isFinite(it);  }});},{"33":33,"40":40}],181:[function(_dereq_,module,exports){// 20.1.2.3 Number.isInteger(number)var $export = _dereq_(33);$export($export.S, 'Number', { isInteger: _dereq_(50) });},{"33":33,"50":50}],182:[function(_dereq_,module,exports){// 20.1.2.4 Number.isNaN(number)var $export = _dereq_(33);$export($export.S, 'Number', {  isNaN: function isNaN(number) {    // eslint-disable-next-line no-self-compare    return number != number;  }});},{"33":33}],183:[function(_dereq_,module,exports){// 20.1.2.5 Number.isSafeInteger(number)var $export = _dereq_(33);var isInteger = _dereq_(50);var abs = Math.abs;$export($export.S, 'Number', {  isSafeInteger: function isSafeInteger(number) {    return isInteger(number) && abs(number) <= 0x1fffffffffffff; } }); },{"33":33,"50":50}],184:[function(_dereq_,module,exports){ 20.1.2.6 number.max_safe_integer var $export="_dereq_(33);" $export($export.s, 'number', { max_safe_integer: 0x1fffffffffffff },{"33":33}],185:[function(_dereq_,module,exports){ 20.1.2.10 number.min_safe_integer min_safe_integer: -0x1fffffffffffff },{"33":33}],186:[function(_dereq_,module,exports){ $parsefloat="_dereq_(86);" 20.1.2.12 number.parsefloat(string) $export($export.s + $export.f * (number.parsefloat !="$parseFloat)," parsefloat: },{"33":33,"86":86}],187:[function(_dereq_,module,exports){ $parseint="_dereq_(87);" 20.1.2.13 number.parseint(string, radix) (number.parseint parseint: },{"33":33,"87":87}],188:[function(_dereq_,module,exports){ 'use strict'; tointeger="_dereq_(116);" anumbervalue="_dereq_(4);" repeat="_dereq_(110);" $tofixed="1.0.toFixed;" floor="Math.floor;" data="[0," 0, 0]; error="Number.toFixed: incorrect invocation!" ; zero="0" multiply="function" (n, c) i="-1;" c2="c;" while (++i < 6) data[i]; data[i]="c2" % 1e7; 1e7); }; divide="function" (n) c="0;" (--i>= 0) {    c += data[i];    data[i] = floor(c / n);    c = (c % n) * 1e7;  }};var numToString = function () {  var i = 6;  var s = '';  while (--i >= 0) {    if (s !== '' || i === 0 || data[i] !== 0) {      var t = String(data[i]);      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;    }  } return s;};var pow = function (x, n, acc) {  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);};var log = function (x) {  var n = 0;  var x2 = x;  while (x2 >= 4096) {    n += 12;    x2 /= 4096;  }  while (x2 >= 2) {    n += 1;    x2 /= 2;  } return n;};$export($export.P + $export.F * (!!$toFixed && (  0.00008.toFixed(3) !== '0.000' ||  0.9.toFixed(0) !== '1' ||  1.255.toFixed(2) !== '1.25' ||  1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_dereq_(35)(function () {  // V8 ~ Android 4.3-  $toFixed.call({});})), 'Number', {  toFixed: function toFixed(fractionDigits) {    var x = aNumberValue(this, ERROR);    var f = toInteger(fractionDigits);    var s = '';    var m = ZERO;    var e, z, j, k;    if (f < 0 || f > 20) throw RangeError(ERROR);    // eslint-disable-next-line no-self-compare    if (x != x) return 'NaN';    if (x <= -1e21 || x>= 1e21) return String(x);    if (x < 0) {      s = '-';      x = -x;    }    if (x > 1e-21) {      e = log(x * pow(2, 69, 1)) - 69;      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);      z *= 0x10000000000000;      e = 52 - e;      if (e > 0) {        multiply(0, z);        j = f;        while (j >= 7) {          multiply(1e7, 0);          j -= 7;        }        multiply(pow(10, j, 1), 0);        j = e - 1;        while (j >= 23) {          divide(1 << 23);          j -= 23;        }        divide(1 << j);        multiply(1, 1);        divide(2);        m = numToString();      } else {        multiply(0, z);        multiply(1 << -e, 0);        m = numToString() + repeat.call(ZERO, f);      }    }    if (f > 0) {      k = m.length;      m = s + (k <= f ? '0.' + repeat.call(zero, - k) m : m.slice(0, k f) '.' m.slice(k f)); } else { m; return }); },{"110":110,"116":116,"33":33,"35":35,"4":4}],189:[function(_dereq_,module,exports){ 'use strict'; var $export="_dereq_(33);" $fails="_dereq_(35);" anumbervalue="_dereq_(4);" $toprecision="1.0.toPrecision;" $export($export.p $export.f * ($fails(function () ie7- $toprecision.call(1, undefined) !="=" '1'; }) || !$fails(function v8 ~ android 4.3- $toprecision.call({}); })), 'number', toprecision: function toprecision(precision) that="aNumberValue(this," 'number#toprecision: incorrect invocation!'); precision="==" undefined $toprecision.call(that) $toprecision.call(that, precision); },{"33":33,"35":35,"4":4}],190:[function(_dereq_,module,exports){ 19.1.3.1 object.assign(target, source) $export($export.s $export.f, 'object', assign: _dereq_(70) },{"33":33,"70":70}],191:[function(_dereq_,module,exports){ 19.1.2.2 15.2.3.5 object.create(o [, properties]) $export($export.s, create: _dereq_(71) },{"33":33,"71":71}],192:[function(_dereq_,module,exports){ 19.1.2.3 15.2.3.7 object.defineproperties(o, properties) !_dereq_(29), defineproperties: _dereq_(73) },{"29":29,"33":33,"73":73}],193:[function(_dereq_,module,exports){ 19.1.2.4 15.2.3.6 object.defineproperty(o, p, attributes) defineproperty: _dereq_(72).f },{"29":29,"33":33,"72":72}],194:[function(_dereq_,module,exports){ 19.1.2.5 object.freeze(o) isobject="_dereq_(51);" meta="_dereq_(66).onFreeze;" _dereq_(83)('freeze', ($freeze) freeze(it) $freeze && isobject(it) $freeze(meta(it)) it; }; },{"51":51,"66":66,"83":83}],195:[function(_dereq_,module,exports){ 19.1.2.6 object.getownpropertydescriptor(o, p) toiobject="_dereq_(117);" $getownpropertydescriptor="_dereq_(75).f;" _dereq_(83)('getownpropertydescriptor', getownpropertydescriptor(it, key) $getownpropertydescriptor(toiobject(it), key); },{"117":117,"75":75,"83":83}],196:[function(_dereq_,module,exports){ 19.1.2.7 object.getownpropertynames(o) _dereq_(83)('getownpropertynames', _dereq_(76).f; },{"76":76,"83":83}],197:[function(_dereq_,module,exports){ 19.1.2.9 object.getprototypeof(o) toobject="_dereq_(119);" $getprototypeof="_dereq_(79);" _dereq_(83)('getprototypeof', getprototypeof(it) $getprototypeof(toobject(it)); },{"119":119,"79":79,"83":83}],198:[function(_dereq_,module,exports){ 19.1.2.11 object.isextensible(o) _dereq_(83)('isextensible', ($isextensible) isextensible(it) $isextensible $isextensible(it) true false; },{"51":51,"83":83}],199:[function(_dereq_,module,exports){ 19.1.2.12 object.isfrozen(o) _dereq_(83)('isfrozen', ($isfrozen) isfrozen(it) $isfrozen $isfrozen(it) false true; },{"51":51,"83":83}],200:[function(_dereq_,module,exports){ 19.1.2.13 object.issealed(o) _dereq_(83)('issealed', ($issealed) issealed(it) $issealed $issealed(it) },{"51":51,"83":83}],201:[function(_dereq_,module,exports){ 19.1.3.10 object.is(value1, value2) is: _dereq_(96) },{"33":33,"96":96}],202:[function(_dereq_,module,exports){ 19.1.2.14 object.keys(o) $keys="_dereq_(81);" _dereq_(83)('keys', keys(it) $keys(toobject(it)); },{"119":119,"81":81,"83":83}],203:[function(_dereq_,module,exports){ 19.1.2.15 object.preventextensions(o) _dereq_(83)('preventextensions', ($preventextensions) preventextensions(it) $preventextensions $preventextensions(meta(it)) },{"51":51,"66":66,"83":83}],204:[function(_dereq_,module,exports){ 19.1.2.17 object.seal(o) _dereq_(83)('seal', ($seal) seal(it) $seal $seal(meta(it)) },{"51":51,"66":66,"83":83}],205:[function(_dereq_,module,exports){ 19.1.3.19 object.setprototypeof(o, proto) setprototypeof: _dereq_(99).set },{"33":33,"99":99}],206:[function(_dereq_,module,exports){ 19.1.3.6 object.prototype.tostring() classof="_dereq_(17);" test="{};" test[_dereq_(128)('tostringtag')]="z" ; if (test '' ) _dereq_(94)(object.prototype, 'tostring', tostring() '[object ' classof(this) ']'; }, true); },{"128":128,"17":17,"94":94}],207:[function(_dereq_,module,exports){ $parsefloat="_dereq_(86);" 18.2.4 parsefloat(string) $export($export.g (parsefloat parsefloat: },{"33":33,"86":86}],208:[function(_dereq_,module,exports){ $parseint="_dereq_(87);" 18.2.5 parseint(string, radix) (parseint parseint: },{"33":33,"87":87}],209:[function(_dereq_,module,exports){ library="_dereq_(60);" global="_dereq_(40);" ctx="_dereq_(25);" afunction="_dereq_(3);" aninstance="_dereq_(6);" forof="_dereq_(39);" speciesconstructor="_dereq_(104);" task="_dereq_(113).set;" microtask="_dereq_(68)();" newpromisecapabilitymodule="_dereq_(69);" perform="_dereq_(90);" promiseresolve="_dereq_(91);" promise="Promise" typeerror="global.TypeError;" process="global.process;" $promise="global[PROMISE];" isnode="classof(process)" =="process" empty="function" internal, newgenericpromisecapability, ownpromisecapability, wrapper; newpromisecapability="newGenericPromiseCapability" newpromisecapabilitymodule.f; use_native="!!function" try correct subclassing with @@species support fakepromise="(promise.constructor" {})[_dereq_(128)('species')]="function" (exec) exec(empty, empty); unhandled rejections tracking support, nodejs without it fails (isnode typeof promiserejectionevent="=" 'function') promise.then(empty) instanceof fakepromise; catch (e) }(); helpers sameconstructor="LIBRARY" (a, b) wrapper special case a="==" b b; isthenable="function" (it) then; (then="it.then)" then notify="function" (promise, isreject) (promise._n) return; promise._n="true;" chain="promise._c;" microtask(function value="promise._v;" ok="promise._s" i="0;" run="function" (reaction) handler="ok" reaction.ok reaction.fail; resolve="reaction.resolve;" reject="reaction.reject;" domain="reaction.domain;" result, (handler) (!ok) (promise._h="=" 2) onhandleunhandled(promise); promise._h="1;" (handler="==" true) result="value;" (domain) domain.enter(); domain.exit(); (result="==" reaction.promise) reject(typeerror('promise-chain cycle')); then.call(result, resolve, reject); resolve(result); reject(value); reject(e); while (chain.length> i) run(chain[i++]); // variable length - can't use forEach    promise._c = [];    promise._n = false;    if (isReject && !promise._h) onUnhandled(promise);  });};var onUnhandled = function (promise) {  task.call(global, function () {    var value = promise._v;    var unhandled = isUnhandled(promise);    var result, handler, console;    if (unhandled) {      result = perform(function () {        if (isNode) {          process.emit('unhandledRejection', value, promise);        } else if (handler = global.onunhandledrejection) {          handler({ promise: promise, reason: value });        } else if ((console = global.console) && console.error) {          console.error('Unhandled promise rejection', value);        }      });      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should      promise._h = isNode || isUnhandled(promise) ? 2 : 1;    } promise._a = undefined;    if (unhandled && result.e) throw result.v;  });};var isUnhandled = function (promise) {  if (promise._h == 1) return false;  var chain = promise._a || promise._c;  var i = 0;  var reaction;  while (chain.length > i) {    reaction = chain[i++];    if (reaction.fail || !isUnhandled(reaction.promise)) return false;  } return true;};var onHandleUnhandled = function (promise) {  task.call(global, function () {    var handler;    if (isNode) {      process.emit('rejectionHandled', promise);    } else if (handler = global.onrejectionhandled) {      handler({ promise: promise, reason: promise._v });    }  });};var $reject = function (value) {  var promise = this;  if (promise._d) return;  promise._d = true;  promise = promise._w || promise; // unwrap  promise._v = value;  promise._s = 2;  if (!promise._a) promise._a = promise._c.slice();  notify(promise, true);};var $resolve = function (value) {  var promise = this;  var then;  if (promise._d) return;  promise._d = true;  promise = promise._w || promise; // unwrap  try {    if (promise === value) throw TypeError("Promise can't be resolved itself");    if (then = isThenable(value)) {      microtask(function () {        var wrapper = { _w: promise, _d: false }; // wrap        try {          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));        } catch (e) {          $reject.call(wrapper, e);        }      });    } else {      promise._v = value;      promise._s = 1;      notify(promise, false);    }  } catch (e) {    $reject.call({ _w: promise, _d: false }, e); // wrap  }};// constructor polyfillif (!USE_NATIVE) {  // 25.4.3.1 Promise(executor)  $Promise = function Promise(executor) {    anInstance(this, $Promise, PROMISE, '_h');    aFunction(executor);    Internal.call(this);    try {      executor(ctx($resolve, this, 1), ctx($reject, this, 1));    } catch (err) {      $reject.call(this, err);    }  };  // eslint-disable-next-line no-unused-vars  Internal = function Promise(executor) {    this._c = [];             // <- 0 1 2 3 awaiting reactions this._a="undefined;" <- checked in isunhandled this._s="0;" state this._d="false;" done this._v="undefined;" value this._h="0;" rejection state, - default, handled, unhandled this._n="false;" notify }; internal.prototype="_dereq_(93)($Promise.prototype," { 25.4.5.3 promise.prototype.then(onfulfilled, onrejected) then: function then(onfulfilled, var reaction="newPromiseCapability(speciesConstructor(this," $promise)); reaction.ok="typeof" onfulfilled="=" 'function' ? : true; reaction.fail="typeof" onrejected="=" && onrejected; reaction.domain="isNode" process.domain undefined; this._c.push(reaction); if (this._a) this._a.push(reaction); (this._s) notify(this, false); return reaction.promise; }, 25.4.5.1 promise.prototype.catch(onrejected) 'catch': (onrejected) this.then(undefined, onrejected); } }); ownpromisecapability="function" () promise="new" internal(); this.promise="promise;" this.resolve="ctx($resolve," promise, 1); this.reject="ctx($reject," newpromisecapabilitymodule.f="newPromiseCapability" = (c) sameconstructor($promise, c) new ownpromisecapability(c) newgenericpromisecapability(c); $export($export.g + $export.w $export.f * !use_native, promise: $promise _dereq_(101)($promise, promise); _dereq_(100)(promise); wrapper="_dereq_(23)[PROMISE];" statics $export($export.s 25.4.4.5 promise.reject(r) reject: reject(r) capability="newPromiseCapability(this);" $$reject="capability.reject;" $$reject(r); capability.promise; (library || !use_native), 25.4.4.6 promise.resolve(x) resolve: resolve(x) instanceof instead of internal slot check because we should fix it without replacement native core (x sameconstructor(x.constructor, this)) x; promiseresolve(this, x); !(use_native _dereq_(56)(function (iter) $promise.all(iter)['catch'](empty); })), 25.4.4.1 promise.all(iterable) all: all(iterable) c="this;" resolve="capability.resolve;" reject="capability.reject;" result="perform(function" values="[];" index="0;" remaining="1;" forof(iterable, false, (promise) $index="index++;" alreadycalled="false;" values.push(undefined); remaining++; c.resolve(promise).then(function (value) (alreadycalled) return; values[$index]="value;" --remaining resolve(values); reject); (result.e) reject(result.v); 25.4.4.4 promise.race(iterable) race: race(iterable) c.resolve(promise).then(capability.resolve, },{"100":100,"101":101,"104":104,"113":113,"128":128,"17":17,"23":23,"25":25,"3":3,"33":33,"39":39,"40":40,"51":51,"56":56,"6":6,"60":60,"68":68,"69":69,"90":90,"91":91,"93":93}],210:[function(_dereq_,module,exports){ 26.1.1 reflect.apply(target, thisargument, argumentslist) $export="_dereq_(33);" afunction="_dereq_(3);" anobject="_dereq_(7);" rapply="(_dereq_(40).Reflect" {}).apply; fapply="Function.apply;" ms edge argumentslist argument is optional !_dereq_(35)(function rapply(function empty }), 'reflect', apply: apply(target, t="aFunction(target);" l="anObject(argumentsList);" rapply(t, l) fapply.call(t, l); },{"3":3,"33":33,"35":35,"40":40,"7":7}],211:[function(_dereq_,module,exports){ 26.1.2 reflect.construct(target, [, newtarget]) create="_dereq_(71);" isobject="_dereq_(51);" fails="_dereq_(35);" bind="_dereq_(16);" rconstruct="(_dereq_(40).Reflect" {}).construct; supports only arguments and ff nightly sets third as `new.target`, but does not `this` from new_target_bug="fails(function" f() !(rconstruct(function [], f) f); args_bug="!fails(function" rconstruct(function (new_target_bug args_bug), construct: construct(target, args , newtarget ) afunction(target); anobject(args); < target afunction(arguments[2]); (args_bug !new_target_bug) rconstruct(target, args, newtarget); (target="=" newtarget) w o altered newtarget, optimization for 0-4 switch (args.length) case 0: target(); 1: target(args[0]); 2: target(args[0], args[1]); 3: args[1], args[2]); 4: args[2], args[3]); lot $args="[null];" $args.push.apply($args, args); (bind.apply(target, $args))(); with support built-in constructors proto="newTarget.prototype;" instance="create(isObject(proto)" object.prototype); instance, isobject(result) instance; },{"16":16,"3":3,"33":33,"35":35,"40":40,"51":51,"7":7,"71":71}],212:[function(_dereq_,module,exports){ 26.1.3 reflect.defineproperty(target, propertykey, attributes) dp="_dereq_(72);" toprimitive="_dereq_(120);" has broken reflect.defineproperty throwing returning false _dereq_(35)(function eslint-disable-next-line no-undef reflect.defineproperty(dp.f({}, 1, value: defineproperty: defineproperty(target, anobject(target); propertykey="toPrimitive(propertyKey," true); anobject(attributes); try dp.f(target, attributes); catch (e) false; },{"120":120,"33":33,"35":35,"7":7,"72":72}],213:[function(_dereq_,module,exports){ 26.1.4 reflect.deleteproperty(target, propertykey) gopd="_dereq_(75).f;" $export($export.s, deleteproperty: deleteproperty(target, desc="gOPD(anObject(target)," propertykey); !desc.configurable delete target[propertykey]; },{"33":33,"7":7,"75":75}],214:[function(_dereq_,module,exports){ 'use strict'; 26.1.5 reflect.enumerate(target) enumerate="function" (iterated) this._t="anObject(iterated);" this._i="0;" next keys="this._k" []; key; (key iterated) keys.push(key); _dereq_(54)(enumerate, 'object', that="this;" do (that._i>= keys.length) return { value: undefined, done: true };  } while (!((key = keys[that._i++]) in that._t));  return { value: key, done: false };});$export($export.S, 'Reflect', {  enumerate: function enumerate(target) {    return new Enumerate(target);  }});},{"33":33,"54":54,"7":7}],215:[function(_dereq_,module,exports){// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)var gOPD = _dereq_(75);var $export = _dereq_(33);var anObject = _dereq_(7);$export($export.S, 'Reflect', {  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {    return gOPD.f(anObject(target), propertyKey);  }});},{"33":33,"7":7,"75":75}],216:[function(_dereq_,module,exports){// 26.1.8 Reflect.getPrototypeOf(target)var $export = _dereq_(33);var getProto = _dereq_(79);var anObject = _dereq_(7);$export($export.S, 'Reflect', {  getPrototypeOf: function getPrototypeOf(target) {    return getProto(anObject(target));  }});},{"33":33,"7":7,"79":79}],217:[function(_dereq_,module,exports){// 26.1.6 Reflect.get(target, propertyKey [, receiver])var gOPD = _dereq_(75);var getPrototypeOf = _dereq_(79);var has = _dereq_(41);var $export = _dereq_(33);var isObject = _dereq_(51);var anObject = _dereq_(7);function get(target, propertyKey /* , receiver */) {  var receiver = arguments.length < 3 ? target : arguments[2];  var desc, proto;  if (anObject(target) === receiver) return target[propertyKey];  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')    ? desc.value    : desc.get !== undefined      ? desc.get.call(receiver)      : undefined;  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);}$export($export.S, 'Reflect', { get: get });},{"33":33,"41":41,"51":51,"7":7,"75":75,"79":79}],218:[function(_dereq_,module,exports){// 26.1.9 Reflect.has(target, propertyKey)var $export = _dereq_(33);$export($export.S, 'Reflect', {  has: function has(target, propertyKey) {    return propertyKey in target;  }});},{"33":33}],219:[function(_dereq_,module,exports){// 26.1.10 Reflect.isExtensible(target)var $export = _dereq_(33);var anObject = _dereq_(7);var $isExtensible = Object.isExtensible;$export($export.S, 'Reflect', {  isExtensible: function isExtensible(target) {    anObject(target);    return $isExtensible ? $isExtensible(target) : true;  }});},{"33":33,"7":7}],220:[function(_dereq_,module,exports){// 26.1.11 Reflect.ownKeys(target)var $export = _dereq_(33);$export($export.S, 'Reflect', { ownKeys: _dereq_(85) });},{"33":33,"85":85}],221:[function(_dereq_,module,exports){// 26.1.12 Reflect.preventExtensions(target)var $export = _dereq_(33);var anObject = _dereq_(7);var $preventExtensions = Object.preventExtensions;$export($export.S, 'Reflect', {  preventExtensions: function preventExtensions(target) {    anObject(target);    try {      if ($preventExtensions) $preventExtensions(target);      return true;    } catch (e) {      return false;    }  }});},{"33":33,"7":7}],222:[function(_dereq_,module,exports){// 26.1.14 Reflect.setPrototypeOf(target, proto)var $export = _dereq_(33);var setProto = _dereq_(99);if (setProto) $export($export.S, 'Reflect', {  setPrototypeOf: function setPrototypeOf(target, proto) {    setProto.check(target, proto);    try {      setProto.set(target, proto);      return true;    } catch (e) {      return false;    }  }});},{"33":33,"99":99}],223:[function(_dereq_,module,exports){// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])var dP = _dereq_(72);var gOPD = _dereq_(75);var getPrototypeOf = _dereq_(79);var has = _dereq_(41);var $export = _dereq_(33);var createDesc = _dereq_(92);var anObject = _dereq_(7);var isObject = _dereq_(51);function set(target, propertyKey, V /* , receiver */) {  var receiver = arguments.length < 4 ? target : arguments[3];  var ownDesc = gOPD.f(anObject(target), propertyKey);  var existingDescriptor, proto;  if (!ownDesc) {    if (isObject(proto = getPrototypeOf(target))) {      return set(proto, propertyKey, V, receiver);    }    ownDesc = createDesc(0);  }  if (has(ownDesc, 'value')) {    if (ownDesc.writable === false || !isObject(receiver)) return false;    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);    existingDescriptor.value = V;    dP.f(receiver, propertyKey, existingDescriptor);    return true;  }  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);}$export($export.S, 'Reflect', { set: set });},{"33":33,"41":41,"51":51,"7":7,"72":72,"75":75,"79":79,"92":92}],224:[function(_dereq_,module,exports){var global = _dereq_(40);var inheritIfRequired = _dereq_(45);var dP = _dereq_(72).f;var gOPN = _dereq_(77).f;var isRegExp = _dereq_(52);var $flags = _dereq_(37);var $RegExp = global.RegExp;var Base = $RegExp;var proto = $RegExp.prototype;var re1 = /a/g;var re2 = /a/g;// "new" creates a new object, old webkit buggy herevar CORRECT_NEW = new $RegExp(re1) !== re1;if (_dereq_(29) && (!CORRECT_NEW || _dereq_(35)(function () {  re2[_dereq_(128)('match')] = false;  // RegExp constructor can alter flags and IsRegExp works correct with @@match  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';}))) {  $RegExp = function RegExp(p, f) {    var tiRE = this instanceof $RegExp;    var piRE = isRegExp(p);    var fiU = f === undefined;    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p      : inheritIfRequired(CORRECT_NEW        ? new Base(piRE && !fiU ? p.source : p, f)        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)      , tiRE ? this : proto, $RegExp);  };  var proxy = function (key) {    key in $RegExp || dP($RegExp, key, {      configurable: true,      get: function () { return Base[key]; },      set: function (it) { Base[key] = it; }    });  };  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);  proto.constructor = $RegExp;  $RegExp.prototype = proto;  _dereq_(94)(global, 'RegExp', $RegExp);}_dereq_(100)('RegExp');},{"100":100,"128":128,"29":29,"35":35,"37":37,"40":40,"45":45,"52":52,"72":72,"77":77,"94":94}],225:[function(_dereq_,module,exports){// 21.2.5.3 get RegExp.prototype.flags()if (_dereq_(29) && /./g.flags != 'g') _dereq_(72).f(RegExp.prototype, 'flags', {  configurable: true,  get: _dereq_(37)});},{"29":29,"37":37,"72":72}],226:[function(_dereq_,module,exports){// @@match logic_dereq_(36)('match', 1, function (defined, MATCH, $match) {  // 21.1.3.11 String.prototype.match(regexp)  return [function match(regexp) {    'use strict';    var O = defined(this);    var fn = regexp == undefined ? undefined : regexp[MATCH];    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));  }, $match];});},{"36":36}],227:[function(_dereq_,module,exports){// @@replace logic_dereq_(36)('replace', 2, function (defined, REPLACE, $replace) {  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)  return [function replace(searchValue, replaceValue) {    'use strict';    var O = defined(this);    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];    return fn !== undefined      ? fn.call(searchValue, O, replaceValue)      : $replace.call(String(O), searchValue, replaceValue);  }, $replace];});},{"36":36}],228:[function(_dereq_,module,exports){// @@search logic_dereq_(36)('search', 1, function (defined, SEARCH, $search) {  // 21.1.3.15 String.prototype.search(regexp)  return [function search(regexp) {    'use strict';    var O = defined(this);    var fn = regexp == undefined ? undefined : regexp[SEARCH];    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));  }, $search];});},{"36":36}],229:[function(_dereq_,module,exports){// @@split logic_dereq_(36)('split', 2, function (defined, SPLIT, $split) {  'use strict';  var isRegExp = _dereq_(52);  var _split = $split;  var $push = [].push;  var $SPLIT = 'split';  var LENGTH = 'length';  var LAST_INDEX = 'lastIndex';  if (    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||    ''[$SPLIT](/.?/)[LENGTH]  ) {    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group    // based on es5-shim implementation, need to rework it    $split = function (separator, limit) {      var string = String(this);      if (separator === undefined && limit === 0) return [];      // If `separator` is not a regex, use native split      if (!isRegExp(separator)) return _split.call(string, separator, limit);      var output = [];      var flags = (separator.ignoreCase ? 'i' : '') +                  (separator.multiline ? 'm' : '') +                  (separator.unicode ? 'u' : '') +                  (separator.sticky ? 'y' : '');      var lastLastIndex = 0;      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;      // Make `global` and avoid `lastIndex` issues by working with a copy      var separatorCopy = new RegExp(separator.source, flags + 'g');      var separator2, match, lastIndex, lastLength, i;      // Doesn't need flags gy, but they don't hurt      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);      while (match = separatorCopy.exec(string)) {        // `separatorCopy.lastIndex` is not reliable cross-browser        lastIndex = match.index + match[0][LENGTH];        if (lastIndex > lastLastIndex) {          output.push(string.slice(lastLastIndex, match.index));          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG          // eslint-disable-next-line no-loop-func          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;          });          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));          lastLength = match[0][LENGTH];          lastLastIndex = lastIndex;          if (output[LENGTH] >= splitLimit) break;        }        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop      }      if (lastLastIndex === string[LENGTH]) {        if (lastLength || !separatorCopy.test('')) output.push('');      } else output.push(string.slice(lastLastIndex));      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;    };  // Chakra, V8  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {    $split = function (separator, limit) {      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);    };  }  // 21.1.3.17 String.prototype.split(separator, limit)  return [function split(separator, limit) {    var O = defined(this);    var fn = separator == undefined ? undefined : separator[SPLIT];    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);  }, $split];});},{"36":36,"52":52}],230:[function(_dereq_,module,exports){'use strict';_dereq_(225);var anObject = _dereq_(7);var $flags = _dereq_(37);var DESCRIPTORS = _dereq_(29);var TO_STRING = 'toString';var $toString = /./[TO_STRING];var define = function (fn) {  _dereq_(94)(RegExp.prototype, TO_STRING, fn, true);};// 21.2.5.14 RegExp.prototype.toString()if (_dereq_(35)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {  define(function toString() {    var R = anObject(this);    return '/'.concat(R.source, '/',      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);  });// FF44- RegExp#toString has a wrong name} else if ($toString.name != TO_STRING) {  define(function toString() {    return $toString.call(this);  });}},{"225":225,"29":29,"35":35,"37":37,"7":7,"94":94}],231:[function(_dereq_,module,exports){'use strict';var strong = _dereq_(19);var validate = _dereq_(125);var SET = 'Set';// 23.2 Set Objectsmodule.exports = _dereq_(22)(SET, function (get) {  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };}, {  // 23.2.3.1 Set.prototype.add(value)  add: function add(value) {    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);  }}, strong);},{"125":125,"19":19,"22":22}],232:[function(_dereq_,module,exports){'use strict';// B.2.3.2 String.prototype.anchor(name)_dereq_(108)('anchor', function (createHTML) {  return function anchor(name) {    return createHTML(this, 'a', 'name', name);  };});},{"108":108}],233:[function(_dereq_,module,exports){'use strict';// B.2.3.3 String.prototype.big()_dereq_(108)('big', function (createHTML) {  return function big() {    return createHTML(this, 'big', '', '');  };});},{"108":108}],234:[function(_dereq_,module,exports){'use strict';// B.2.3.4 String.prototype.blink()_dereq_(108)('blink', function (createHTML) {  return function blink() {    return createHTML(this, 'blink', '', '');  };});},{"108":108}],235:[function(_dereq_,module,exports){'use strict';// B.2.3.5 String.prototype.bold()_dereq_(108)('bold', function (createHTML) {  return function bold() {    return createHTML(this, 'b', '', '');  };});},{"108":108}],236:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $at = _dereq_(106)(false);$export($export.P, 'String', {  // 21.1.3.3 String.prototype.codePointAt(pos)  codePointAt: function codePointAt(pos) {    return $at(this, pos);  }});},{"106":106,"33":33}],237:[function(_dereq_,module,exports){// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])'use strict';var $export = _dereq_(33);var toLength = _dereq_(118);var context = _dereq_(107);var ENDS_WITH = 'endsWith';var $endsWith = ''[ENDS_WITH];$export($export.P + $export.F * _dereq_(34)(ENDS_WITH), 'String', {  endsWith: function endsWith(searchString /* , endPosition = @length */) {    var that = context(this, searchString, ENDS_WITH);    var endPosition = arguments.length > 1 ? arguments[1] : undefined;    var len = toLength(that.length);    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);    var search = String(searchString);    return $endsWith      ? $endsWith.call(that, search, end)      : that.slice(end - search.length, end) === search;  }});},{"107":107,"118":118,"33":33,"34":34}],238:[function(_dereq_,module,exports){'use strict';// B.2.3.6 String.prototype.fixed()_dereq_(108)('fixed', function (createHTML) {  return function fixed() {    return createHTML(this, 'tt', '', '');  };});},{"108":108}],239:[function(_dereq_,module,exports){'use strict';// B.2.3.7 String.prototype.fontcolor(color)_dereq_(108)('fontcolor', function (createHTML) {  return function fontcolor(color) {    return createHTML(this, 'font', 'color', color);  };});},{"108":108}],240:[function(_dereq_,module,exports){'use strict';// B.2.3.8 String.prototype.fontsize(size)_dereq_(108)('fontsize', function (createHTML) {  return function fontsize(size) {    return createHTML(this, 'font', 'size', size);  };});},{"108":108}],241:[function(_dereq_,module,exports){var $export = _dereq_(33);var toAbsoluteIndex = _dereq_(114);var fromCharCode = String.fromCharCode;var $fromCodePoint = String.fromCodePoint;// length should be 1, old FF problem$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {  // 21.1.2.2 String.fromCodePoint(...codePoints)  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars    var res = [];    var aLen = arguments.length;    var i = 0;    var code;    while (aLen > i) {      code = +arguments[i++];      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');      res.push(code < 0x10000        ? fromCharCode(code)        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)      );    } return res.join('');  }});},{"114":114,"33":33}],242:[function(_dereq_,module,exports){// 21.1.3.7 String.prototype.includes(searchString, position = 0)'use strict';var $export = _dereq_(33);var context = _dereq_(107);var INCLUDES = 'includes';$export($export.P + $export.F * _dereq_(34)(INCLUDES), 'String', {  includes: function includes(searchString /* , position = 0 */) {    return !!~context(this, searchString, INCLUDES)      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);  }});},{"107":107,"33":33,"34":34}],243:[function(_dereq_,module,exports){'use strict';// B.2.3.9 String.prototype.italics()_dereq_(108)('italics', function (createHTML) {  return function italics() {    return createHTML(this, 'i', '', '');  };});},{"108":108}],244:[function(_dereq_,module,exports){'use strict';var $at = _dereq_(106)(true);// 21.1.3.27 String.prototype[@@iterator]()_dereq_(55)(String, 'String', function (iterated) {  this._t = String(iterated); // target  this._i = 0;                // next index// 21.1.5.2.1 %StringIteratorPrototype%.next()}, function () {  var O = this._t;  var index = this._i;  var point;  if (index >= O.length) return { value: undefined, done: true };  point = $at(O, index);  this._i += point.length;  return { value: point, done: false };});},{"106":106,"55":55}],245:[function(_dereq_,module,exports){'use strict';// B.2.3.10 String.prototype.link(url)_dereq_(108)('link', function (createHTML) {  return function link(url) {    return createHTML(this, 'a', 'href', url);  };});},{"108":108}],246:[function(_dereq_,module,exports){var $export = _dereq_(33);var toIObject = _dereq_(117);var toLength = _dereq_(118);$export($export.S, 'String', {  // 21.1.2.4 String.raw(callSite, ...substitutions)  raw: function raw(callSite) {    var tpl = toIObject(callSite.raw);    var len = toLength(tpl.length);    var aLen = arguments.length;    var res = [];    var i = 0;    while (len > i) {      res.push(String(tpl[i++]));      if (i < aLen) res.push(String(arguments[i]));    } return res.join('');  }});},{"117":117,"118":118,"33":33}],247:[function(_dereq_,module,exports){var $export = _dereq_(33);$export($export.P, 'String', {  // 21.1.3.13 String.prototype.repeat(count)  repeat: _dereq_(110)});},{"110":110,"33":33}],248:[function(_dereq_,module,exports){'use strict';// B.2.3.11 String.prototype.small()_dereq_(108)('small', function (createHTML) {  return function small() {    return createHTML(this, 'small', '', '');  };});},{"108":108}],249:[function(_dereq_,module,exports){// 21.1.3.18 String.prototype.startsWith(searchString [, position ])'use strict';var $export = _dereq_(33);var toLength = _dereq_(118);var context = _dereq_(107);var STARTS_WITH = 'startsWith';var $startsWith = ''[STARTS_WITH];$export($export.P + $export.F * _dereq_(34)(STARTS_WITH), 'String', {  startsWith: function startsWith(searchString /* , position = 0 */) {    var that = context(this, searchString, STARTS_WITH);    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));    var search = String(searchString);    return $startsWith      ? $startsWith.call(that, search, index)      : that.slice(index, index + search.length) === search;  }});},{"107":107,"118":118,"33":33,"34":34}],250:[function(_dereq_,module,exports){'use strict';// B.2.3.12 String.prototype.strike()_dereq_(108)('strike', function (createHTML) {  return function strike() {    return createHTML(this, 'strike', '', '');  };});},{"108":108}],251:[function(_dereq_,module,exports){'use strict';// B.2.3.13 String.prototype.sub()_dereq_(108)('sub', function (createHTML) {  return function sub() {    return createHTML(this, 'sub', '', '');  };});},{"108":108}],252:[function(_dereq_,module,exports){'use strict';// B.2.3.14 String.prototype.sup()_dereq_(108)('sup', function (createHTML) {  return function sup() {    return createHTML(this, 'sup', '', '');  };});},{"108":108}],253:[function(_dereq_,module,exports){'use strict';// 21.1.3.25 String.prototype.trim()_dereq_(111)('trim', function ($trim) {  return function trim() {    return $trim(this, 3);  };});},{"111":111}],254:[function(_dereq_,module,exports){'use strict';// ECMAScript 6 symbols shimvar global = _dereq_(40);var has = _dereq_(41);var DESCRIPTORS = _dereq_(29);var $export = _dereq_(33);var redefine = _dereq_(94);var META = _dereq_(66).KEY;var $fails = _dereq_(35);var shared = _dereq_(103);var setToStringTag = _dereq_(101);var uid = _dereq_(124);var wks = _dereq_(128);var wksExt = _dereq_(127);var wksDefine = _dereq_(126);var keyOf = _dereq_(59);var enumKeys = _dereq_(32);var isArray = _dereq_(49);var anObject = _dereq_(7);var toIObject = _dereq_(117);var toPrimitive = _dereq_(120);var createDesc = _dereq_(92);var _create = _dereq_(71);var gOPNExt = _dereq_(76);var $GOPD = _dereq_(75);var $DP = _dereq_(72);var $keys = _dereq_(81);var gOPD = $GOPD.f;var dP = $DP.f;var gOPN = gOPNExt.f;var $Symbol = global.Symbol;var $JSON = global.JSON;var _stringify = $JSON && $JSON.stringify;var PROTOTYPE = 'prototype';var HIDDEN = wks('_hidden');var TO_PRIMITIVE = wks('toPrimitive');var isEnum = {}.propertyIsEnumerable;var SymbolRegistry = shared('symbol-registry');var AllSymbols = shared('symbols');var OPSymbols = shared('op-symbols');var ObjectProto = Object[PROTOTYPE];var USE_NATIVE = typeof $Symbol == 'function';var QObject = global.QObject;// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687var setSymbolDesc = DESCRIPTORS && $fails(function () {  return _create(dP({}, 'a', {    get: function () { return dP(this, 'a', { value: 7 }).a; }  })).a != 7;}) ? function (it, key, D) {  var protoDesc = gOPD(ObjectProto, key);  if (protoDesc) delete ObjectProto[key];  dP(it, key, D);  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);} : dP;var wrap = function (tag) {  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);  sym._k = tag;  return sym;};var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {  return typeof it == 'symbol';} : function (it) {  return it instanceof $Symbol;};var $defineProperty = function defineProperty(it, key, D) {  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);  anObject(it);  key = toPrimitive(key, true);  anObject(D);  if (has(AllSymbols, key)) {    if (!D.enumerable) {      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));      it[HIDDEN][key] = true;    } else {      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;      D = _create(D, { enumerable: createDesc(0, false) });    } return setSymbolDesc(it, key, D);  } return dP(it, key, D);};var $defineProperties = function defineProperties(it, P) {  anObject(it);  var keys = enumKeys(P = toIObject(P));  var i = 0;  var l = keys.length;  var key;  while (l > i) $defineProperty(it, key = keys[i++], P[key]);  return it;};var $create = function create(it, P) {  return P === undefined ? _create(it) : $defineProperties(_create(it), P);};var $propertyIsEnumerable = function propertyIsEnumerable(key) {  var E = isEnum.call(this, key = toPrimitive(key, true));  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;};var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {  it = toIObject(it);  key = toPrimitive(key, true);  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;  var D = gOPD(it, key);  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;  return D;};var $getOwnPropertyNames = function getOwnPropertyNames(it) {  var names = gOPN(toIObject(it));  var result = [];  var i = 0;  var key;  while (names.length > i) {    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);  } return result;};var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {  var IS_OP = it === ObjectProto;  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));  var result = [];  var i = 0;  var key;  while (names.length > i) {    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);  } return result;};// 19.4.1.1 Symbol([description])if (!USE_NATIVE) {  $Symbol = function Symbol() {    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);    var $set = function (value) {      if (this === ObjectProto) $set.call(OPSymbols, value);      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;      setSymbolDesc(this, tag, createDesc(1, value));    };    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });    return wrap(tag);  };  redefine($Symbol[PROTOTYPE], 'toString', function toString() {    return this._k;  });  $GOPD.f = $getOwnPropertyDescriptor;  $DP.f = $defineProperty;  _dereq_(77).f = gOPNExt.f = $getOwnPropertyNames;  _dereq_(82).f = $propertyIsEnumerable;  _dereq_(78).f = $getOwnPropertySymbols;  if (DESCRIPTORS && !_dereq_(60)) {    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);  }  wksExt.f = function (name) {    return wrap(wks(name));  };}$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });for (var es6Symbols = (  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {  // 19.4.2.1 Symbol.for(key)  'for': function (key) {    return has(SymbolRegistry, key += '')      ? SymbolRegistry[key]      : SymbolRegistry[key] = $Symbol(key);  },  // 19.4.2.5 Symbol.keyFor(sym)  keyFor: function keyFor(key) {    if (isSymbol(key)) return keyOf(SymbolRegistry, key);    throw TypeError(key + ' is not a symbol!');  },  useSetter: function () { setter = true; },  useSimple: function () { setter = false; }});$export($export.S + $export.F * !USE_NATIVE, 'Object', {  // 19.1.2.2 Object.create(O [, Properties])  create: $create,  // 19.1.2.4 Object.defineProperty(O, P, Attributes)  defineProperty: $defineProperty,  // 19.1.2.3 Object.defineProperties(O, Properties)  defineProperties: $defineProperties,  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,  // 19.1.2.7 Object.getOwnPropertyNames(O)  getOwnPropertyNames: $getOwnPropertyNames,  // 19.1.2.8 Object.getOwnPropertySymbols(O)  getOwnPropertySymbols: $getOwnPropertySymbols});// 24.3.2 JSON.stringify(value [, replacer [, space]])$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {  var S = $Symbol();  // MS Edge converts symbol values to JSON as {}  // WebKit converts symbol values to JSON as null  // V8 throws on boxed symbols  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';})), 'JSON', {  stringify: function stringify(it) {    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined    var args = [it];    var i = 1;    var replacer, $replacer;    while (arguments.length > i) args.push(arguments[i++]);    replacer = args[1];    if (typeof replacer == 'function') $replacer = replacer;    if ($replacer || !isArray(replacer)) replacer = function (key, value) {      if ($replacer) value = $replacer.call(this, key, value);      if (!isSymbol(value)) return value;    };    args[1] = replacer;    return _stringify.apply($JSON, args);  }});// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)$Symbol[PROTOTYPE][TO_PRIMITIVE] || _dereq_(42)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);// 19.4.3.5 Symbol.prototype[@@toStringTag]setToStringTag($Symbol, 'Symbol');// 20.2.1.9 Math[@@toStringTag]setToStringTag(Math, 'Math', true);// 24.3.3 JSON[@@toStringTag]setToStringTag(global.JSON, 'JSON', true);},{"101":101,"103":103,"117":117,"120":120,"124":124,"126":126,"127":127,"128":128,"29":29,"32":32,"33":33,"35":35,"40":40,"41":41,"42":42,"49":49,"59":59,"60":60,"66":66,"7":7,"71":71,"72":72,"75":75,"76":76,"77":77,"78":78,"81":81,"82":82,"92":92,"94":94}],255:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var $typed = _dereq_(123);var buffer = _dereq_(122);var anObject = _dereq_(7);var toAbsoluteIndex = _dereq_(114);var toLength = _dereq_(118);var isObject = _dereq_(51);var ArrayBuffer = _dereq_(40).ArrayBuffer;var speciesConstructor = _dereq_(104);var $ArrayBuffer = buffer.ArrayBuffer;var $DataView = buffer.DataView;var $isView = $typed.ABV && ArrayBuffer.isView;var $slice = $ArrayBuffer.prototype.slice;var VIEW = $typed.VIEW;var ARRAY_BUFFER = 'ArrayBuffer';$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {  // 24.1.3.1 ArrayBuffer.isView(arg)  isView: function isView(it) {    return $isView && $isView(it) || isObject(it) && VIEW in it;  }});$export($export.P + $export.U + $export.F * _dereq_(35)(function () {  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;}), ARRAY_BUFFER, {  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)  slice: function slice(start, end) {    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix    var len = anObject(this).byteLength;    var first = toAbsoluteIndex(start, len);    var final = toAbsoluteIndex(end === undefined ? len : end, len);    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));    var viewS = new $DataView(this);    var viewT = new $DataView(result);    var index = 0;    while (first < final) {      viewT.setUint8(index++, viewS.getUint8(first++));    } return result;  }});_dereq_(100)(ARRAY_BUFFER);},{"100":100,"104":104,"114":114,"118":118,"122":122,"123":123,"33":33,"35":35,"40":40,"51":51,"7":7}],256:[function(_dereq_,module,exports){var $export = _dereq_(33);$export($export.G + $export.W + $export.F * !_dereq_(123).ABV, {  DataView: _dereq_(122).DataView});},{"122":122,"123":123,"33":33}],257:[function(_dereq_,module,exports){_dereq_(121)('Float32', 4, function (init) {  return function Float32Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],258:[function(_dereq_,module,exports){_dereq_(121)('Float64', 8, function (init) {  return function Float64Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],259:[function(_dereq_,module,exports){_dereq_(121)('Int16', 2, function (init) {  return function Int16Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],260:[function(_dereq_,module,exports){_dereq_(121)('Int32', 4, function (init) {  return function Int32Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],261:[function(_dereq_,module,exports){_dereq_(121)('Int8', 1, function (init) {  return function Int8Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],262:[function(_dereq_,module,exports){_dereq_(121)('Uint16', 2, function (init) {  return function Uint16Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],263:[function(_dereq_,module,exports){_dereq_(121)('Uint32', 4, function (init) {  return function Uint32Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],264:[function(_dereq_,module,exports){_dereq_(121)('Uint8', 1, function (init) {  return function Uint8Array(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };});},{"121":121}],265:[function(_dereq_,module,exports){_dereq_(121)('Uint8', 1, function (init) {  return function Uint8ClampedArray(data, byteOffset, length) {    return init(this, data, byteOffset, length);  };}, true);},{"121":121}],266:[function(_dereq_,module,exports){'use strict';var each = _dereq_(12)(0);var redefine = _dereq_(94);var meta = _dereq_(66);var assign = _dereq_(70);var weak = _dereq_(21);var isObject = _dereq_(51);var fails = _dereq_(35);var validate = _dereq_(125);var WEAK_MAP = 'WeakMap';var getWeak = meta.getWeak;var isExtensible = Object.isExtensible;var uncaughtFrozenStore = weak.ufstore;var tmp = {};var InternalMap;var wrapper = function (get) {  return function WeakMap() {    return get(this, arguments.length > 0 ? arguments[0] : undefined);  };};var methods = {  // 23.3.3.3 WeakMap.prototype.get(key)  get: function get(key) {    if (isObject(key)) {      var data = getWeak(key);      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);      return data ? data[this._i] : undefined;    }  },  // 23.3.3.5 WeakMap.prototype.set(key, value)  set: function set(key, value) {    return weak.def(validate(this, WEAK_MAP), key, value);  }};// 23.3 WeakMap Objectsvar $WeakMap = module.exports = _dereq_(22)(WEAK_MAP, wrapper, methods, weak, true, true);// IE11 WeakMap frozen keys fixif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);  assign(InternalMap.prototype, methods);  meta.NEED = true;  each(['delete', 'has', 'get', 'set'], function (key) {    var proto = $WeakMap.prototype;    var method = proto[key];    redefine(proto, key, function (a, b) {      // store frozen objects on internal weakmap shim      if (isObject(a) && !isExtensible(a)) {        if (!this._f) this._f = new InternalMap();        var result = this._f[key](a, b);        return key == 'set' ? this : result;      // store all the rest on native weakmap      } return method.call(this, a, b);    });  });}},{"12":12,"125":125,"21":21,"22":22,"35":35,"51":51,"66":66,"70":70,"94":94}],267:[function(_dereq_,module,exports){'use strict';var weak = _dereq_(21);var validate = _dereq_(125);var WEAK_SET = 'WeakSet';// 23.4 WeakSet Objects_dereq_(22)(WEAK_SET, function (get) {  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };}, {  // 23.4.3.1 WeakSet.prototype.add(value)  add: function add(value) {    return weak.def(validate(this, WEAK_SET), value, true);  }}, weak, false, true);},{"125":125,"21":21,"22":22}],268:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMapvar $export = _dereq_(33);var flattenIntoArray = _dereq_(38);var toObject = _dereq_(119);var toLength = _dereq_(118);var aFunction = _dereq_(3);var arraySpeciesCreate = _dereq_(15);$export($export.P, 'Array', {  flatMap: function flatMap(callbackfn /* , thisArg */) {    var O = toObject(this);    var sourceLen, A;    aFunction(callbackfn);    sourceLen = toLength(O.length);    A = arraySpeciesCreate(O, 0);    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);    return A;  }});_dereq_(5)('flatMap');},{"118":118,"119":119,"15":15,"3":3,"33":33,"38":38,"5":5}],269:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flattenvar $export = _dereq_(33);var flattenIntoArray = _dereq_(38);var toObject = _dereq_(119);var toLength = _dereq_(118);var toInteger = _dereq_(116);var arraySpeciesCreate = _dereq_(15);$export($export.P, 'Array', {  flatten: function flatten(/* depthArg = 1 */) {    var depthArg = arguments[0];    var O = toObject(this);    var sourceLen = toLength(O.length);    var A = arraySpeciesCreate(O, 0);    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));    return A;  }});_dereq_(5)('flatten');},{"116":116,"118":118,"119":119,"15":15,"33":33,"38":38,"5":5}],270:[function(_dereq_,module,exports){'use strict';// https://github.com/tc39/Array.prototype.includesvar $export = _dereq_(33);var $includes = _dereq_(11)(true);$export($export.P, 'Array', {  includes: function includes(el /* , fromIndex = 0 */) {    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);  }});_dereq_(5)('includes');},{"11":11,"33":33,"5":5}],271:[function(_dereq_,module,exports){// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtaskvar $export = _dereq_(33);var microtask = _dereq_(68)();var process = _dereq_(40).process;var isNode = _dereq_(18)(process) == 'process';$export($export.G, {  asap: function asap(fn) {    var domain = isNode && process.domain;    microtask(domain ? domain.bind(fn) : fn);  }});},{"18":18,"33":33,"40":40,"68":68}],272:[function(_dereq_,module,exports){// https://github.com/ljharb/proposal-is-errorvar $export = _dereq_(33);var cof = _dereq_(18);$export($export.S, 'Error', {  isError: function isError(it) {    return cof(it) === 'Error';  }});},{"18":18,"33":33}],273:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-globalvar $export = _dereq_(33);$export($export.G, { global: _dereq_(40) });},{"33":33,"40":40}],274:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from_dereq_(97)('Map');},{"97":97}],275:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of_dereq_(98)('Map');},{"98":98}],276:[function(_dereq_,module,exports){// https://github.com/DavidBruant/Map-Set.prototype.toJSONvar $export = _dereq_(33);$export($export.P + $export.R, 'Map', { toJSON: _dereq_(20)('Map') });},{"20":20,"33":33}],277:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);$export($export.S, 'Math', {  clamp: function clamp(x, lower, upper) {    return Math.min(upper, Math.max(lower, x));  }});},{"33":33}],278:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });},{"33":33}],279:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);var RAD_PER_DEG = 180 / Math.PI;$export($export.S, 'Math', {  degrees: function degrees(radians) {    return radians * RAD_PER_DEG;  }});},{"33":33}],280:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);var scale = _dereq_(64);var fround = _dereq_(62);$export($export.S, 'Math', {  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {    return fround(scale(x, inLow, inHigh, outLow, outHigh));  }});},{"33":33,"62":62,"64":64}],281:[function(_dereq_,module,exports){// https://gist.github.com/BrendanEich/4294d5c212a6d2254703var $export = _dereq_(33);$export($export.S, 'Math', {  iaddh: function iaddh(x0, x1, y0, y1) {    var $x0 = x0 >>> 0;    var $x1 = x1 >>> 0;    var $y0 = y0 >>> 0;    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;  }});},{"33":33}],282:[function(_dereq_,module,exports){// https://gist.github.com/BrendanEich/4294d5c212a6d2254703var $export = _dereq_(33);$export($export.S, 'Math', {  imulh: function imulh(u, v) {    var UINT16 = 0xffff;    var $u = +u;    var $v = +v;    var u0 = $u & UINT16;    var v0 = $v & UINT16;    var u1 = $u >> 16;    var v1 = $v >> 16;    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);  }});},{"33":33}],283:[function(_dereq_,module,exports){// https://gist.github.com/BrendanEich/4294d5c212a6d2254703var $export = _dereq_(33);$export($export.S, 'Math', {  isubh: function isubh(x0, x1, y0, y1) {    var $x0 = x0 >>> 0;    var $x1 = x1 >>> 0;    var $y0 = y0 >>> 0;    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;  }});},{"33":33}],284:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });},{"33":33}],285:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);var DEG_PER_RAD = Math.PI / 180;$export($export.S, 'Math', {  radians: function radians(degrees) {    return degrees * DEG_PER_RAD;  }});},{"33":33}],286:[function(_dereq_,module,exports){// https://rwaldron.github.io/proposal-math-extensions/var $export = _dereq_(33);$export($export.S, 'Math', { scale: _dereq_(64) });},{"33":33,"64":64}],287:[function(_dereq_,module,exports){// http://jfbastien.github.io/papers/Math.signbit.htmlvar $export = _dereq_(33);$export($export.S, 'Math', { signbit: function signbit(x) {  // eslint-disable-next-line no-self-compare  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;} });},{"33":33}],288:[function(_dereq_,module,exports){// https://gist.github.com/BrendanEich/4294d5c212a6d2254703var $export = _dereq_(33);$export($export.S, 'Math', {  umulh: function umulh(u, v) {    var UINT16 = 0xffff;    var $u = +u;    var $v = +v;    var u0 = $u & UINT16;    var v0 = $v & UINT16;    var u1 = $u >>> 16;    var v1 = $v >>> 16;    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);  }});},{"33":33}],289:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toObject = _dereq_(119);var aFunction = _dereq_(3);var $defineProperty = _dereq_(72);// B.2.2.2 Object.prototype.__defineGetter__(P, getter)_dereq_(29) && $export($export.P + _dereq_(74), 'Object', {  __defineGetter__: function __defineGetter__(P, getter) {    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });  }});},{"119":119,"29":29,"3":3,"33":33,"72":72,"74":74}],290:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toObject = _dereq_(119);var aFunction = _dereq_(3);var $defineProperty = _dereq_(72);// B.2.2.3 Object.prototype.__defineSetter__(P, setter)_dereq_(29) && $export($export.P + _dereq_(74), 'Object', {  __defineSetter__: function __defineSetter__(P, setter) {    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });  }});},{"119":119,"29":29,"3":3,"33":33,"72":72,"74":74}],291:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-object-values-entriesvar $export = _dereq_(33);var $entries = _dereq_(84)(true);$export($export.S, 'Object', {  entries: function entries(it) {    return $entries(it);  }});},{"33":33,"84":84}],292:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-object-getownpropertydescriptorsvar $export = _dereq_(33);var ownKeys = _dereq_(85);var toIObject = _dereq_(117);var gOPD = _dereq_(75);var createProperty = _dereq_(24);$export($export.S, 'Object', {  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {    var O = toIObject(object);    var getDesc = gOPD.f;    var keys = ownKeys(O);    var result = {};    var i = 0;    var key, desc;    while (keys.length > i) {      desc = getDesc(O, key = keys[i++]);      if (desc !== undefined) createProperty(result, key, desc);    }    return result;  }});},{"117":117,"24":24,"33":33,"75":75,"85":85}],293:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toObject = _dereq_(119);var toPrimitive = _dereq_(120);var getPrototypeOf = _dereq_(79);var getOwnPropertyDescriptor = _dereq_(75).f;// B.2.2.4 Object.prototype.__lookupGetter__(P)_dereq_(29) && $export($export.P + _dereq_(74), 'Object', {  __lookupGetter__: function __lookupGetter__(P) {    var O = toObject(this);    var K = toPrimitive(P, true);    var D;    do {      if (D = getOwnPropertyDescriptor(O, K)) return D.get;    } while (O = getPrototypeOf(O));  }});},{"119":119,"120":120,"29":29,"33":33,"74":74,"75":75,"79":79}],294:[function(_dereq_,module,exports){'use strict';var $export = _dereq_(33);var toObject = _dereq_(119);var toPrimitive = _dereq_(120);var getPrototypeOf = _dereq_(79);var getOwnPropertyDescriptor = _dereq_(75).f;// B.2.2.5 Object.prototype.__lookupSetter__(P)_dereq_(29) && $export($export.P + _dereq_(74), 'Object', {  __lookupSetter__: function __lookupSetter__(P) {    var O = toObject(this);    var K = toPrimitive(P, true);    var D;    do {      if (D = getOwnPropertyDescriptor(O, K)) return D.set;    } while (O = getPrototypeOf(O));  }});},{"119":119,"120":120,"29":29,"33":33,"74":74,"75":75,"79":79}],295:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-object-values-entriesvar $export = _dereq_(33);var $values = _dereq_(84)(false);$export($export.S, 'Object', {  values: function values(it) {    return $values(it);  }});},{"33":33,"84":84}],296:[function(_dereq_,module,exports){'use strict';// https://github.com/zenparsing/es-observablevar $export = _dereq_(33);var global = _dereq_(40);var core = _dereq_(23);var microtask = _dereq_(68)();var OBSERVABLE = _dereq_(128)('observable');var aFunction = _dereq_(3);var anObject = _dereq_(7);var anInstance = _dereq_(6);var redefineAll = _dereq_(93);var hide = _dereq_(42);var forOf = _dereq_(39);var RETURN = forOf.RETURN;var getMethod = function (fn) {  return fn == null ? undefined : aFunction(fn);};var cleanupSubscription = function (subscription) {  var cleanup = subscription._c;  if (cleanup) {    subscription._c = undefined;    cleanup();  }};var subscriptionClosed = function (subscription) {  return subscription._o === undefined;};var closeSubscription = function (subscription) {  if (!subscriptionClosed(subscription)) {    subscription._o = undefined;    cleanupSubscription(subscription);  }};var Subscription = function (observer, subscriber) {  anObject(observer);  this._c = undefined;  this._o = observer;  observer = new SubscriptionObserver(this);  try {    var cleanup = subscriber(observer);    var subscription = cleanup;    if (cleanup != null) {      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };      else aFunction(cleanup);      this._c = cleanup;    }  } catch (e) {    observer.error(e);    return;  } if (subscriptionClosed(this)) cleanupSubscription(this);};Subscription.prototype = redefineAll({}, {  unsubscribe: function unsubscribe() { closeSubscription(this); }});var SubscriptionObserver = function (subscription) {  this._s = subscription;};SubscriptionObserver.prototype = redefineAll({}, {  next: function next(value) {    var subscription = this._s;    if (!subscriptionClosed(subscription)) {      var observer = subscription._o;      try {        var m = getMethod(observer.next);        if (m) return m.call(observer, value);      } catch (e) {        try {          closeSubscription(subscription);        } finally {          throw e;        }      }    }  },  error: function error(value) {    var subscription = this._s;    if (subscriptionClosed(subscription)) throw value;    var observer = subscription._o;    subscription._o = undefined;    try {      var m = getMethod(observer.error);      if (!m) throw value;      value = m.call(observer, value);    } catch (e) {      try {        cleanupSubscription(subscription);      } finally {        throw e;      }    } cleanupSubscription(subscription);    return value;  },  complete: function complete(value) {    var subscription = this._s;    if (!subscriptionClosed(subscription)) {      var observer = subscription._o;      subscription._o = undefined;      try {        var m = getMethod(observer.complete);        value = m ? m.call(observer, value) : undefined;      } catch (e) {        try {          cleanupSubscription(subscription);        } finally {          throw e;        }      } cleanupSubscription(subscription);      return value;    }  }});var $Observable = function Observable(subscriber) {  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);};redefineAll($Observable.prototype, {  subscribe: function subscribe(observer) {    return new Subscription(observer, this._f);  },  forEach: function forEach(fn) {    var that = this;    return new (core.Promise || global.Promise)(function (resolve, reject) {      aFunction(fn);      var subscription = that.subscribe({        next: function (value) {          try {            return fn(value);          } catch (e) {            reject(e);            subscription.unsubscribe();          }        },        error: reject,        complete: resolve      });    });  }});redefineAll($Observable, {  from: function from(x) {    var C = typeof this === 'function' ? this : $Observable;    var method = getMethod(anObject(x)[OBSERVABLE]);    if (method) {      var observable = anObject(method.call(x));      return observable.constructor === C ? observable : new C(function (observer) {        return observable.subscribe(observer);      });    }    return new C(function (observer) {      var done = false;      microtask(function () {        if (!done) {          try {            if (forOf(x, false, function (it) {              observer.next(it);              if (done) return RETURN;            }) === RETURN) return;          } catch (e) {            if (done) throw e;            observer.error(e);            return;          } observer.complete();        }      });      return function () { done = true; };    });  },  of: function of() {    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];    return new (typeof this === 'function' ? this : $Observable)(function (observer) {      var done = false;      microtask(function () {        if (!done) {          for (var j = 0; j < items.length; ++j) {            observer.next(items[j]);            if (done) return;          } observer.complete();        }      });      return function () { done = true; };    });  }});hide($Observable.prototype, OBSERVABLE, function () { return this; });$export($export.G, { Observable: $Observable });_dereq_(100)('Observable');},{"100":100,"128":128,"23":23,"3":3,"33":33,"39":39,"40":40,"42":42,"6":6,"68":68,"7":7,"93":93}],297:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-promise-finally'use strict';var $export = _dereq_(33);var core = _dereq_(23);var global = _dereq_(40);var speciesConstructor = _dereq_(104);var promiseResolve = _dereq_(91);$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {  var C = speciesConstructor(this, core.Promise || global.Promise);  var isFunction = typeof onFinally == 'function';  return this.then(    isFunction ? function (x) {      return promiseResolve(C, onFinally()).then(function () { return x; });    } : onFinally,    isFunction ? function (e) {      return promiseResolve(C, onFinally()).then(function () { throw e; });    } : onFinally  );} });},{"104":104,"23":23,"33":33,"40":40,"91":91}],298:[function(_dereq_,module,exports){'use strict';// https://github.com/tc39/proposal-promise-tryvar $export = _dereq_(33);var newPromiseCapability = _dereq_(69);var perform = _dereq_(90);$export($export.S, 'Promise', { 'try': function (callbackfn) {  var promiseCapability = newPromiseCapability.f(this);  var result = perform(callbackfn);  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);  return promiseCapability.promise;} });},{"33":33,"69":69,"90":90}],299:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var toMetaKey = metadata.key;var ordinaryDefineOwnMetadata = metadata.set;metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));} });},{"67":67,"7":7}],300:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var toMetaKey = metadata.key;var getOrCreateMetadataMap = metadata.map;var store = metadata.store;metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;  if (metadataMap.size) return true;  var targetMetadata = store.get(target);  targetMetadata['delete'](targetKey);  return !!targetMetadata.size || store['delete'](target);} });},{"67":67,"7":7}],301:[function(_dereq_,module,exports){var Set = _dereq_(231);var from = _dereq_(10);var metadata = _dereq_(67);var anObject = _dereq_(7);var getPrototypeOf = _dereq_(79);var ordinaryOwnMetadataKeys = metadata.keys;var toMetaKey = metadata.key;var ordinaryMetadataKeys = function (O, P) {  var oKeys = ordinaryOwnMetadataKeys(O, P);  var parent = getPrototypeOf(O);  if (parent === null) return oKeys;  var pKeys = ordinaryMetadataKeys(parent, P);  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;};metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));} });},{"10":10,"231":231,"67":67,"7":7,"79":79}],302:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var getPrototypeOf = _dereq_(79);var ordinaryHasOwnMetadata = metadata.has;var ordinaryGetOwnMetadata = metadata.get;var toMetaKey = metadata.key;var ordinaryGetMetadata = function (MetadataKey, O, P) {  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);  var parent = getPrototypeOf(O);  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;};metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));} });},{"67":67,"7":7,"79":79}],303:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var ordinaryOwnMetadataKeys = metadata.keys;var toMetaKey = metadata.key;metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));} });},{"67":67,"7":7}],304:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var ordinaryGetOwnMetadata = metadata.get;var toMetaKey = metadata.key;metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {  return ordinaryGetOwnMetadata(metadataKey, anObject(target)    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));} });},{"67":67,"7":7}],305:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var getPrototypeOf = _dereq_(79);var ordinaryHasOwnMetadata = metadata.has;var toMetaKey = metadata.key;var ordinaryHasMetadata = function (MetadataKey, O, P) {  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);  if (hasOwn) return true;  var parent = getPrototypeOf(O);  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;};metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));} });},{"67":67,"7":7,"79":79}],306:[function(_dereq_,module,exports){var metadata = _dereq_(67);var anObject = _dereq_(7);var ordinaryHasOwnMetadata = metadata.has;var toMetaKey = metadata.key;metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {  return ordinaryHasOwnMetadata(metadataKey, anObject(target)    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));} });},{"67":67,"7":7}],307:[function(_dereq_,module,exports){var $metadata = _dereq_(67);var anObject = _dereq_(7);var aFunction = _dereq_(3);var toMetaKey = $metadata.key;var ordinaryDefineOwnMetadata = $metadata.set;$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {  return function decorator(target, targetKey) {    ordinaryDefineOwnMetadata(      metadataKey, metadataValue,      (targetKey !== undefined ? anObject : aFunction)(target),      toMetaKey(targetKey)    );  };} });},{"3":3,"67":67,"7":7}],308:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from_dereq_(97)('Set');},{"97":97}],309:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of_dereq_(98)('Set');},{"98":98}],310:[function(_dereq_,module,exports){// https://github.com/DavidBruant/Map-Set.prototype.toJSONvar $export = _dereq_(33);$export($export.P + $export.R, 'Set', { toJSON: _dereq_(20)('Set') });},{"20":20,"33":33}],311:[function(_dereq_,module,exports){'use strict';// https://github.com/mathiasbynens/String.prototype.atvar $export = _dereq_(33);var $at = _dereq_(106)(true);$export($export.P, 'String', {  at: function at(pos) {    return $at(this, pos);  }});},{"106":106,"33":33}],312:[function(_dereq_,module,exports){'use strict';// https://tc39.github.io/String.prototype.matchAll/var $export = _dereq_(33);var defined = _dereq_(28);var toLength = _dereq_(118);var isRegExp = _dereq_(52);var getFlags = _dereq_(37);var RegExpProto = RegExp.prototype;var $RegExpStringIterator = function (regexp, string) {  this._r = regexp;  this._s = string;};_dereq_(54)($RegExpStringIterator, 'RegExp String', function next() {  var match = this._r.exec(this._s);  return { value: match, done: match === null };});$export($export.P, 'String', {  matchAll: function matchAll(regexp) {    defined(this);    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');    var S = String(this);    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);    rx.lastIndex = toLength(regexp.lastIndex);    return new $RegExpStringIterator(rx, S);  }});},{"118":118,"28":28,"33":33,"37":37,"52":52,"54":54}],313:[function(_dereq_,module,exports){'use strict';// https://github.com/tc39/proposal-string-pad-start-endvar $export = _dereq_(33);var $pad = _dereq_(109);$export($export.P, 'String', {  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);  }});},{"109":109,"33":33}],314:[function(_dereq_,module,exports){'use strict';// https://github.com/tc39/proposal-string-pad-start-endvar $export = _dereq_(33);var $pad = _dereq_(109);$export($export.P, 'String', {  padStart: function padStart(maxLength /* , fillString = ' ' */) {    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);  }});},{"109":109,"33":33}],315:[function(_dereq_,module,exports){'use strict';// https://github.com/sebmarkbage/ecmascript-string-left-right-trim_dereq_(111)('trimLeft', function ($trim) {  return function trimLeft() {    return $trim(this, 1);  };}, 'trimStart');},{"111":111}],316:[function(_dereq_,module,exports){'use strict';// https://github.com/sebmarkbage/ecmascript-string-left-right-trim_dereq_(111)('trimRight', function ($trim) {  return function trimRight() {    return $trim(this, 2);  };}, 'trimEnd');},{"111":111}],317:[function(_dereq_,module,exports){_dereq_(126)('asyncIterator');},{"126":126}],318:[function(_dereq_,module,exports){_dereq_(126)('observable');},{"126":126}],319:[function(_dereq_,module,exports){// https://github.com/tc39/proposal-globalvar $export = _dereq_(33);$export($export.S, 'System', { global: _dereq_(40) });},{"33":33,"40":40}],320:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from_dereq_(97)('WeakMap');},{"97":97}],321:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of_dereq_(98)('WeakMap');},{"98":98}],322:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from_dereq_(97)('WeakSet');},{"97":97}],323:[function(_dereq_,module,exports){// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of_dereq_(98)('WeakSet');},{"98":98}],324:[function(_dereq_,module,exports){var $iterators = _dereq_(141);var getKeys = _dereq_(81);var redefine = _dereq_(94);var global = _dereq_(40);var hide = _dereq_(42);var Iterators = _dereq_(58);var wks = _dereq_(128);var ITERATOR = wks('iterator');var TO_STRING_TAG = wks('toStringTag');var ArrayValues = Iterators.Array;var DOMIterables = {  CSSRuleList: true, // TODO: Not spec compliant, should be false.  CSSStyleDeclaration: false,  CSSValueList: false,  ClientRectList: false,  DOMRectList: false,  DOMStringList: false,  DOMTokenList: true,  DataTransferItemList: false,  FileList: false,  HTMLAllCollection: false,  HTMLCollection: false,  HTMLFormElement: false,  HTMLSelectElement: false,  MediaList: true, // TODO: Not spec compliant, should be false.  MimeTypeArray: false,  NamedNodeMap: false,  NodeList: true,  PaintRequestList: false,  Plugin: false,  PluginArray: false,  SVGLengthList: false,  SVGNumberList: false,  SVGPathSegList: false,  SVGPointList: false,  SVGStringList: false,  SVGTransformList: false,  SourceBufferList: false,  StyleSheetList: true, // TODO: Not spec compliant, should be false.  TextTrackCueList: false,  TextTrackList: false,  TouchList: false};for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {  var NAME = collections[i];  var explicit = DOMIterables[NAME];  var Collection = global[NAME];  var proto = Collection && Collection.prototype;  var key;  if (proto) {    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);    Iterators[NAME] = ArrayValues;    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);  }}},{"128":128,"141":141,"40":40,"42":42,"58":58,"81":81,"94":94}],325:[function(_dereq_,module,exports){var $export = _dereq_(33);var $task = _dereq_(113);$export($export.G + $export.B, {  setImmediate: $task.set,  clearImmediate: $task.clear});},{"113":113,"33":33}],326:[function(_dereq_,module,exports){// ie9- setTimeout & setInterval additional parameters fixvar global = _dereq_(40);var $export = _dereq_(33);var invoke = _dereq_(46);var partial = _dereq_(88);var navigator = global.navigator;var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check var wrap="function" (set) { return msie ? function (fn, time * , ...args ) set(invoke( partial, [].slice.call(arguments, 2), eslint-disable-next-line no-new-func typeof fn="=" 'function' : function(fn) ), time); } set; }; $export($export.g + $export.b $export.f msie, settimeout: wrap(global.settimeout), setinterval: wrap(global.setinterval) }); },{"33":33,"40":40,"46":46,"88":88}],327:[function(_dereq_,module,exports){ _dereq_(254); _dereq_(191); _dereq_(193); _dereq_(192); _dereq_(195); _dereq_(197); _dereq_(202); _dereq_(196); _dereq_(194); _dereq_(204); _dereq_(203); _dereq_(199); _dereq_(200); _dereq_(198); _dereq_(190); _dereq_(201); _dereq_(205); _dereq_(206); _dereq_(157); _dereq_(159); _dereq_(158); _dereq_(208); _dereq_(207); _dereq_(178); _dereq_(188); _dereq_(189); _dereq_(179); _dereq_(180); _dereq_(181); _dereq_(182); _dereq_(183); _dereq_(184); _dereq_(185); _dereq_(186); _dereq_(187); _dereq_(161); _dereq_(162); _dereq_(163); _dereq_(164); _dereq_(165); _dereq_(166); _dereq_(167); _dereq_(168); _dereq_(169); _dereq_(170); _dereq_(171); _dereq_(172); _dereq_(173); _dereq_(174); _dereq_(175); _dereq_(176); _dereq_(177); _dereq_(241); _dereq_(246); _dereq_(253); _dereq_(244); _dereq_(236); _dereq_(237); _dereq_(242); _dereq_(247); _dereq_(249); _dereq_(232); _dereq_(233); _dereq_(234); _dereq_(235); _dereq_(238); _dereq_(239); _dereq_(240); _dereq_(243); _dereq_(245); _dereq_(248); _dereq_(250); _dereq_(251); _dereq_(252); _dereq_(152); _dereq_(154); _dereq_(153); _dereq_(156); _dereq_(155); _dereq_(140); _dereq_(138); _dereq_(145); _dereq_(142); _dereq_(148); _dereq_(150); _dereq_(137); _dereq_(144); _dereq_(134); _dereq_(149); _dereq_(132); _dereq_(147); _dereq_(146); _dereq_(139); _dereq_(143); _dereq_(131); _dereq_(133); _dereq_(136); _dereq_(135); _dereq_(151); _dereq_(141); _dereq_(224); _dereq_(230); _dereq_(225); _dereq_(226); _dereq_(227); _dereq_(228); _dereq_(229); _dereq_(209); _dereq_(160); _dereq_(231); _dereq_(266); _dereq_(267); _dereq_(255); _dereq_(256); _dereq_(261); _dereq_(264); _dereq_(265); _dereq_(259); _dereq_(262); _dereq_(260); _dereq_(263); _dereq_(257); _dereq_(258); _dereq_(210); _dereq_(211); _dereq_(212); _dereq_(213); _dereq_(214); _dereq_(217); _dereq_(215); _dereq_(216); _dereq_(218); _dereq_(219); _dereq_(220); _dereq_(221); _dereq_(223); _dereq_(222); _dereq_(270); _dereq_(268); _dereq_(269); _dereq_(311); _dereq_(314); _dereq_(313); _dereq_(315); _dereq_(316); _dereq_(312); _dereq_(317); _dereq_(318); _dereq_(292); _dereq_(295); _dereq_(291); _dereq_(289); _dereq_(290); _dereq_(293); _dereq_(294); _dereq_(276); _dereq_(310); _dereq_(275); _dereq_(309); _dereq_(321); _dereq_(323); _dereq_(274); _dereq_(308); _dereq_(320); _dereq_(322); _dereq_(273); _dereq_(319); _dereq_(272); _dereq_(277); _dereq_(278); _dereq_(279); _dereq_(280); _dereq_(281); _dereq_(283); _dereq_(282); _dereq_(284); _dereq_(285); _dereq_(286); _dereq_(288); _dereq_(287); _dereq_(297); _dereq_(298); _dereq_(299); _dereq_(300); _dereq_(302); _dereq_(301); _dereq_(304); _dereq_(303); _dereq_(305); _dereq_(306); _dereq_(307); _dereq_(271); _dereq_(296); _dereq_(326); _dereq_(325); _dereq_(324); module.exports="_dereq_(23);" },{"131":131,"132":132,"133":133,"134":134,"135":135,"136":136,"137":137,"138":138,"139":139,"140":140,"141":141,"142":142,"143":143,"144":144,"145":145,"146":146,"147":147,"148":148,"149":149,"150":150,"151":151,"152":152,"153":153,"154":154,"155":155,"156":156,"157":157,"158":158,"159":159,"160":160,"161":161,"162":162,"163":163,"164":164,"165":165,"166":166,"167":167,"168":168,"169":169,"170":170,"171":171,"172":172,"173":173,"174":174,"175":175,"176":176,"177":177,"178":178,"179":179,"180":180,"181":181,"182":182,"183":183,"184":184,"185":185,"186":186,"187":187,"188":188,"189":189,"190":190,"191":191,"192":192,"193":193,"194":194,"195":195,"196":196,"197":197,"198":198,"199":199,"200":200,"201":201,"202":202,"203":203,"204":204,"205":205,"206":206,"207":207,"208":208,"209":209,"210":210,"211":211,"212":212,"213":213,"214":214,"215":215,"216":216,"217":217,"218":218,"219":219,"220":220,"221":221,"222":222,"223":223,"224":224,"225":225,"226":226,"227":227,"228":228,"229":229,"23":23,"230":230,"231":231,"232":232,"233":233,"234":234,"235":235,"236":236,"237":237,"238":238,"239":239,"240":240,"241":241,"242":242,"243":243,"244":244,"245":245,"246":246,"247":247,"248":248,"249":249,"250":250,"251":251,"252":252,"253":253,"254":254,"255":255,"256":256,"257":257,"258":258,"259":259,"260":260,"261":261,"262":262,"263":263,"264":264,"265":265,"266":266,"267":267,"268":268,"269":269,"270":270,"271":271,"272":272,"273":273,"274":274,"275":275,"276":276,"277":277,"278":278,"279":279,"280":280,"281":281,"282":282,"283":283,"284":284,"285":285,"286":286,"287":287,"288":288,"289":289,"290":290,"291":291,"292":292,"293":293,"294":294,"295":295,"296":296,"297":297,"298":298,"299":299,"300":300,"301":301,"302":302,"303":303,"304":304,"305":305,"306":306,"307":307,"308":308,"309":309,"310":310,"311":311,"312":312,"313":313,"314":314,"315":315,"316":316,"317":317,"318":318,"319":319,"320":320,"321":321,"322":322,"323":323,"324":324,"325":325,"326":326}],328:[function(_dereq_,module,exports){ (function (global){ ** copyright (c) 2014, facebook, inc. all rights reserved. this source code is licensed under the bsd-style license found in https: raw.github.com facebook regenerator master file. an additional grant of patent can be patents file same directory. !(function(global) "use strict"; op="Object.prototype;" hasown="Op.hasOwnProperty;" undefined; more compressible than void 0. $symbol="typeof" symbol="==" "function" {}; iteratorsymbol="$Symbol.iterator" || "@@iterator"; asynciteratorsymbol="$Symbol.asyncIterator" "@@asynciterator"; tostringtagsymbol="$Symbol.toStringTag" "@@tostringtag"; inmodule="typeof" module="==" "object"; runtime="global.regeneratorRuntime;" if (runtime) (inmodule) regeneratorruntime defined globally and we're a module, make exports object identical to regeneratorruntime. don't bother evaluating rest was already globally. return; define (as expected by generated code) as either (if module) or new, empty object. = wrap(innerfn, outerfn, self, trylocslist) outerfn provided outerfn.prototype generator, then instanceof generator. protogenerator="outerFn" && generator generator; context="new" context(trylocslist []); ._invoke method unifies implementations .next, .throw, .return methods. generator._invoke="makeInvokeMethod(innerFn," context); runtime.wrap="wrap;" try catch helper minimize deoptimizations. returns completion record like context.tryentries[i].completion. interface could have been (and previously) designed take closure invoked without arguments, but cases we care about existing want call, so there's no need create new even get away with assuming takes exactly one argument, since that happens true every case, touch arguments only allocation required record, which has stable shape hopefully should cheap allocate. trycatch(fn, obj, arg) type: "normal", arg: fn.call(obj, (err) "throw", err genstatesuspendedstart="suspendedStart" ; genstatesuspendedyield="suspendedYield" genstateexecuting="executing" genstatecompleted="completed" returning from innerfn effect breaking out dispatch switch statement. continuesentinel="{};" dummy constructor functions use .constructor .constructor.prototype properties for objects. full spec compliance, you may wish configure your minifier not mangle names these two functions. generator() {} generatorfunction() generatorfunctionprototype() polyfill %iteratorprototype% environments natively support it. iteratorprototype="{};" iteratorprototype[iteratorsymbol]="function" () this; getproto="Object.getPrototypeOf;" nativeiteratorprototype="getProto" getproto(getproto(values([]))); (nativeiteratorprototype !="=" hasown.call(nativeiteratorprototype, iteratorsymbol)) environment native %iteratorprototype%; it instead polyfill. gp="GeneratorFunctionPrototype.prototype" generator.prototype="Object.create(IteratorPrototype);" generatorfunction.prototype="Gp.constructor" generatorfunctionprototype; generatorfunctionprototype.constructor="GeneratorFunction;" generatorfunctionprototype[tostringtagsymbol]="GeneratorFunction.displayName" "generatorfunction"; defining methods iterator terms single method. defineiteratormethods(prototype) ["next", "return"].foreach(function(method) prototype[method]="function(arg)" this._invoke(method, arg); runtime.isgeneratorfunction="function(genFun)" ctor="typeof" genfun="==" genfun.constructor; generatorfunction constructor, best do its .name property. (ctor.displayname ctor.name)="==" "generatorfunction" false; runtime.mark="function(genFun)" (object.setprototypeof) object.setprototypeof(genfun, generatorfunctionprototype); else genfun.__proto__="GeneratorFunctionPrototype;" (!(tostringtagsymbol genfun)) genfun[tostringtagsymbol]="GeneratorFunction" genfun.prototype="Object.create(Gp);" genfun; within body any async function, `await x` transformed `yield regeneratorruntime.awrap(x)`, test `hasown.call(value, "__await")` determine yielded value meant awaited. runtime.awrap="function(arg)" __await: arg asynciterator(generator) invoke(method, arg, resolve, reject) (record.type="==" "throw") reject(record.arg); result="record.arg;" (value "object" hasown.call(value, "__await")) promise.resolve(value.__await).then(function(value) invoke("next", value, reject); }, function(err) invoke("throw", err, promise.resolve(value).then(function(unwrapped) when promise resolved, final becomes .value promise<{value,done}> result for the          // current iteration. If the Promise is rejected, however, the          // result for this iteration will be rejected with the same          // reason. Note that rejections of yielded Promises are not          // thrown back into the generator function, as is the case          // when an awaited Promise is rejected. This difference in          // behavior between yield and await is important, because it          // allows the consumer to decide what to do with the yielded          // rejection (swallow it and continue, manually .throw it back          // into the generator, abandon iteration, whatever). With          // await, by contrast, there is no opportunity to examine the          // rejection reason outside the generator function, so the          // only option is to throw it from the await expression, and          // let the generator function handle the exception.          result.value = unwrapped;          resolve(result);        }, reject);      }    }    if (typeof global.process === "object" && global.process.domain) {      invoke = global.process.domain.bind(invoke);    }    var previousPromise;    function enqueue(method, arg) {      function callInvokeWithMethodAndArg() {        return new Promise(function(resolve, reject) {          invoke(method, arg, resolve, reject);        });      }      return previousPromise =        // If enqueue has been called before, then we want to wait until        // all previous Promises have been resolved before calling invoke,        // so that results are always delivered in the correct order. If        // enqueue has not been called before, then it is important to        // call invoke immediately, without waiting on a callback to fire,        // so that the async generator function has the opportunity to do        // any necessary setup in a predictable way. This predictability        // is why the Promise constructor synchronously invokes its        // executor callback, and why async functions synchronously        // execute code before the first await. Since we implement simple        // async functions in terms of async generators, it is especially        // important to get this right, even though it requires care.        previousPromise ? previousPromise.then(          callInvokeWithMethodAndArg,          // Avoid propagating failures to Promises returned by later          // invocations of the iterator.          callInvokeWithMethodAndArg        ) : callInvokeWithMethodAndArg();    }    // Define the unified helper method that is used to implement .next,    // .throw, and .return (see defineIteratorMethods).    this._invoke = enqueue;  }  defineIteratorMethods(AsyncIterator.prototype);  AsyncIterator.prototype[asyncIteratorSymbol] = function () {    return this;  };  runtime.AsyncIterator = AsyncIterator;  // Note that simple async functions are implemented on top of  // AsyncIterator objects; they just return a Promise for the value of  // the final result produced by the iterator.  runtime.async = function(innerFn, outerFn, self, tryLocsList) {    var iter = new AsyncIterator(      wrap(innerFn, outerFn, self, tryLocsList)    );    return runtime.isGeneratorFunction(outerFn)      ? iter // If outerFn is a generator, return the full iterator.      : iter.next().then(function(result) {          return result.done ? result.value : iter.next();        });  };  function makeInvokeMethod(innerFn, self, context) {    var state = GenStateSuspendedStart;    return function invoke(method, arg) {      if (state === GenStateExecuting) {        throw new Error("Generator is already running");      }      if (state === GenStateCompleted) {        if (method === "throw") {          throw arg;        }        // Be forgiving, per 25.3.3.3.3 of the spec:        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume        return doneResult();      }      context.method = method;      context.arg = arg;      while (true) {        var delegate = context.delegate;        if (delegate) {          var delegateResult = maybeInvokeDelegate(delegate, context);          if (delegateResult) {            if (delegateResult === ContinueSentinel) continue;            return delegateResult;          }        }        if (context.method === "next") {          // Setting context._sent for legacy support of Babel's          // function.sent implementation.          context.sent = context._sent = context.arg;        } else if (context.method === "throw") {          if (state === GenStateSuspendedStart) {            state = GenStateCompleted;            throw context.arg;          }          context.dispatchException(context.arg);        } else if (context.method === "return") {          context.abrupt("return", context.arg);        }        state = GenStateExecuting;        var record = tryCatch(innerFn, self, context);        if (record.type === "normal") {          // If an exception is thrown from innerFn, we leave state ===          // GenStateExecuting and loop back for another invocation.          state = context.done            ? GenStateCompleted            : GenStateSuspendedYield;          if (record.arg === ContinueSentinel) {            continue;          }          return {            value: record.arg,            done: context.done          };        } else if (record.type === "throw") {          state = GenStateCompleted;          // Dispatch the exception by looping back around to the          // context.dispatchException(context.arg) call above.          context.method = "throw";          context.arg = record.arg;        }      }    };  }  // Call delegate.iterator[context.method](context.arg) and handle the  // result, either by returning a { value, done } result from the  // delegate iterator, or by modifying context.method and context.arg,  // setting context.delegate to null, and returning the ContinueSentinel.  function maybeInvokeDelegate(delegate, context) {    var method = delegate.iterator[context.method];    if (method === undefined) {      // A .throw or .return when the delegate iterator has no .throw      // method always terminates the yield* loop.      context.delegate = null;      if (context.method === "throw") {        if (delegate.iterator.return) {          // If the delegate iterator has a return method, give it a          // chance to clean up.          context.method = "return";          context.arg = undefined;          maybeInvokeDelegate(delegate, context);          if (context.method === "throw") {            // If maybeInvokeDelegate(context) changed context.method from            // "return" to "throw", let that override the TypeError below.            return ContinueSentinel;          }        }        context.method = "throw";        context.arg = new TypeError(          "The iterator does not provide a 'throw' method");      }      return ContinueSentinel;    }    var record = tryCatch(method, delegate.iterator, context.arg);    if (record.type === "throw") {      context.method = "throw";      context.arg = record.arg;      context.delegate = null;      return ContinueSentinel;    }    var info = record.arg;    if (! info) {      context.method = "throw";      context.arg = new TypeError("iterator result is not an object");      context.delegate = null;      return ContinueSentinel;    }    if (info.done) {      // Assign the result of the finished delegate to the temporary      // variable specified by delegate.resultName (see delegateYield).      context[delegate.resultName] = info.value;      // Resume execution at the desired location (see delegateYield).      context.next = delegate.nextLoc;      // If context.method was "throw" but the delegate handled the      // exception, let the outer generator proceed normally. If      // context.method was "next", forget context.arg since it has been      // "consumed" by the delegate iterator. If context.method was      // "return", allow the original .return call to continue in the      // outer generator.      if (context.method !== "return") {        context.method = "next";        context.arg = undefined;      }    } else {      // Re-yield the result returned by the delegate method.      return info;    }    // The delegate iterator is finished, so forget it and continue with    // the outer generator.    context.delegate = null;    return ContinueSentinel;  }  // Define Generator.prototype.{next,throw,return} in terms of the  // unified ._invoke helper method.  defineIteratorMethods(Gp);  Gp[toStringTagSymbol] = "Generator";  // A Generator should always return itself as the iterator object when the  // @@iterator function is called on it. Some browsers' implementations of the  // iterator prototype chain incorrectly implement this, causing the Generator  // object to not be returned from this call. This ensures that doesn't happen.  // See https://github.com/facebook/regenerator/issues/274 for more details.  Gp[iteratorSymbol] = function() {    return this;  };  Gp.toString = function() {    return "[object Generator]";  };  function pushTryEntry(locs) {    var entry = { tryLoc: locs[0] };    if (1 in locs) {      entry.catchLoc = locs[1];    }    if (2 in locs) {      entry.finallyLoc = locs[2];      entry.afterLoc = locs[3];    }    this.tryEntries.push(entry);  }  function resetTryEntry(entry) {    var record = entry.completion || {};    record.type = "normal";    delete record.arg;    entry.completion = record;  }  function Context(tryLocsList) {    // The root entry object (effectively a try statement without a catch    // or a finally block) gives us a place to store values thrown from    // locations where there is no enclosing try statement.    this.tryEntries = [{ tryLoc: "root" }];    tryLocsList.forEach(pushTryEntry, this);    this.reset(true);  }  runtime.keys = function(object) {    var keys = [];    for (var key in object) {      keys.push(key);    }    keys.reverse();    // Rather than returning an object with a next method, we keep    // things simple and return the next function itself.    return function next() {      while (keys.length) {        var key = keys.pop();        if (key in object) {          next.value = key;          next.done = false;          return next;        }      }      // To avoid creating an additional object, we just hang the .value      // and .done properties off the next function object itself. This      // also ensures that the minifier will not anonymize the function.      next.done = true;      return next;    };  };  function values(iterable) {    if (iterable) {      var iteratorMethod = iterable[iteratorSymbol];      if (iteratorMethod) {        return iteratorMethod.call(iterable);      }      if (typeof iterable.next === "function") {        return iterable;      }      if (!isNaN(iterable.length)) {        var i = -1, next = function next() {          while (++i < iterable.length) {            if (hasOwn.call(iterable, i)) {              next.value = iterable[i];              next.done = false;              return next;            }          }          next.value = undefined;          next.done = true;          return next;        };        return next.next = next;      }    }    // Return an iterator with no values.    return { next: doneResult };  }  runtime.values = values;  function doneResult() {    return { value: undefined, done: true };  }  Context.prototype = {    constructor: Context,    reset: function(skipTempReset) {      this.prev = 0;      this.next = 0;      // Resetting context._sent for legacy support of Babel's      // function.sent implementation.      this.sent = this._sent = undefined;      this.done = false;      this.delegate = null;      this.method = "next";      this.arg = undefined;      this.tryEntries.forEach(resetTryEntry);      if (!skipTempReset) {        for (var name in this) {          // Not sure about the optimal order of these conditions:          if (name.charAt(0) === "t" &&              hasOwn.call(this, name) &&              !isNaN(+name.slice(1))) {            this[name] = undefined;          }        }      }    },    stop: function() {      this.done = true;      var rootEntry = this.tryEntries[0];      var rootRecord = rootEntry.completion;      if (rootRecord.type === "throw") {        throw rootRecord.arg;      }      return this.rval;    },    dispatchException: function(exception) {      if (this.done) {        throw exception;      }      var context = this;      function handle(loc, caught) {        record.type = "throw";        record.arg = exception;        context.next = loc;        if (caught) {          // If the dispatched exception was caught by a catch block,          // then let that catch block handle the exception normally.          context.method = "next";          context.arg = undefined;        }        return !! caught;      }      for (var i = this.tryEntries.length - 1; i >= 0; --i) {        var entry = this.tryEntries[i];        var record = entry.completion;        if (entry.tryLoc === "root") {          // Exception thrown outside of any try block that could handle          // it, so set the completion value of the entire function to          // throw the exception.          return handle("end");        }        if (entry.tryLoc <= this.prev) { var hascatch="hasOwn.call(entry," "catchloc"); hasfinally="hasOwn.call(entry," "finallyloc"); if (hascatch && hasfinally) (this.prev < entry.catchloc) return handle(entry.catchloc, true); } else entry.finallyloc) handle(entry.finallyloc); (hascatch) (hasfinally) throw new error("try statement without catch or finally"); }, abrupt: function(type, arg) for (var i="this.tryEntries.length" - 1;>= 0; --i) {        var entry = this.tryEntries[i];        if (entry.tryLoc <= this.prev && hasown.call(entry, "finallyloc") < entry.finallyloc) { var finallyentry="entry;" break; } if (finallyentry (type="==" "break" || type="==" "continue") finallyentry.tryloc arg ignore the finally entry control is not jumping to a location outside try catch block. record="finallyEntry" ? finallyentry.completion : {}; record.type="type;" record.arg="arg;" (finallyentry) this.method="next" ; this.next="finallyEntry.finallyLoc;" return continuesentinel; this.complete(record); }, complete: function(record, afterloc) (record.type="==" "throw") throw record.arg; else "return") this.rval="this.arg" = "normal" finish: function(finallyloc) for (var i="this.tryEntries.length" - 1;>= 0; --i) {        var entry = this.tryEntries[i];        if (entry.finallyLoc === finallyLoc) {          this.complete(entry.completion, entry.afterLoc);          resetTryEntry(entry);          return ContinueSentinel;        }      }    },    "catch": function(tryLoc) {      for (var i = this.tryEntries.length - 1; i >= 0; --i) {        var entry = this.tryEntries[i];        if (entry.tryLoc === tryLoc) {          var record = entry.completion;          if (record.type === "throw") {            var thrown = record.arg;            resetTryEntry(entry);          }          return thrown;        }      }      // The context.catch method must only be called with a location      // argument that corresponds to a known catch block.      throw new Error("illegal catch attempt");    },    delegateYield: function(iterable, resultName, nextLoc) {      this.delegate = {        iterator: values(iterable),        resultName: resultName,        nextLoc: nextLoc      };      if (this.method === "next") {        // Deliberately forget the last sent value so that we don't        // accidentally pass it on to the delegate.        this.arg = undefined;      }      return ContinueSentinel;    }  };})(  // Among the various tricks for obtaining a reference to the global  // object, this seems to be the most reliable technique that does not  // use indirect eval (which violates Content Security Policy).  typeof global === "object" ? global :  typeof window === "object" ? window :  typeof self === "object" ? self : this);}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})},{}]},{},[1]);</=></=></-></-></=></=></=></=></';></-></=></r.length;o++)s(r[o]);return>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/aplayer/dist/APlayer.min.js"/>
      <url>/node_modules/aplayer/dist/APlayer.min.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("APlayer",[],t):"object"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=41)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e<10?"0"+e:""+e}).join(":")},getElementViewLeft:function(e){var t="e.offsetLeft,n=e.offsetParent,i=document.body.scrollLeft+document.documentElement.scrollLeft;if(document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement)for(;null!==n&&n!==e;)t+=n.offsetLeft,n=n.offsetParent;else" for(;null!="=n;)t+=n.offsetLeft,n=n.offsetParent;return" t-i},getelementviewtop:function(e,t){for(var n,i="e.offsetTop,a=e.offsetParent;null!==a;)i+=a.offsetTop,a=a.offsetParent;return" n="document.body.scrollTop+document.documentElement.scrollTop,t?i:i-n},isMobile:i,storage:{set:function(e,t){localStorage.setItem(e,t)},get:function(e){return" localstorage.getitem(e)}},namemap:{dragstart:i?"touchstart":"mousedown",dragmove:i?"touchmove":"mousemove",dragend:i?"touchend":"mouseup"},randomorder:function(e){return function(e){for(var>=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return array.from(e)}(array(e))).map(function(e,t){return t}))}};t.default="a},function(e,t,n){var" i="n(2);e.exports=function(e){"use" strict";e="e||{};var" t ,n="i.$each,a=e.audio,r=(e.$value,e.$index,i.$escape),o=e.theme,s=e.index;return" n(a,function(e,n){t+="\n<li>\n    <span class="aplayer-list-cur" style="background-color: " ,t+="r(e.theme||o),t+=';"">\n    <span class="aplayer-list-index">',t+=r(n+s),t+='</span>\n    <span class="aplayer-list-title">',t+=r(e.name),t+='</span>\n    <span class="aplayer-list-author">',t+=r(e.artist),t+="</span>\n\n"}),t}},function(e,t,n){"use strict";e.exports=n(15)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=g(n(33)),a=g(n(32)),r=g(n(31)),o=g(n(30)),s=g(n(29)),l=g(n(28)),u=g(n(27)),c=g(n(26)),p=g(n(25)),d=g(n(24)),h=g(n(23)),y=g(n(22)),f=g(n(21)),v=g(n(20)),m=g(n(19));function g(e){return e&&e.__esModule?e:{default:e}}var w={play:i.default,pause:a.default,volumeUp:r.default,volumeDown:o.default,volumeOff:s.default,orderRandom:l.default,orderList:u.default,menu:c.default,loopAll:p.default,loopOne:d.default,loopNone:h.default,loading:y.default,right:f.default,skip:v.default,lrc:m.default};t.default=w},function(e,t,n){"use strict";var i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":a(window))&&(i=window)}e.exports=i},function(e,t,n){"use strict";var i,a,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};void 0===(a="function"==typeof(i=function(){if("object"===("undefined"==typeof window?"undefined":r(window))&&void 0!==document.querySelectorAll&&void 0!==window.pageYOffset&&void 0!==history.pushState){var e=function(e,t,n,i){return n>i?t:e+(t-e)*((a=n/i)<.5?4*a*a*a:(a-1)*(2*a-2)*(2*a-2)+1);var a},t="function(t,n,i,a){n=n||500;var" r="(a=a||window).scrollTop||window.pageYOffset;if("number"==typeof" t)var o="parseInt(t);else" var s="Date.now(),l=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,15)};!function" u(){var c="Date.now()-s;a!==window?a.scrollTop=e(r,o,c,n):window.scroll(0,e(r,o,c,n)),c">n?"function"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace("#"+e.id)})}};return document.addEventListener("DOMContentLoaded",function(){for(var e,t=document.querySelectorAll('a[href^="#"]:not([href="#"])'),i=t.length;e=t[--i];)e.addEventListener("click",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i="t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in" i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a="s(n(1)),r=s(n(0)),o=s(n(5));function" s(e){return e&&e.__esmodule?e:{default:e}}var l="function(){function" e(t){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call a class as function")}(this,e),this.player="t,this.index=0,this.audios=this.player.options.audio,this.bindEvents()}return" i(e,[{key:"bindevents",value:function(){var e="this;this.player.template.list.addEventListener("click",function(t){var" n="void" 0;n="LI" =="=t.target.tagName.toUpperCase()?t.target:t.target.parentElement;var" array]"!="=Object.prototype.toString.call(e)&&(e=[e]),e.map(function(e){return" e.name="e.name||e.title||"Audio" name",e.artist="e.artist||e.author||"Audio" artist",e.cover="e.cover||e.pic,e.type=e.type||"normal",e});var" t="!(this.audios.length">1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add("aplayer-withlist"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(".aplayer-list-cur"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&("random"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:"remove",value:function(e){if(this.player.events.trigger("listremove",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(".aplayer-list li");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n<t.length;n++)t[n].getElementsByClassName("aplayer-list-index")[0].textContent=n;1===this.audios.length&&this.player.container.classList.remove("aplayer-withlist"),this.player.template.listCurs=this.player.container.querySelectorAll(".aplayer-list-cur")}else this.clear()}},{key:"switch",value:function(e){if(this.player.events.trigger("listswitch",{index:e}),void 0!="=e&&this.audios[e]){this.index=e;var" t="this.audios[this.index];this.player.template.pic.style.backgroundImage=t.cover?"url('"+t.cover+"')":"",this.player.theme(this.audios[this.index].theme||this.player.options.theme,this.index,!1),this.player.template.title.innerHTML=t.name,this.player.template.author.innerHTML=t.artist?"" - "+t.artist:"";var n="this.player.container.getElementsByClassName("aplayer-list-light")[0];n&&n.classList.remove("aplayer-list-light"),this.player.container.querySelectorAll(".aplayer-list" li")[this.index].classlist.add("aplayer-list-light"),(0,o.default)(33*this.index,500,null,this.player.template.listol),this.player.setaudio(t),this.player.lrc&&this.player.lrc.switch(this.index),this.player.lrc&&this.player.lrc.update(0),1!="=this.player.duration&&(this.player.template.dtime.innerHTML=r.default.secondToTime(this.player.duration))}}},{key:"clear",value:function(){this.player.events.trigger("listclear"),this.index=0,this.player.container.classList.remove("aplayer-withlist"),this.player.pause(),this.audios=[],this.player.lrc&&this.player.lrc.clear(),this.player.audio.src="",this.player.template.listOl.innerHTML="",this.player.template.pic.style.backgroundImage="",this.player.theme(this.player.options.theme,this.index,!1),this.player.template.title.innerHTML="No" audio",this.player.template.author.innerhtml ,this.player.bar.set("loaded",0,"width"),this.player.template.dtime.innerhtml="r.default.secondToTime(0)}}]),e}();t.default=l},function(e,t,n){"use" strict";object.defineproperty(t,"__esmodule",{value:!0});var i="function(){function" e(e,t){for(var i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a="function(){function" e(){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call class as function")}(this,e),this.events="{},this.audioEvents=["abort","canplay","canplaythrough","durationchange","emptied","ended","error","loadeddata","loadedmetadata","loadstart","mozaudioavailable","pause","play","playing","progress","ratechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],this.playerEvents=["destroy","listshow","listhide","listadd","listremove","listswitch","listclear","noticeshow","noticehide","lrcshow","lrchide"]}return" i(e,[{key:"on",value:function(e,t){this.type(e)&&"function"="=typeof" t&&(this.events[e]||(this.events[e]="[]),this.events[e].push(t))}},{key:"trigger",value:function(e,t){if(this.events[e]&&this.events[e].length)for(var" event name: "+e),null)}}]),e}();t.default="a},function(e,t,n){"use" e(t){!function(e,t){if(!(e function")}(this,e),this.player="t,window.requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},this.types=["loading"],this.init()}return" i(e,[{key:"init",value:function(){var e="this;this.types.forEach(function(t){e["init"+t+"Checker"]()})}},{key:"initloadingChecker",value:function(){var">t&&!e.player.audio.paused&&(e.player.container.classList.remove("aplayer-loading"),i=!1),t=n)},100)}},{key:"enable",value:function(e){this["enable"+e+"Checker"]=!0,"fps"===e&&this.initfpsChecker()}},{key:"disable",value:function(e){this["enable"+e+"Checker"]=!1}},{key:"destroy",value:function(){var e=this;this.types.forEach(function(t){e["enable"+t+"Checker"]=!1,e[t+"Checker"]&&clearInterval(e[t+"Checker"])})}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i="t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in" i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a="o(n(0)),r=o(n(3));function" o(e){return e&&e.__esmodule?e:{default:e}}var s="function(){function" e(t){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call a class as function")}(this,e),this.player="t,this.initPlayButton(),this.initPlayBar(),this.initOrderButton(),this.initLoopButton(),this.initMenuButton(),a.default.isMobile||this.initVolumeButton(),this.initMiniSwitcher(),this.initSkipButton(),this.initLrcButton()}return" i(e,[{key:"initplaybutton",value:function(){var e="this;this.player.template.pic.addEventListener("click",function(){e.player.toggle()})}},{key:"initPlayBar",value:function(){var" n="((t.clientX||t.changedTouches[0].clientX)-a.default.getElementViewLeft(e.player.template.barWrap))/e.player.template.barWrap.clientWidth;n=Math.max(n,0),n=Math.min(n,1),e.player.bar.set("played",n,"width"),e.player.lrc&&e.player.lrc.update(n*e.player.duration),e.player.template.ptime.innerHTML=a.default.secondToTime(n*e.player.duration)},n=function" n(i){document.removeeventlistener(a.default.namemap.dragend,n),document.removeeventlistener(a.default.namemap.dragmove,t);var r="((i.clientX||i.changedTouches[0].clientX)-a.default.getElementViewLeft(e.player.template.barWrap))/e.player.template.barWrap.clientWidth;r=Math.max(r,0),r=Math.min(r,1),e.player.bar.set("played",r,"width"),e.player.seek(e.player.bar.get("played","width")*e.player.duration),e.player.disableTimeupdate=!1};this.player.template.barWrap.addEventListener(a.default.nameMap.dragStart,function(){e.player.disableTimeupdate=!0,document.addEventListener(a.default.nameMap.dragMove,t),document.addEventListener(a.default.nameMap.dragEnd,n)})}},{key:"initVolumeButton",value:function(){var" t="function(t){var" n(i){e.player.template.volumebarwrap.classlist.remove("aplayer-volume-bar-wrap-active"),document.removeeventlistener(a.default.namemap.dragend,n),document.removeeventlistener(a.default.namemap.dragmove,t);var>1?"one"===e.player.options.loop?(e.player.options.loop="none",e.player.template.loop.innerHTML=r.default.loopNone):"none"===e.player.options.loop?(e.player.options.loop="all",e.player.template.loop.innerHTML=r.default.loopAll):"all"===e.player.options.loop&&(e.player.options.loop="one",e.player.template.loop.innerHTML=r.default.loopOne):"one"===e.player.options.loop||"all"===e.player.options.loop?(e.player.options.loop="none",e.player.template.loop.innerHTML=r.default.loopNone):"none"===e.player.options.loop&&(e.player.options.loop="all",e.player.template.loop.innerHTML=r.default.loopAll)})}},{key:"initMenuButton",value:function(){var e=this;this.player.template.menu.addEventListener("click",function(){e.player.list.toggle()})}},{key:"initMiniSwitcher",value:function(){var e=this;this.player.template.miniSwitcher.addEventListener("click",function(){e.player.setMode("mini"===e.player.mode?"normal":"mini")})}},{key:"initSkipButton",value:function(){var e=this;this.player.template.skipBackButton.addEventListener("click",function(){e.player.skipBack()}),this.player.template.skipForwardButton.addEventListener("click",function(){e.player.skipForward()}),this.player.template.skipPlayButton.addEventListener("click",function(){e.player.toggle()})}},{key:"initLrcButton",value:function(){var e=this;this.player.template.lrcButton.addEventListener("click",function(){e.player.template.lrcButton.classList.contains("aplayer-icon-lrc-inactivity")?(e.player.template.lrcButton.classList.remove("aplayer-icon-lrc-inactivity"),e.player.lrc&&e.player.lrc.show()):(e.player.template.lrcButton.classList.add("aplayer-icon-lrc-inactivity"),e.player.lrc&&e.player.lrc.hide())})}}]),e}();t.default=s},function(e,t,n){var i=n(2);e.exports=function(e){"use strict";e=e||{};var t="",n=i.$each,a=e.lyrics,r=(e.$value,e.$index,i.$escape);return n(a,function(e,n){t+="\n    <p",0===n&&(t+=' class="aplayer-lrc-current" '),t+=">" ,t+="r(e[1]),t+="</p">\n"}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i="t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in" i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r="n(10),o=(i=r)&&i.__esModule?i:{default:i};var" s="function(){function" e(t){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call a class as function")}(this,e),this.container="t.container,this.async=t.async,this.player=t.player,this.parsed=[],this.index=0,this.current=[]}return" a(e,[{key:"show",value:function(){this.player.events.trigger("lrcshow"),this.player.template.lrcwrap.classlist.remove("aplayer-lrc-hide")}},{key:"hide",value:function(){this.player.events.trigger("lrchide"),this.player.template.lrcwrap.classlist.add("aplayer-lrc-hide")}},{key:"toggle",value:function(){this.player.template.lrcwrap.classlist.contains("aplayer-lrc-hide")?this.show():this.hide()}},{key:"update",value:function(){var e="arguments.length">0&&void 0!==arguments[0]?arguments[0]:this.player.audio.currentTime;if(this.index>this.current.length-1||e<this.current[this.index][0]||!this.current[this.index+1]||e>=this.current[this.index+1][0])for(var t=0;t<this.current.length;t++)e>=this.current[t][0]&&(!this.current[t+1]||e<this.current[t+1][0])&&(this.index=t,this.container.style.transform="translateY("+16*-this.index+"px)",this.container.style.webkitTransform="translateY("+16*-this.index+"px)",this.container.getElementsByClassName("aplayer-lrc-current")[0].classList.remove("aplayer-lrc-current"),this.container.getElementsByTagName("p")[t].classList.add("aplayer-lrc-current"))}},{key:"switch",value:function(e){var t="this;if(!this.parsed[e])if(this.async){this.parsed[e]=[["00:00","Loading"]];var" n="new" xmlhttprequest;n.onreadystatechange="function(){e===t.player.list.index&&4===n.readyState&&(n.status">=200&&n.status<300||304===n.status?t.parsed[e]=t.parse(n.responseText):(t.player.notice("LRC file request fails: status "+n.status),t.parsed[e]="[["00:00","Not" available"]]),t.container.innerhtml="(0,o.default)({lyrics:t.parsed[e]}),t.update(0),t.current=t.parsed[e])};var" i="this.player.list.audios[e].lrc;n.open("get",i,!0),n.send(null)}else" this.player.list.audios[e].lrc?this.parsed[e]="this.parse(this.player.list.audios[e].lrc):this.parsed[e]=[["00:00","Not" available"]];this.container.innerhtml="(0,o.default)({lyrics:this.parsed[e]}),this.update(0),this.current=this.parsed[e]}},{key:"parse",value:function(e){if(e){for(var" t="(e=e.replace(/([^\]^\n])\[/g,function(e,t){return" t+"\n["})).split("\n"),n="[],i=t.length,a=0;a<i;a++){var" r="t[a].match(/\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g),o=t[a].replace(/.*\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g,"").replace(/<(\d{2}):(\d{2})(\.(\d{2,3}))?">/g,"").replace(/^\s+|\s+$/g,"");if(r)for(var s=r.length,l=0;l<s;l++){var u="/\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/.exec(r[l]),c=60*u[1]+parseInt(u[2])+(u[4]?parseInt(u[4])/(2===(u[4]+"").length?100:1e3):0);n.push([c,o])}}return(n=n.filter(function(e){return" e[1]})).sort(function(e,t){return e[0]-t[0]}),n}return[]}},{key:"remove",value:function(e){this.parsed.splice(e,1)}},{key:"clear",value:function(){this.parsed="[],this.container.innerHTML=""}}]),e}();t.default=s},function(e,t,n){"use" strict";object.defineproperty(t,"__esmodule",{value:!0});var i,a="function(){function" e(e,t){for(var n="0;n<t.length;n++){var" i="t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in" i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r="n(0),o=(i=r)&&i.__esModule?i:{default:i};var" s="function(){function" e(t){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call a class as function")}(this,e),this.storagename="t.options.storageName,this.data=JSON.parse(o.default.storage.get(this.storageName)),this.data||(this.data={}),this.data.volume=this.data.volume||t.options.volume}return" a(e,[{key:"get",value:function(e){return this.data[e]}},{key:"set",value:function(e,t){this.data[e]="t,o.default.storage.set(this.storageName,JSON.stringify(this.data))}}]),e}();t.default=s},function(e,t,n){"use" n&&e(t.prototype,n),i&&e(t,i),t}}();var function")}(this,e),this.elements="{},this.elements.volume=t.volume,this.elements.played=t.played,this.elements.loaded=t.loaded}return" i(e,[{key:"set",value:function(e,t,n){t="Math.max(t,0),t=Math.min(t,1),this.elements[e].style[n]=100*t+"%"}},{key:"get",value:function(e,t){return" parsefloat(this.elements[e].style[t]) 100}}]),e}();t.default="a},function(e,t,n){"use" strict";(function(t){e.exports="!1;try{e.exports="[object" process]"="==Object.prototype.toString.call(t.process)}catch(e){}}).call(this,n(4))},function(e,t,n){"use" strict";(function(t){var>]/;a.$escape=function(e){return function(e){var t=""+e,n=r.exec(t);if(!n)return e;var i="",a=void 0,o=void 0,s=void 0;for(a=n.index,o=0;a<t.length;a++){switch(t.charCodeAt(a)){case 0="==t||null===t?"":"function"==typeof" 34:s="&#34;" ;break;case 38:s="&#38;" 39:s="&#39;" 60:s="&#60;" 62:s="&#62;" ;break;default:continue}o!="=a&&(i+=t.substring(o,a)),o=a+1,i+=s}return" o!="=a?i+t.substring(o,a):i}(function" e(t){"string"!="typeof" t&&(t="void" t?e(t.call(t)):json.stringify(t));return t}(e))},a.$each="function(e,t){if(Array.isArray(e))for(var" n="0,i=e.length;n<i;n++)t(e[n],n);else" for(var a in e)t(e[a],a)},e.exports="a}).call(this,n(4))},function(e,t,n){var" i="n(2);e.exports=function(e){"use" strict";var t ,a="(e=e||{}).options,r=e.cover,o=i.$escape,s=e.icons,l=(arguments[1],function(e){return" t+="e}),u=e.getObject;e.theme,e.audio,e.index;return" a.fixed?(t+="\n<div class="aplayer-list" ,a.listfolded&&(t+=" aplayer-list-hide" ),t+=""" ,a.listmaxheight&&(t+=" style="max-height: " ,t+="o(a.listMaxHeight),t+='"'),t+="">\n    <ol",a.listMaxHeight&&(t+=' style="max-height: ',t+=o(a.listMaxHeight),t+='" '),t+=">\n        " ,l(n(1)(u({theme:a.theme,audio:a.audio,index:1}))),t+="\n    </ol>\n</div>\n<div class="aplayer-body">\n    <div class="aplayer-pic" style="" ,r&&(t+="background-image: url(&quot;" ,t+="o(r),t+="&quot;);"),t+="background-color:" ",t+="o(a.theme),t+=';"">\n        <div class="aplayer-button aplayer-play">',t+=s.play,t+='</div>\n    \n    <div class="aplayer-info" style="display: none;">\n        <div class="aplayer-music">\n            <span class="aplayer-title">No audio</span>\n            <span class="aplayer-author"></span>\n        </div>\n        <div class="aplayer-controller">\n            <div class="aplayer-bar-wrap">\n                <div class="aplayer-bar">\n                    <div class="aplayer-loaded" style="width: 0"></div>\n                    <div class="aplayer-played" style="width: 0; background: ',t+=o(a.theme),t+=';">\n                        <span class="aplayer-thumb" style="background: ',t+=o(a.theme),t+=';">\n                            <span class="aplayer-loading-icon">',t+=s.loading,t+='</span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div class="aplayer-time">\n                <span class="aplayer-time-inner">\n                    <span class="aplayer-ptime">00:00</span> / <span class="aplayer-dtime">00:00</span>\n                </span>\n                <span class="aplayer-icon aplayer-icon-back">\n                    ',t+=s.skip,t+='\n                </span>\n                <span class="aplayer-icon aplayer-icon-play">\n                    ',t+=s.play,t+='\n                </span>\n                <span class="aplayer-icon aplayer-icon-forward">\n                    ',t+=s.skip,t+='\n                </span>\n                <div class="aplayer-volume-wrap">\n                    <button type="button" class="aplayer-icon aplayer-icon-volume-down">\n                        ',t+=s.volumeDown,t+='\n                    </button>\n                    <div class="aplayer-volume-bar-wrap">\n                        <div class="aplayer-volume-bar">\n                            <div class="aplayer-volume" style="height: 80%; background: ',t+=o(a.theme),t+=';"></div>\n                        </div>\n                    </div>\n                </div>\n                <button type="button" class="aplayer-icon aplayer-icon-order">\n                    ',"list"===a.order?t+=s.orderList:"random"===a.order&&(t+=s.orderRandom),t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-loop">\n                    ',"one"===a.loop?t+=s.loopOne:"all"===a.loop?t+=s.loopAll:"none"===a.loop&&(t+=s.loopNone),t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-menu">\n                    ',t+=s.menu,t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-lrc">\n                    ',t+=s.lrc,t+='\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class="aplayer-notice"></div>\n    <div class="aplayer-miniswitcher"><button class="aplayer-icon">',t+=s.right,t+='</button></div>\n\n<div class="aplayer-lrc">\n    <div class="aplayer-lrc-contents" style="transform: translateY(0); -webkit-transform: translateY(0);"></div>\n</div>\n'):(t+='\n<div class="aplayer-body">\n    <div class="aplayer-pic" style="',r&&(t+=" background-image: url(&quot;",t+="o(r),t+="&quot;);"),t+="background-color:" ",t+="o(a.theme),t+=';"">\n        <div class="aplayer-button aplayer-play">',t+=s.play,t+='</div>\n    </div>\n    <div class="aplayer-info">\n        <div class="aplayer-music">\n            <span class="aplayer-title">No audio</span>\n            <span class="aplayer-author"></span>\n        </div>\n        <div class="aplayer-lrc">\n            <div class="aplayer-lrc-contents" style="transform: translateY(0); -webkit-transform: translateY(0);"></div>\n        </div>\n        <div class="aplayer-controller">\n            <div class="aplayer-bar-wrap">\n                <div class="aplayer-bar">\n                    <div class="aplayer-loaded" style="width: 0"></div>\n                    <div class="aplayer-played" style="width: 0; background: ',t+=o(a.theme),t+=';">\n                        <span class="aplayer-thumb" style="background: ',t+=o(a.theme),t+=';">\n                            <span class="aplayer-loading-icon">',t+=s.loading,t+='</span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div class="aplayer-time">\n                <span class="aplayer-time-inner">\n                    <span class="aplayer-ptime">00:00</span> / <span class="aplayer-dtime">00:00</span>\n                </span>\n                <span class="aplayer-icon aplayer-icon-back">\n                    ',t+=s.skip,t+='\n                </span>\n                <span class="aplayer-icon aplayer-icon-play">\n                    ',t+=s.play,t+='\n                </span>\n                <span class="aplayer-icon aplayer-icon-forward">\n                    ',t+=s.skip,t+='\n                </span>\n                <div class="aplayer-volume-wrap">\n                    <button type="button" class="aplayer-icon aplayer-icon-volume-down">\n                        ',t+=s.volumeDown,t+='\n                    </button>\n                    <div class="aplayer-volume-bar-wrap">\n                        <div class="aplayer-volume-bar">\n                            <div class="aplayer-volume" style="height: 80%; background: ',t+=o(a.theme),t+=';"></div>\n                        </div>\n                    </div>\n                </div>\n                <button type="button" class="aplayer-icon aplayer-icon-order">\n                    ',"list"===a.order?t+=s.orderList:"random"===a.order&&(t+=s.orderRandom),t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-loop">\n                    ',"one"===a.loop?t+=s.loopOne:"all"===a.loop?t+=s.loopAll:"none"===a.loop&&(t+=s.loopNone),t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-menu">\n                    ',t+=s.menu,t+='\n                </button>\n                <button type="button" class="aplayer-icon aplayer-icon-lrc">\n                    ',t+=s.lrc,t+='\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class="aplayer-notice"></div>\n    <div class="aplayer-miniswitcher"><button class="aplayer-icon">',t+=s.right,t+='</button></div>\n</div>\n<div class="aplayer-list',a.listFolded&&(t+=" aplayer-list-hide"),t+=""" ,a.listmaxheight&&(t+=" style="max-height: " ,t+="o(a.listMaxHeight),t+='"'),t+="">\n    <ol",a.listMaxHeight&&(t+=' style="max-height: ',t+=o(a.listMaxHeight),t+='" '),t+=">\n        " ,l(n(1)(u({theme:a.theme,audio:a.audio,index:1}))),t+="\n    </ol>\n</div>\n" ),t}},function(e,t,n){"use strict";object.defineproperty(t,"__esmodule",{value:!0});var i="function(){function" e(e,t){for(var n="0;n<t.length;n++){var" i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a="o(n(3)),r=o(n(16));function" o(e){return e&&e.__esmodule?e:{default:e}}var s="function(){function" e(t){!function(e,t){if(!(e instanceof t))throw new typeerror("cannot call a class as function")}(this,e),this.container="t.container,this.options=t.options,this.randomOrder=t.randomOrder,this.init()}return" i(e,[{key:"init",value:function(){var e ;this.options.audio.length&&(e="random" =="=this.options.order?this.options.audio[this.randomOrder[0]].cover:this.options.audio[0].cover),this.container.innerHTML=(0,r.default)({options:this.options,icons:a.default,cover:e,getObject:function(e){return" e}}),this.lrc="this.container.querySelector(".aplayer-lrc-contents"),this.lrcWrap=this.container.querySelector(".aplayer-lrc"),this.ptime=this.container.querySelector(".aplayer-ptime"),this.info=this.container.querySelector(".aplayer-info"),this.time=this.container.querySelector(".aplayer-time"),this.barWrap=this.container.querySelector(".aplayer-bar-wrap"),this.button=this.container.querySelector(".aplayer-button"),this.body=this.container.querySelector(".aplayer-body"),this.list=this.container.querySelector(".aplayer-list"),this.listOl=this.container.querySelector(".aplayer-list" ol"),this.listcurs="this.container.querySelectorAll(".aplayer-list-cur"),this.played=this.container.querySelector(".aplayer-played"),this.loaded=this.container.querySelector(".aplayer-loaded"),this.thumb=this.container.querySelector(".aplayer-thumb"),this.volume=this.container.querySelector(".aplayer-volume"),this.volumeBar=this.container.querySelector(".aplayer-volume-bar"),this.volumeButton=this.container.querySelector(".aplayer-time" button"),this.volumebarwrap="this.container.querySelector(".aplayer-volume-bar-wrap"),this.loop=this.container.querySelector(".aplayer-icon-loop"),this.order=this.container.querySelector(".aplayer-icon-order"),this.menu=this.container.querySelector(".aplayer-icon-menu"),this.pic=this.container.querySelector(".aplayer-pic"),this.title=this.container.querySelector(".aplayer-title"),this.author=this.container.querySelector(".aplayer-author"),this.dtime=this.container.querySelector(".aplayer-dtime"),this.notice=this.container.querySelector(".aplayer-notice"),this.miniSwitcher=this.container.querySelector(".aplayer-miniswitcher"),this.skipBackButton=this.container.querySelector(".aplayer-icon-back"),this.skipForwardButton=this.container.querySelector(".aplayer-icon-forward"),this.skipPlayButton=this.container.querySelector(".aplayer-icon-play"),this.lrcButton=this.container.querySelector(".aplayer-icon-lrc")}}]),e}();t.default=s},function(e,t,n){"use" strict";object.defineproperty(t,"__esmodule",{value:!0}),t.default="function(e){var" t="{container:e.element||document.getElementsByClassName("aplayer")[0],mini:e.narrow||e.fixed||!1,fixed:!1,autoplay:!1,mutex:!0,lrcType:e.showlrc||e.lrc||0,preload:"auto",theme:"#b7daff",loop:"all",order:"list",volume:.7,listFolded:e.fixed,listMaxHeight:e.listmaxheight||"250px",audio:e.music||[],storageName:"aplayer-setting"};for(var" in t)t.hasownproperty(n)&&!e.hasownproperty(n)&&(e[n]="t[n]);return"[object" array]"!="=Object.prototype.toString.call(e.audio)&&(e.audio=[e.audio]),e.audio.map(function(e){return" e.name="e.name||e.title||"Audio" name",e.artist="e.artist||e.author||"Audio" artist",e.cover="e.cover||e.pic,e.type=e.type||"normal",e}),e.audio.length<=1&&"one"===e.loop&&(e.loop="all"),e}},function(e,t){e.exports='<svg" xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M26.667 5.333h-21.333c-0 0-0.001 0-0.001 0-1.472 0-2.666 1.194-2.666 2.666 0 0 0 0.001 0 0.001v-0 16c0 0 0 0.001 0 0.001 0 1.472 1.194 2.666 2.666 2.666 0 0 0.001 0 0.001 0h21.333c0 0 0.001 0 0.001 0 1.472 0 2.666-1.194 2.666-2.666 0-0 0-0.001 0-0.001v0-16c0-0 0-0.001 0-0.001 0-1.472-1.194-2.666-2.666-2.666-0 0-0.001 0-0.001 0h0zM5.333 16h5.333v2.667h-5.333v-2.667zM18.667 24h-13.333v-2.667h13.333v2.667zM26.667 24h-5.333v-2.667h5.333v2.667zM26.667 18.667h-13.333v-2.667h13.333v2.667z"></path>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M25.468 6.947c-0.326-0.172-0.724-0.151-1.030 0.057l-6.438 4.38v-3.553c0-0.371-0.205-0.71-0.532-0.884-0.326-0.172-0.724-0.151-1.030 0.057l-12 8.164c-0.274 0.186-0.438 0.496-0.438 0.827s0.164 0.641 0.438 0.827l12 8.168c0.169 0.115 0.365 0.174 0.562 0.174 0.16 0 0.321-0.038 0.468-0.116 0.327-0.173 0.532-0.514 0.532-0.884v-3.556l6.438 4.382c0.169 0.115 0.365 0.174 0.562 0.174 0.16 0 0.321-0.038 0.468-0.116 0.327-0.173 0.532-0.514 0.532-0.884v-16.333c0-0.371-0.205-0.71-0.532-0.884z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M22 16l-10.105-10.6-1.895 1.987 8.211 8.613-8.211 8.612 1.895 1.988 8.211-8.613z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M4 16c0-6.6 5.4-12 12-12s12 5.4 12 12c0 1.2-0.8 2-2 2s-2-0.8-2-2c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.2 0 2 0.8 2 2s-0.8 2-2 2c-6.6 0-12-5.4-12-12z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 29 32"><path d="M2.667 7.027l1.707-1.693 22.293 22.293-1.693 1.707-4-4h-11.64v4l-5.333-5.333 5.333-5.333v4h8.973l-8.973-8.973v0.973h-2.667v-3.64l-4-4zM22.667 17.333h2.667v5.573l-2.667-2.667v-2.907zM22.667 6.667v-4l5.333 5.333-5.333 5.333v-4h-10.907l-2.667-2.667h13.573z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 33 32"><path d="M9.333 9.333h13.333v4l5.333-5.333-5.333-5.333v4h-16v8h2.667v-5.333zM22.667 22.667h-13.333v-4l-5.333 5.333 5.333 5.333v-4h16v-8h-2.667v5.333zM17.333 20v-8h-1.333l-2.667 1.333v1.333h2v5.333h2z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 29 32"><path d="M9.333 9.333h13.333v4l5.333-5.333-5.333-5.333v4h-16v8h2.667v-5.333zM22.667 22.667h-13.333v-4l-5.333 5.333 5.333 5.333v-4h16v-8h-2.667v5.333z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 22 32"><path d="M20.8 14.4q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2zM1.6 11.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2zM20.8 20.8q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M0.622 18.334h19.54v7.55l11.052-9.412-11.052-9.413v7.549h-19.54v3.725z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 32 32"><path d="M22.667 4l7 6-7 6 7 6-7 6v-4h-3.653l-3.76-3.76 2.827-2.827 2.587 2.587h2v-8h-2l-12 12h-6v-4h4.347l12-12h3.653v-4zM2.667 8h6l3.76 3.76-2.827 2.827-2.587-2.587h-4.347v-4z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8zM20.576 16q0 1.344-0.768 2.528t-2.016 1.664q-0.16 0.096-0.448 0.096-0.448 0-0.8-0.32t-0.32-0.832q0-0.384 0.192-0.64t0.544-0.448 0.608-0.384 0.512-0.64 0.192-1.024-0.192-1.024-0.512-0.64-0.608-0.384-0.544-0.448-0.192-0.64q0-0.48 0.32-0.832t0.8-0.32q0.288 0 0.448 0.096 1.248 0.48 2.016 1.664t0.768 2.528z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8zM20.576 16q0 1.344-0.768 2.528t-2.016 1.664q-0.16 0.096-0.448 0.096-0.448 0-0.8-0.32t-0.32-0.832q0-0.384 0.192-0.64t0.544-0.448 0.608-0.384 0.512-0.64 0.192-1.024-0.192-1.024-0.512-0.64-0.608-0.384-0.544-0.448-0.192-0.64q0-0.48 0.32-0.832t0.8-0.32q0.288 0 0.448 0.096 1.248 0.48 2.016 1.664t0.768 2.528zM25.152 16q0 2.72-1.536 5.056t-4 3.36q-0.256 0.096-0.448 0.096-0.48 0-0.832-0.352t-0.32-0.8q0-0.704 0.672-1.056 1.024-0.512 1.376-0.8 1.312-0.96 2.048-2.4t0.736-3.104-0.736-3.104-2.048-2.4q-0.352-0.288-1.376-0.8-0.672-0.352-0.672-1.056 0-0.448 0.32-0.8t0.8-0.352q0.224 0 0.48 0.096 2.496 1.056 4 3.36t1.536 5.056zM29.728 16q0 4.096-2.272 7.552t-6.048 5.056q-0.224 0.096-0.448 0.096-0.48 0-0.832-0.352t-0.32-0.8q0-0.64 0.704-1.056 0.128-0.064 0.384-0.192t0.416-0.192q0.8-0.448 1.44-0.896 2.208-1.632 3.456-4.064t1.216-5.152-1.216-5.152-3.456-4.064q-0.64-0.448-1.44-0.896-0.128-0.096-0.416-0.192t-0.384-0.192q-0.704-0.416-0.704-1.056 0-0.448 0.32-0.8t0.832-0.352q0.224 0 0.448 0.096 3.776 1.632 6.048 5.056t2.272 7.552z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 17 32"><path d="M14.080 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112v-18.24q0-2.048 2.88-2.048zM2.88 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112v-18.24q0-2.048 2.88-2.048z"/></svg>'},function(e,t){e.exports='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewbox="0 0 16 31"><path d="M15.552 15.168q0.448 0.32 0.448 0.832 0 0.448-0.448 0.768l-13.696 8.512q-0.768 0.512-1.312 0.192t-0.544-1.28v-16.448q0-0.96 0.544-1.28t1.312 0.192z"/></svg>'},function(e,t,n){"use strict";var i,a,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function l(e){if(i===setTimeout)return setTimeout(e,0);if((i===o||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:o}catch(e){i=o}try{a="function"==typeof clearTimeout?clearTimeout:s}catch(e){a=s}}();var u,c=[],p=!1,d=-1;function h(){p&&u&&(p=!1,u.length?c=u.concat(c):d=-1,c.length&&y())}function y(){if(!p){var e=l(h);p=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,p=!1,function(e){if(a===clearTimeout)return cleartimeout(e);if((a="==s||!a)&&clearTimeout)return" a="clearTimeout,clearTimeout(e);try{a(e)}catch(t){try{return" a.call(null,e)}catch(t){return a.call(this,e)}}}(e)}}function f(e,t){this.fun="e,this.array=t}function" v(){}r.nexttick="function(e){var" t="new" array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new 0="==e?void" f(e,t)),1!="=c.length||p||l(y)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw" new error("process.binding is not supported")},r.cwd="function(){return"/"},r.chdir=function(e){throw" error("process.chdir supported")},r.umask="function(){return" 0}},function(e,t,n){"use strict";(function(e,t){!function(e,n){if(!e.setimmediate){var i,a,r,o,s,l="1,u={},c=!1,p=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object" process]"="=={}.toString.call(e.process)?i=function(e){t.nextTick(function(){y(e)})}:!function(){if(e.postMessage&&!e.importScripts){var" t="!0,n=e.onmessage;return" e.onmessage="function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((r=new" messagechannel).port1.onmessage="function(e){y(e.data)},i=function(e){r.port2.postMessage(e)}):p&&"onreadystatechange"in" p.createelement("script")?(a="p.documentElement,i=function(e){var" t.data&&0="==t.data.indexOf(o)&&y(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof" e&&(e="new" function(""+e));for(var array(arguments.length-1),n="0;n<t.length;n++)t[n]=arguments[n+1];var" a="{callback:e,args:t};return" u[l]="a,i(l),l++},d.clearImmediate=h}function" h(e){delete u[e]}function y(e){if(c)settimeout(y,0,e);else{var 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{h(e),c="!1}}}}}("undefined"==typeof" self?void 0:e:self)}).call(this,n(4),n(34))},function(e,t,n){"use strict";var i="Function.prototype.apply;function" a(e,t){this._id="e,this._clearFn=t}t.setTimeout=function(){return" a(i.call(settimeout,window,arguments),cleartimeout)},t.setinterval="function(){return" a(i.call(setinterval,window,arguments),clearinterval)},t.cleartimeout="t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var">=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(35),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){"use strict";(function(t){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=setTimeout;function a(){}function r(e){if(!(this instanceof r))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(e,this)}function o(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,r._immediateFn(function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void l(t.promise,e)}s(t.promise,i)}else(1===e._state?s:l)(t.promise,e._value)})):e._deferreds.push(t)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"===(void 0===t?"undefined":n(t))||"function"==typeof t)){var i=t.then;if(t instanceof r)return e._state=3,e._value=t,void u(e);if("function"==typeof i)return void c((a=i,o=t,function(){a.apply(o,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){l(e,t)}var a,o}function l(e,t){e._state=2,e._value=t,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&r._immediateFn(function(){e._handled||r._unhandledRejectionFn(e._value)});for(var t=0,n=e._deferreds.length;t<n;t++)o(e,e._deferreds[t]);e._deferreds=null}function 0="==e.length)throw" c(e,t){var n="!1;try{e(function(e){n||(n=!0,s(t,e))},function(e){n||(n=!0,l(t,e))})}catch(e){if(n)return;n=!0,l(t,e)}}r.prototype.catch=function(e){return" this.then(null,e)},r.prototype.then="function(e,t){var" this.constructor(a);return o(this,new function(e,t,n){this.onfulfilled="function" =="typeof" e?e:null,this.onrejected="function" t?t:null,this.promise="n}(e,t,n)),n},r.prototype.finally=function(e){var" t="this.constructor;return" this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.reject(n)})})},r.all="function(e){return" new r(function(t,i){if(!e||void typeerror("promise.all accepts an array");var a="Array.prototype.slice.call(e);if(0===a.length)return" t([]);var r="a.length;function" o(e,s){try{if(s&&("object"="==(void" s)){var l="s.then;if("function"==typeof" l)return void l.call(s,function(t){o(e,t)},i)}a[e]="s,0==--r&&t(a)}catch(e){i(e)}}for(var" s="0;s<a.length;s++)o(s,a[s])})},r.resolve=function(e){return" e&&"object"="==(void" r(function(t){t(e)})},r.reject="function(e){return" r(function(t,n){n(e)})},r.race="function(e){return" r(function(t,n){for(var i="0,a=e.length;i<a;i++)e[i].then(t,n)})},r._immediateFn="function"==typeof" t&&function(e){t(e)}||function(e){i(e,0)},r._unhandledrejectionfn="function(e){"undefined"!=typeof" console&&console&&console.warn("possible unhandled promise rejection:",e)},e.exports="r}).call(this,n(36).setImmediate)},function(e,t,n){"use" strict";object.defineproperty(t,"__esmodule",{value:!0});var e(e,t){for(var i&&(i.writable="!0),Object.defineProperty(e,i.key,i)}}return" function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a="v(n(37)),r=v(n(0)),o=v(n(3)),s=v(n(18)),l=v(n(17)),u=v(n(13)),c=v(n(12)),p=v(n(11)),d=v(n(9)),h=v(n(8)),y=v(n(7)),f=v(n(6));function" v(e){return e&&e.__esmodule?e:{default:e}}var m="[],g=function(){function" e(t){if(function(e,t){if(!(e instanceof t))throw typeerror("cannot call class as function")}(this,e),this.options="(0,s.default)(t),this.container=this.options.container,this.paused=!0,this.playedPromise=a.default.resolve(),this.mode="normal",this.randomOrder=r.default.randomOrder(this.options.audio.length),this.container.classList.add("aplayer"),this.options.lrcType&&!this.options.fixed&&this.container.classList.add("aplayer-withlrc"),this.options.audio.length">1&&this.container.classList.add("aplayer-withlist"),r.default.isMobile&&this.container.classList.add("aplayer-mobile"),this.arrow=this.container.offsetWidth<=300,this.arrow&&this.container.classList.add("aplayer-arrow"),this.container=this.options.container,2===this.options.lrcType||!0===this.options.lrcType)for(var n="this.container.getElementsByClassName("aplayer-lrc-content"),i=0;i<n.length;i++)this.options.audio[i]&&(this.options.audio[i].lrc=n[i].innerHTML);this.template=new" l.default({container:this.container,options:this.options,randomorder:this.randomorder}),this.options.fixed&&(this.container.classlist.add("aplayer-fixed"),this.template.body.style.width="this.template.body.offsetWidth-18+"px"),this.options.mini&&(this.setMode("mini"),this.template.info.style.display="block"),this.template.info.offsetWidth<200&&this.template.time.classList.add("aplayer-time-narrow"),this.options.lrcType&&(this.lrc=new" p.default({container:this.template.lrc,async:3="==this.options.lrcType,player:this})),this.events=new" y.default,this.storage="new" c.default(this),this.bar="new" u.default(this.template),this.controller="new" d.default(this),this.timer="new" h.default(this),this.list="new" f.default(this),this.initaudio(),this.bindevents(),"random"="==this.options.order?this.list.switch(this.randomOrder[0]):this.list.switch(0),this.options.autoplay&&this.play(),m.push(this)}return" i(e,[{key:"initaudio",value:function(){var e="this;this.audio=document.createElement("audio"),this.audio.preload=this.options.preload;for(var" t="function(t){e.audio.addEventListener(e.events.audioEvents[t],function(n){e.events.trigger(e.events.audioEvents[t],n)})},n=0;n<this.events.audioEvents.length;n++)t(n);this.volume(this.storage.get("volume"),!0)}},{key:"bindEvents",value:function(){var" 0;this.on("error",function(){e.list.audios.length>1?(e.notice("An audio error has occurred, player will skip forward in 2 seconds."),t=setTimeout(function(){e.skipForward(),e.paused||e.play()},2e3)):1===e.list.audios.length&&e.notice("An audio error has occurred.")}),this.events.on("listswitch",function(){t&&clearTimeout(t)}),this.on("ended",function(){"none"===e.options.loop?"list"===e.options.order?e.list.index<e.list.audios.length-1?(e.list.switch((e.list.index+1)%e.list.audios.length),e.play()):(e.list.switch((e.list.index+1)%e.list.audios.length),e.pause()):"random"===e.options.order&&(e.randomOrder.indexOf(e.list.index)<e.randomOrder.length-1?(e.list.switch(e.nextIndex()),e.play()):(e.list.switch(e.nextIndex()),e.pause())):"one"===e.options.loop?(e.list.switch(e.list.index),e.play()):"all"===e.options.loop&&(e.skipForward(),e.play())})}},{key:"setAudio",value:function(e){this.hls&&(this.hls.destroy(),this.hls=null);var t="e.type;this.options.customAudioType&&this.options.customAudioType[t]?"[object" function]"="==Object.prototype.toString.call(this.options.customAudioType[t])?this.options.customAudioType[t](this.audio,e,this):console.error("Illegal" customtype: "+t):(t&&"auto"!="=t||(t=/m3u8(#|\?|$)/i.exec(e.url)?"hls":"normal"),"hls"===t?Hls.isSupported()?(this.hls=new" hls,this.hls.loadsource(e.url),this.hls.attachmedia(this.audio)):this.audio.canplaytype("application x-mpegurl")||this.audio.canplaytype("application vnd.apple.mpegurl")?this.audio.src="e.url:this.notice("Error:" hls is not supported."):"normal"="==t&&(this.audio.src=e.url)),this.seek(0),this.paused||this.audio.play()}},{key:"theme",value:function(){var" e="arguments.length">0&&void 0!==arguments[0]?arguments[0]:this.list.audios[this.list.index].theme||this.options.theme,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.list.index;(!(arguments.length>2&&void 0!==arguments[2])||arguments[2])&&this.list.audios[t]&&(this.list.audios[t].theme=e),this.template.listCurs[t]&&(this.template.listCurs[t].style.backgroundColor=e),t===this.list.index&&(this.template.pic.style.backgroundColor=e,this.template.played.style.background=e,this.template.thumb.style.background=e,this.template.volume.style.background=e)}},{key:"seek",value:function(e){e=Math.max(e,0),e=Math.min(e,this.duration),this.audio.currentTime=e,this.bar.set("played",e/this.duration,"width"),this.template.ptime.innerHTML=r.default.secondToTime(e)}},{key:"setUIPlaying",value:function(){var e=this;if(this.paused&&(this.paused=!1,this.template.button.classList.remove("aplayer-play"),this.template.button.classList.add("aplayer-pause"),this.template.button.innerHTML="",setTimeout(function(){e.template.button.innerHTML=o.default.pause},100),this.template.skipPlayButton.innerHTML=o.default.pause),this.timer.enable("loading"),this.options.mutex)for(var t=0;t<m.length;t++)this!==m[t]&&m[t].pause()}},{key:"play",value:function(){var e="this;this.setUIPlaying();var" t="this.audio.play();t&&t.catch(function(t){console.warn(t),"NotAllowedError"===t.name&&e.setUIPaused()})}},{key:"setUIPaused",value:function(){var">=.95?this.template.volumeButton.innerHTML=o.default.volumeUp:this.volume()>0?this.template.volumeButton.innerHTML=o.default.volumeDown:this.template.volumeButton.innerHTML=o.default.volumeOff}},{key:"volume",value:function(e,t){return e=parseFloat(e),isNaN(e)||(e=Math.max(e,0),e=Math.min(e,1),this.bar.set("volume",e,"height"),t||this.storage.set("volume",e),this.audio.volume=e,this.audio.muted&&(this.audio.muted=!1),this.switchVolumeIcon()),this.audio.muted?0:this.audio.volume}},{key:"on",value:function(e,t){this.events.on(e,t)}},{key:"toggle",value:function(){this.template.button.classList.contains("aplayer-play")?this.play():this.template.button.classList.contains("aplayer-pause")&&this.pause()}},{key:"switchAudio",value:function(e){this.list.switch(e)}},{key:"addAudio",value:function(e){this.list.add(e)}},{key:"removeAudio",value:function(e){this.list.remove(e)}},{key:"destroy",value:function(){m.splice(m.indexOf(this),1),this.pause(),this.container.innerHTML="",this.audio.src="",this.timer.destroy(),this.events.trigger("destroy")}},{key:"setMode",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"normal";this.mode=e,"mini"===e?this.container.classList.add("aplayer-narrow"):"normal"===e&&this.container.classList.remove("aplayer-narrow")}},{key:"notice",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.8;this.template.notice.innerHTML=e,this.template.notice.style.opacity=i,this.noticeTime&&clearTimeout(this.noticeTime),this.events.trigger("noticeshow",{text:e}),n&&(this.noticeTime=setTimeout(function(){t.template.notice.style.opacity=0,t.events.trigger("noticehide")},n))}},{key:"prevIndex",value:function(){if(!(this.list.audios.length>1))return 0;if("list"===this.options.order)return this.list.index-1<0?this.list.audios.length-1:this.list.index-1;if("random"===this.options.order){var 0="==e?this.randomOrder[this.randomOrder.length-1]:this.randomOrder[e-1]}}},{key:"nextIndex",value:function(){if(!(this.list.audios.length" e="this.randomOrder.indexOf(this.list.index);return">1))return 0;if("list"===this.options.order)return(this.list.index+1)%this.list.audios.length;if("random"===this.options.order){var e=this.randomOrder.indexOf(this.list.index);return e===this.randomOrder.length-1?this.randomOrder[0]:this.randomOrder[e+1]}}},{key:"skipBack",value:function(){this.list.switch(this.prevIndex())}},{key:"skipForward",value:function(){this.list.switch(this.nextIndex())}},{key:"duration",get:function(){return isNaN(this.audio.duration)?0:this.audio.duration}}],[{key:"version",get:function(){return"1.10.1"}}]),e}();t.default=g},,function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(40);var i,a=n(38),r=(i=a)&&i.__esModule?i:{default:i};console.log("\n %c APlayer v1.10.1 af84efb %c http://aplayer.js.org \n","color: #fadfa3; background: #030307; padding:5px 0;","background: #fadfa3; padding:5px 0;"),t.default=r.default}]).default});//# sourceMappingURL=APlayer.min.js.map</0?this.list.audios.length-1:this.list.index-1;if("random"===this.options.order){var></m.length;t++)this!==m[t]&&m[t].pause()}},{key:"play",value:function(){var></e.list.audios.length-1?(e.list.switch((e.list.index+1)%e.list.audios.length),e.play()):(e.list.switch((e.list.index+1)%e.list.audios.length),e.pause()):"random"===e.options.order&&(e.randomOrder.indexOf(e.list.index)<e.randomOrder.length-1?(e.list.switch(e.nextIndex()),e.play()):(e.list.switch(e.nextIndex()),e.pause())):"one"===e.options.loop?(e.list.switch(e.list.index),e.play()):"all"===e.options.loop&&(e.skipForward(),e.play())})}},{key:"setAudio",value:function(e){this.hls&&(this.hls.destroy(),this.hls=null);var></=300,this.arrow&&this.container.classList.add("aplayer-arrow"),this.container=this.options.container,2===this.options.lrcType||!0===this.options.lrcType)for(var></n;t++)o(e,e._deferreds[t]);e._deferreds=null}function></arguments.length;n++)t[n-1]=arguments[n];c.push(new></t;)u&&u[d].run();d=-1,t=c.length}u=null,p=!1,function(e){if(a===clearTimeout)return></ol",a.listMaxHeight&&(t+='></div></ol",a.listMaxHeight&&(t+='></t.length;a++){switch(t.charCodeAt(a)){case></s;l++){var></300||304===n.status?t.parsed[e]=t.parse(n.responseText):(t.player.notice("LRC></this.current[t+1][0])&&(this.index=t,this.container.style.transform="translateY("+16*-this.index+"px)",this.container.style.webkitTransform="translateY("+16*-this.index+"px)",this.container.getElementsByClassName("aplayer-lrc-current")[0].classList.remove("aplayer-lrc-current"),this.container.getElementsByTagName("p")[t].classList.add("aplayer-lrc-current"))}},{key:"switch",value:function(e){var></this.current.length;t++)e></this.current[this.index][0]||!this.current[this.index+1]||e></t.length;n++){var></p",0===n&&(t+='></t.length;n++){var></t.length;n++)t[n].getElementsByClassName("aplayer-list-index")[0].textContent=n;1===this.audios.length&&this.player.container.classList.remove("aplayer-withlist"),this.player.template.listCurs=this.player.container.querySelectorAll(".aplayer-list-cur")}else></t.length;n++){var></.5?4*a*a*a:(a-1)*(2*a-2)*(2*a-2)+1);var></e.length;t++)n[t]=e[t];return></10?"0"+e:""+e}).join(":")},getElementViewLeft:function(e){var>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/get-iterator.js"/>
      <url>/node_modules/babel-runtime/core-js/get-iterator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/is-iterable.js"/>
      <url>/node_modules/babel-runtime/core-js/is-iterable.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/map.js"/>
      <url>/node_modules/babel-runtime/core-js/map.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/map"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/observable.js"/>
      <url>/node_modules/babel-runtime/core-js/observable.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/observable"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/promise.js"/>
      <url>/node_modules/babel-runtime/core-js/promise.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/set-immediate.js"/>
      <url>/node_modules/babel-runtime/core-js/set-immediate.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/set-immediate"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/set.js"/>
      <url>/node_modules/babel-runtime/core-js/set.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/set"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/weak-map.js"/>
      <url>/node_modules/babel-runtime/core-js/weak-map.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/weak-map"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/weak-set.js"/>
      <url>/node_modules/babel-runtime/core-js/weak-set.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/weak-set"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/regenerator/index.js"/>
      <url>/node_modules/babel-runtime/regenerator/index.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("regenerator-runtime");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/async-generator.js"/>
      <url>/node_modules/babel-runtime/helpers/async-generator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./asyncGenerator.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/async-generator-delegate.js"/>
      <url>/node_modules/babel-runtime/helpers/async-generator-delegate.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./asyncGeneratorDelegate.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/async-iterator.js"/>
      <url>/node_modules/babel-runtime/helpers/async-iterator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./asyncIterator.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/asyncGenerator.js"/>
      <url>/node_modules/babel-runtime/helpers/asyncGenerator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);var _promise = require("../core-js/promise");var _promise2 = _interopRequireDefault(_promise);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function () {  function AwaitValue(value) {    this.value = value;  }  function AsyncGenerator(gen) {    var front, back;    function send(key, arg) {      return new _promise2.default(function (resolve, reject) {        var request = {          key: key,          arg: arg,          resolve: resolve,          reject: reject,          next: null        };        if (back) {          back = back.next = request;        } else {          front = back = request;          resume(key, arg);        }      });    }    function resume(key, arg) {      try {        var result = gen[key](arg);        var value = result.value;        if (value instanceof AwaitValue) {          _promise2.default.resolve(value.value).then(function (arg) {            resume("next", arg);          }, function (arg) {            resume("throw", arg);          });        } else {          settle(result.done ? "return" : "normal", result.value);        }      } catch (err) {        settle("throw", err);      }    }    function settle(type, value) {      switch (type) {        case "return":          front.resolve({            value: value,            done: true          });          break;        case "throw":          front.reject(value);          break;        default:          front.resolve({            value: value,            done: false          });          break;      }      front = front.next;      if (front) {        resume(front.key, front.arg);      } else {        back = null;      }    }    this._invoke = send;    if (typeof gen.return !== "function") {      this.return = undefined;    }  }  if (typeof _symbol2.default === "function" && _symbol2.default.asyncIterator) {    AsyncGenerator.prototype[_symbol2.default.asyncIterator] = function () {      return this;    };  }  AsyncGenerator.prototype.next = function (arg) {    return this._invoke("next", arg);  };  AsyncGenerator.prototype.throw = function (arg) {    return this._invoke("throw", arg);  };  AsyncGenerator.prototype.return = function (arg) {    return this._invoke("return", arg);  };  return {    wrap: function wrap(fn) {      return function () {        return new AsyncGenerator(fn.apply(this, arguments));      };    },    await: function _await(value) {      return new AwaitValue(value);    }  };}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/async-to-generator.js"/>
      <url>/node_modules/babel-runtime/helpers/async-to-generator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./asyncToGenerator.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/asyncGeneratorDelegate.js"/>
      <url>/node_modules/babel-runtime/helpers/asyncGeneratorDelegate.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _iterator = require("../core-js/symbol/iterator");var _iterator2 = _interopRequireDefault(_iterator);var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);var _promise = require("../core-js/promise");var _promise2 = _interopRequireDefault(_promise);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (inner, awaitWrap) {  var iter = {},      waiting = false;  function pump(key, value) {    waiting = true;    value = new _promise2.default(function (resolve) {      resolve(inner[key](value));    });    return {      done: false,      value: awaitWrap(value)    };  }  ;  if (typeof _symbol2.default === "function" && _iterator2.default) {    iter[_iterator2.default] = function () {      return this;    };  }  iter.next = function (value) {    if (waiting) {      waiting = false;      return value;    }    return pump("next", value);  };  if (typeof inner.throw === "function") {    iter.throw = function (value) {      if (waiting) {        waiting = false;        throw value;      }      return pump("throw", value);    };  }  if (typeof inner.return === "function") {    iter.return = function (value) {      return pump("return", value);    };  }  return iter;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/asyncIterator.js"/>
      <url>/node_modules/babel-runtime/helpers/asyncIterator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _getIterator2 = require("../core-js/get-iterator");var _getIterator3 = _interopRequireDefault(_getIterator2);var _iterator = require("../core-js/symbol/iterator");var _iterator2 = _interopRequireDefault(_iterator);var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (iterable) {  if (typeof _symbol2.default === "function") {    if (_symbol2.default.asyncIterator) {      var method = iterable[_symbol2.default.asyncIterator];      if (method != null) return method.call(iterable);    }    if (_iterator2.default) {      return (0, _getIterator3.default)(iterable);    }  }  throw new TypeError("Object is not async iterable");};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/class-call-check.js"/>
      <url>/node_modules/babel-runtime/helpers/class-call-check.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./classCallCheck.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/classCallCheck.js"/>
      <url>/node_modules/babel-runtime/helpers/classCallCheck.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (instance, Constructor) {  if (!(instance instanceof Constructor)) {    throw new TypeError("Cannot call a class as a function");  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/asyncToGenerator.js"/>
      <url>/node_modules/babel-runtime/helpers/asyncToGenerator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _promise = require("../core-js/promise");var _promise2 = _interopRequireDefault(_promise);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (fn) {  return function () {    var gen = fn.apply(this, arguments);    return new _promise2.default(function (resolve, reject) {      function step(key, arg) {        try {          var info = gen[key](arg);          var value = info.value;        } catch (error) {          reject(error);          return;        }        if (info.done) {          resolve(value);        } else {          return _promise2.default.resolve(value).then(function (value) {            step("next", value);          }, function (err) {            step("throw", err);          });        }      }      return step("next");    });  };};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/create-class.js"/>
      <url>/node_modules/babel-runtime/helpers/create-class.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./createClass.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/createClass.js"/>
      <url>/node_modules/babel-runtime/helpers/createClass.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _defineProperty = require("../core-js/object/define-property");var _defineProperty2 = _interopRequireDefault(_defineProperty);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function () {  function defineProperties(target, props) {    for (var i = 0; i < props.length; i++) {      var descriptor = props[i];      descriptor.enumerable = descriptor.enumerable || false;      descriptor.configurable = true;      if ("value" in descriptor) descriptor.writable = true;      (0, _defineProperty2.default)(target, descriptor.key, descriptor);    }  }  return function (Constructor, protoProps, staticProps) {    if (protoProps) defineProperties(Constructor.prototype, protoProps);    if (staticProps) defineProperties(Constructor, staticProps);    return Constructor;  };}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/defaults.js"/>
      <url>/node_modules/babel-runtime/helpers/defaults.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _defineProperty = require("../core-js/object/define-property");var _defineProperty2 = _interopRequireDefault(_defineProperty);var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);var _getOwnPropertyNames = require("../core-js/object/get-own-property-names");var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (obj, defaults) {  var keys = (0, _getOwnPropertyNames2.default)(defaults);  for (var i = 0; i < keys.length; i++) {    var key = keys[i];    var value = (0, _getOwnPropertyDescriptor2.default)(defaults, key);    if (value && value.configurable && obj[key] === undefined) {      (0, _defineProperty2.default)(obj, key, value);    }  }  return obj;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/define-enumerable-properties.js"/>
      <url>/node_modules/babel-runtime/helpers/define-enumerable-properties.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./defineEnumerableProperties.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/define-property.js"/>
      <url>/node_modules/babel-runtime/helpers/define-property.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./defineProperty.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/defineEnumerableProperties.js"/>
      <url>/node_modules/babel-runtime/helpers/defineEnumerableProperties.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _defineProperty = require("../core-js/object/define-property");var _defineProperty2 = _interopRequireDefault(_defineProperty);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (obj, descs) {  for (var key in descs) {    var desc = descs[key];    desc.configurable = desc.enumerable = true;    if ("value" in desc) desc.writable = true;    (0, _defineProperty2.default)(obj, key, desc);  }  return obj;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/get.js"/>
      <url>/node_modules/babel-runtime/helpers/get.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _getPrototypeOf = require("../core-js/object/get-prototype-of");var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function get(object, property, receiver) {  if (object === null) object = Function.prototype;  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);  if (desc === undefined) {    var parent = (0, _getPrototypeOf2.default)(object);    if (parent === null) {      return undefined;    } else {      return get(parent, property, receiver);    }  } else if ("value" in desc) {    return desc.value;  } else {    var getter = desc.get;    if (getter === undefined) {      return undefined;    }    return getter.call(receiver);  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/defineProperty.js"/>
      <url>/node_modules/babel-runtime/helpers/defineProperty.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _defineProperty = require("../core-js/object/define-property");var _defineProperty2 = _interopRequireDefault(_defineProperty);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (obj, key, value) {  if (key in obj) {    (0, _defineProperty2.default)(obj, key, {      value: value,      enumerable: true,      configurable: true,      writable: true    });  } else {    obj[key] = value;  }  return obj;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/inherits.js"/>
      <url>/node_modules/babel-runtime/helpers/inherits.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _setPrototypeOf = require("../core-js/object/set-prototype-of");var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);var _create = require("../core-js/object/create");var _create2 = _interopRequireDefault(_create);var _typeof2 = require("../helpers/typeof");var _typeof3 = _interopRequireDefault(_typeof2);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (subClass, superClass) {  if (typeof superClass !== "function" && superClass !== null) {    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));  }  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {    constructor: {      value: subClass,      enumerable: false,      writable: true,      configurable: true    }  });  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/extends.js"/>
      <url>/node_modules/babel-runtime/helpers/extends.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _assign = require("../core-js/object/assign");var _assign2 = _interopRequireDefault(_assign);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = _assign2.default || function (target) {  for (var i = 1; i < arguments.length; i++) {    var source = arguments[i];    for (var key in source) {      if (Object.prototype.hasOwnProperty.call(source, key)) {        target[key] = source[key];      }    }  }  return target;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/instanceof.js"/>
      <url>/node_modules/babel-runtime/helpers/instanceof.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _hasInstance = require("../core-js/symbol/has-instance");var _hasInstance2 = _interopRequireDefault(_hasInstance);var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (left, right) {  if (right != null && typeof _symbol2.default !== "undefined" && right[_hasInstance2.default]) {    return right[_hasInstance2.default](left);  } else {    return left instanceof right;  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/interop-require-default.js"/>
      <url>/node_modules/babel-runtime/helpers/interop-require-default.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./interopRequireDefault.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/interop-require-wildcard.js"/>
      <url>/node_modules/babel-runtime/helpers/interop-require-wildcard.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./interopRequireWildcard.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/interopRequireDefault.js"/>
      <url>/node_modules/babel-runtime/helpers/interopRequireDefault.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (obj) {  return obj && obj.__esModule ? obj : {    default: obj  };};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/interopRequireWildcard.js"/>
      <url>/node_modules/babel-runtime/helpers/interopRequireWildcard.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (obj) {  if (obj && obj.__esModule) {    return obj;  } else {    var newObj = {};    if (obj != null) {      for (var key in obj) {        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];      }    }    newObj.default = obj;    return newObj;  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/jsx.js"/>
      <url>/node_modules/babel-runtime/helpers/jsx.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _for = require("../core-js/symbol/for");var _for2 = _interopRequireDefault(_for);var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function () {  var REACT_ELEMENT_TYPE = typeof _symbol2.default === "function" && _for2.default && (0, _for2.default)("react.element") || 0xeac7;  return function createRawReactElement(type, props, key, children) {    var defaultProps = type && type.defaultProps;    var childrenLength = arguments.length - 3;    if (!props && childrenLength !== 0) {      props = {};    }    if (props && defaultProps) {      for (var propName in defaultProps) {        if (props[propName] === void 0) {          props[propName] = defaultProps[propName];        }      }    } else if (!props) {      props = defaultProps || {};    }    if (childrenLength === 1) {      props.children = children;    } else if (childrenLength > 1) {      var childArray = Array(childrenLength);      for (var i = 0; i < childrenLength; i++) {        childArray[i] = arguments[i + 3];      }      props.children = childArray;    }    return {      $$typeof: REACT_ELEMENT_TYPE,      type: type,      key: key === undefined ? null : '' + key,      ref: null,      props: props,      _owner: null    };  };}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/new-arrow-check.js"/>
      <url>/node_modules/babel-runtime/helpers/new-arrow-check.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./newArrowCheck.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/object-destructuring-empty.js"/>
      <url>/node_modules/babel-runtime/helpers/object-destructuring-empty.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./objectDestructuringEmpty.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/newArrowCheck.js"/>
      <url>/node_modules/babel-runtime/helpers/newArrowCheck.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (innerThis, boundThis) {  if (innerThis !== boundThis) {    throw new TypeError("Cannot instantiate an arrow function");  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/object-without-properties.js"/>
      <url>/node_modules/babel-runtime/helpers/object-without-properties.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./objectWithoutProperties.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/objectDestructuringEmpty.js"/>
      <url>/node_modules/babel-runtime/helpers/objectDestructuringEmpty.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (obj) {  if (obj == null) throw new TypeError("Cannot destructure undefined");};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/objectWithoutProperties.js"/>
      <url>/node_modules/babel-runtime/helpers/objectWithoutProperties.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (obj, keys) {  var target = {};  for (var i in obj) {    if (keys.indexOf(i) >= 0) continue;    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;    target[i] = obj[i];  }  return target;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/possible-constructor-return.js"/>
      <url>/node_modules/babel-runtime/helpers/possible-constructor-return.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./possibleConstructorReturn.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/possibleConstructorReturn.js"/>
      <url>/node_modules/babel-runtime/helpers/possibleConstructorReturn.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _typeof2 = require("../helpers/typeof");var _typeof3 = _interopRequireDefault(_typeof2);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (self, call) {  if (!self) {    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");  }  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/self-global.js"/>
      <url>/node_modules/babel-runtime/helpers/self-global.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./selfGlobal.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/selfGlobal.js"/>
      <url>/node_modules/babel-runtime/helpers/selfGlobal.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = typeof global === "undefined" ? self : global;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/set.js"/>
      <url>/node_modules/babel-runtime/helpers/set.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _getPrototypeOf = require("../core-js/object/get-prototype-of");var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function set(object, property, value, receiver) {  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);  if (desc === undefined) {    var parent = (0, _getPrototypeOf2.default)(object);    if (parent !== null) {      set(parent, property, value, receiver);    }  } else if ("value" in desc && desc.writable) {    desc.value = value;  } else {    var setter = desc.set;    if (setter !== undefined) {      setter.call(receiver, value);    }  }  return value;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/sliced-to-array-loose.js"/>
      <url>/node_modules/babel-runtime/helpers/sliced-to-array-loose.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./slicedToArrayLoose.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/sliced-to-array.js"/>
      <url>/node_modules/babel-runtime/helpers/sliced-to-array.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./slicedToArray.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/slicedToArray.js"/>
      <url>/node_modules/babel-runtime/helpers/slicedToArray.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _isIterable2 = require("../core-js/is-iterable");var _isIterable3 = _interopRequireDefault(_isIterable2);var _getIterator2 = require("../core-js/get-iterator");var _getIterator3 = _interopRequireDefault(_getIterator2);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function () {  function sliceIterator(arr, i) {    var _arr = [];    var _n = true;    var _d = false;    var _e = undefined;    try {      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {        _arr.push(_s.value);        if (i && _arr.length === i) break;      }    } catch (err) {      _d = true;      _e = err;    } finally {      try {        if (!_n && _i["return"]) _i["return"]();      } finally {        if (_d) throw _e;      }    }    return _arr;  }  return function (arr, i) {    if (Array.isArray(arr)) {      return arr;    } else if ((0, _isIterable3.default)(Object(arr))) {      return sliceIterator(arr, i);    } else {      throw new TypeError("Invalid attempt to destructure non-iterable instance");    }  };}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/slicedToArrayLoose.js"/>
      <url>/node_modules/babel-runtime/helpers/slicedToArrayLoose.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _getIterator2 = require("../core-js/get-iterator");var _getIterator3 = _interopRequireDefault(_getIterator2);var _isIterable2 = require("../core-js/is-iterable");var _isIterable3 = _interopRequireDefault(_isIterable2);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (arr, i) {  if (Array.isArray(arr)) {    return arr;  } else if ((0, _isIterable3.default)(Object(arr))) {    var _arr = [];    for (var _iterator = (0, _getIterator3.default)(arr), _step; !(_step = _iterator.next()).done;) {      _arr.push(_step.value);      if (i && _arr.length === i) break;    }    return _arr;  } else {    throw new TypeError("Invalid attempt to destructure non-iterable instance");  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/tagged-template-literal-loose.js"/>
      <url>/node_modules/babel-runtime/helpers/tagged-template-literal-loose.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./taggedTemplateLiteralLoose.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/taggedTemplateLiteral.js"/>
      <url>/node_modules/babel-runtime/helpers/taggedTemplateLiteral.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _defineProperties = require("../core-js/object/define-properties");var _defineProperties2 = _interopRequireDefault(_defineProperties);var _freeze = require("../core-js/object/freeze");var _freeze2 = _interopRequireDefault(_freeze);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (strings, raw) {  return (0, _freeze2.default)((0, _defineProperties2.default)(strings, {    raw: {      value: (0, _freeze2.default)(raw)    }  }));};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/tagged-template-literal.js"/>
      <url>/node_modules/babel-runtime/helpers/tagged-template-literal.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./taggedTemplateLiteral.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/taggedTemplateLiteralLoose.js"/>
      <url>/node_modules/babel-runtime/helpers/taggedTemplateLiteralLoose.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (strings, raw) {  strings.raw = raw;  return strings;};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/temporal-ref.js"/>
      <url>/node_modules/babel-runtime/helpers/temporal-ref.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./temporalRef.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/temporal-undefined.js"/>
      <url>/node_modules/babel-runtime/helpers/temporal-undefined.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./temporalUndefined.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/temporalRef.js"/>
      <url>/node_modules/babel-runtime/helpers/temporalRef.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = function (val, name, undef) {  if (val === undef) {    throw new ReferenceError(name + " is not defined - temporal dead zone");  } else {    return val;  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/temporalUndefined.js"/>
      <url>/node_modules/babel-runtime/helpers/temporalUndefined.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;exports.default = {};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/to-array.js"/>
      <url>/node_modules/babel-runtime/helpers/to-array.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./toArray.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/toArray.js"/>
      <url>/node_modules/babel-runtime/helpers/toArray.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _from = require("../core-js/array/from");var _from2 = _interopRequireDefault(_from);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (arr) {  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/to-consumable-array.js"/>
      <url>/node_modules/babel-runtime/helpers/to-consumable-array.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = require("./toConsumableArray.js");]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/toConsumableArray.js"/>
      <url>/node_modules/babel-runtime/helpers/toConsumableArray.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _from = require("../core-js/array/from");var _from2 = _interopRequireDefault(_from);function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = function (arr) {  if (Array.isArray(arr)) {    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {      arr2[i] = arr[i];    }    return arr2;  } else {    return (0, _from2.default)(arr);  }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/helpers/typeof.js"/>
      <url>/node_modules/babel-runtime/helpers/typeof.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";exports.__esModule = true;var _iterator = require("../core-js/symbol/iterator");var _iterator2 = _interopRequireDefault(_iterator);var _symbol = require("../core-js/symbol");var _symbol2 = _interopRequireDefault(_symbol);var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {  return typeof obj === "undefined" ? "undefined" : _typeof(obj);} : function (obj) {  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/tag/playerList.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/tag/playerList.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";Object.defineProperty(exports, "__esModule", {  value: true});var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _base = require("./base");var _constant = require("../../common/constant");function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }var APlayerListTag = function (_BaseTag) {  _inherits(APlayerListTag, _BaseTag);  function APlayerListTag(hexo, args, pid) {    _classCallCheck(this, APlayerListTag);    var _this = _possibleConstructorReturn(this, (APlayerListTag.__proto__ || Object.getPrototypeOf(APlayerListTag)).call(this, hexo, args, pid));    _this.settings = _this.parse(args);    return _this;  }  _createClass(APlayerListTag, [{    key: "parse",    value: function parse(options) {      var _this2 = this;      var settings = Object.assign({        narrow: false,        autoplay: false,        showlrc: 0      }, JSON.parse(options));      settings.music.forEach(function (info) {        info.url = _this2.processUrl(info.url);        info.pic = info.pic ? _this2.processUrl(info.pic) : '';      });      return settings;    }  }, {    key: "generate",    value: function generate() {      var settings = JSON.stringify(this.settings);      return "\n        <div id="\""" + this.id "\" class="\"aplayer" " _constant.aplayer_tag_marker style="\"margin-bottom:" 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = " + settings + ";\n\t\t\t\t  options.element = document.getElementById(\"" + this.id + "\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>";    }  }]);  return APlayerListTag;}(_base.BaseTag);exports.default = APlayerListTag;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/tag/playerLyric.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/tag/playerLyric.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>"use strict";Object.defineProperty(exports, "__esModule", {  value: true});var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _base = require("./base");var _constant = require("../../common/constant");var _util = require("../../common/util");function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }var APlayerLyricTag = function (_BaseTag) {  _inherits(APlayerLyricTag, _BaseTag);  function APlayerLyricTag(hexo, args, pid, lyrics) {    _classCallCheck(this, APlayerLyricTag);    var _this = _possibleConstructorReturn(this, (APlayerLyricTag.__proto__ || Object.getPrototypeOf(APlayerLyricTag)).call(this, hexo, args, pid));    _this.settings = _this.parse(args);    _this.lyrics = lyrics;    return _this;  }  _createClass(APlayerLyricTag, [{    key: "parse",    value: function parse(options) {      var _this2 = this;      var settings = Object.assign({}, _constant.PLAYER_TAG_OPTION);      var _options = _slicedToArray(options, 3);      settings.title = _options[0];      settings.author = _options[1];      settings.url = _options[2];      var optionalArgs = options.slice(3);      optionalArgs.forEach(function (value, index) {        switch (true) {          case value === 'narrow':            settings.narrow = true;            break;          case value === 'autoplay':            settings.autoplay = true;            break;          case /^width:/.test(value):            settings.width = value + ';';            break;          case index === 0:            settings.pic = _this2.processUrl(value);            break;          default:            (0, _util.throwError)("Unrecognized tag argument(" + (index + 1) + "): " + value);        }      });      settings.width = settings.narrow ? '' : settings.width;      return settings;    }  }, {    key: "generate",    value: function generate() {      var _settings = this.settings,          title = _settings.title,          author = _settings.author,          url = _settings.url,          narrow = _settings.narrow,          pic = _settings.pic,          autoplay = _settings.autoplay,          width = _settings.width;      return "<div id="\""" + this.id "\" class="\"aplayer" " _constant.aplayer_tag_marker style="\"margin-bottom:" 20px;" width>\n\t\t\t\t<pre class="\"aplayer-lrc-content\"">" + this.lyrics + "</pre>\n\t\t\t</div>\n\t\t\t<script>\n\t\t\t\tvar ap = new APlayer({\n\t\t\t\t\telement: document.getElementById(\"" + this.id + "\"),\n\t\t\t\t\tnarrow: " + narrow + ",\n\t\t\t\t\tautoplay: " + autoplay + ",\n\t\t\t\t\tshowlrc: 2,\n\t\t\t\t\tmusic: {\n\t\t\t\t\t\ttitle: \"" + title + "\",\n\t\t\t\t\t\tauthor: \"" + author + "\",\n\t\t\t\t\t\turl: \"" + url + "\",\n\t\t\t\t\t\tpic: \"" + pic + "\",\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\twindow.aplayers || (window.aplayers = []);\n\t\t\t\twindow.aplayers.push(ap);\n\t\t\t</script>";    }  }]);  return APlayerLyricTag;}(_base.BaseTag);exports.default = APlayerLyricTag;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/tag/base.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/tag/base.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});exports.BaseTag = undefined;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _url = require('url');var _url2 = _interopRequireDefault(_url);var _util = require('../../common/util');function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }var BaseTag = exports.BaseTag = function () {  /*    args: Tag arguments    id: Instance ID     pid: Post ID  */  function BaseTag(hexo, args, pid) {    _classCallCheck(this, BaseTag);    this.config = hexo.config.aplayer || {};    this.pid = pid;    this.id = 'aplayer-' + (0, _util.generateRandomString)(8);    this.hexo = hexo;  }  _createClass(BaseTag, [{    key: 'processUrl',    value: function processUrl(url) {      if (/^https?:\/\/|^\//.test(url)) {        return url;      }      var PostAsset = this.hexo.model('PostAsset');      var asset = PostAsset.findOne({ post: this.pid, slug: url });      if (!asset) (0, _util.throwError)('Specified asset file not found (' + url + ')');      return _url2.default.resolve(this.hexo.config.root, asset.path);    }  }, {    key: 'parse',    value: function parse() {      (0, _util.throwError)("Unimplemented method: parse");    }  }, {    key: 'generate',    value: function generate() {      (0, _util.throwError)('Unimplemented method: generate');    }  }]);  return BaseTag;}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/tag/playerMeting.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/tag/playerMeting.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {  value: true});var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _constant = require('../../common/constant');var _util = require('../../common/util');var _base = require('./base');function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }var MetingTag = function (_BaseTag) {  _inherits(MetingTag, _BaseTag);  function MetingTag(hexo, args, pid) {    _classCallCheck(this, MetingTag);    var _this = _possibleConstructorReturn(this, (MetingTag.__proto__ || Object.getPrototypeOf(MetingTag)).call(this, hexo, args, pid));    _this.settings = _this.parse(args);    return _this;  }  _createClass(MetingTag, [{    key: 'parse',    value: function parse(options) {      var settings = Object.assign({}, _constant.METING_TAG_OPTION);      var _options = _slicedToArray(options, 3);      settings.id = _options[0];      settings.server = _options[1];      settings.type = _options[2];      var optionalArgs = options.slice(3);      optionalArgs.forEach(function (option, index) {        switch (true) {          case option === 'autoplay':            settings.autoplay = true;            break;          case option === 'fixed':            settings.fixed = true;            break;          case option === 'mini':            settings.mini = true;            break;          case option.startsWith('loop:'):            settings.loop = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('order:'):            settings.order = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('volume:'):            settings.volume = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('lrctype:'):            settings.lrctype = (0, _util.extractOptionValue)(option);            break;          case option === 'listfolded':            settings.listfolded = true;            break;          case option.startsWith('storagename:'):            settings.storagename = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('mutex:'):            settings.mutex = (0, _util.extractOptionValue)(option) === 'true';            break;          case option.startsWith('mode:'):            settings.mode = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('listmaxheight:'):            settings.listmaxheight = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('preload:'):            settings.preload = (0, _util.extractOptionValue)(option);            break;          case option.startsWith('theme:'):            settings.theme = (0, _util.extractOptionValue)(option);            break;          default:            (0, _util.throwError)('Unrecognized tag argument(' + (index + 1) + '): ' + value);        }      });      return settings;    }  }, {    key: 'generate',    value: function generate() {      var settingLiteral = '';      Object.entries(this.settings).forEach(function (_ref) {        var _ref2 = _slicedToArray(_ref, 2),            key = _ref2[0],            value = _ref2[1];        settingLiteral += ' data-' + key + '="' + value + '"';      });      return '\n    <div id="' + this.id + '" class="aplayer ' + _constant.APLAYER_TAG_MARKER + ' ' + _constant.METING_TAG_MARKER + '" \n ' + settingliteral '\n></div>';    }  }]);  return MetingTag;}(_base.BaseTag);exports.default = MetingTag;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/hexo-tag-aplayer/lib/tag/player.js"/>
      <url>/node_modules/hexo-tag-aplayer/lib/tag/player.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>'use strict';Object.defineProperty(exports, "__esModule", {    value: true});var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();var _hexoFs = require('hexo-fs');var _hexoFs2 = _interopRequireDefault(_hexoFs);var _path2 = require('path');var _path3 = _interopRequireDefault(_path2);var _base = require('./base');var _constant = require('../../common/constant');var _util = require('../../common/util');function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }var APlayerTag = function (_BaseTag) {    _inherits(APlayerTag, _BaseTag);    function APlayerTag(hexo, args, pid) {        _classCallCheck(this, APlayerTag);        var _this = _possibleConstructorReturn(this, (APlayerTag.__proto__ || Object.getPrototypeOf(APlayerTag)).call(this, hexo, args, pid));        _this.settings = _this.parse(args);        return _this;    }    _createClass(APlayerTag, [{        key: 'parse',        value: function parse(options) {            var _this2 = this;            var settings = Object.assign({}, _constant.PLAYER_TAG_OPTION);            var _options = _slicedToArray(options, 3);            settings.title = _options[0];            settings.author = _options[1];            settings.url = _options[2];            var optionalArgs = options.slice(3);            optionalArgs.forEach(function (value, index) {                switch (true) {                    case value === 'narrow':                        settings.narrow = true;                        break;                    case value === 'autoplay':                        settings.autoplay = true;                        break;                    case /^lrc:/.test(value):                        settings.lrcOption = 1;                        settings.lrcPath = (0, _util.extractOptionValue)(value);                        break;                    case /^width:/.test(value):                        settings.width = value + ';';                        break;                    case index === 0:                        settings.pic = _this2.processUrl(value);                        break;                    default:                        (0, _util.throwError)('Unrecognized tag argument(' + (index + 1) + '): ' + value);                }            });            settings.width = settings.narrow ? '' : settings.width;            return settings;        }    }, {        key: 'generate',        value: function generate() {            var hexo = this.hexo;            var content = '';            var _settings = this.settings,                title = _settings.title,                author = _settings.author,                url = _settings.url,                narrow = _settings.narrow,                pic = _settings.pic,                autoplay = _settings.autoplay,                lrcOption = _settings.lrcOption,                lrcPath = _settings.lrcPath,                width = _settings.width;            if (lrcOption) {                if (!/^https?/.test(lrcPath)) {                    var PostAsset = hexo.database._models.PostAsset;                    var _path = _path3.default.join(hexo.base_dir, PostAsset.findOne({ post: this.pid, slug: lrcPath })._id);                    content = _hexoFs2.default.readFileSync(_path);                    lrcOption = 2;                } else {                    lrcOption = 3;                }            }            return '\n        <div id="' + this.id + '" class="aplayer ' + _constant.APLAYER_TAG_MARKER + '" style="margin-bottom: 20px;' + width + '">\n            <pre class="aplayer-lrc-content">' + content + '</pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById("' + this.id + '"),\n            narrow: ' + narrow + ',\n            autoplay: ' + autoplay + ',\n            showlrc: ' + lrcOption + ',\n            music: {\n              title: "' + title + '",\n              author: "' + author + '",\n              url: "' + url + '",\n              pic: "' + pic + '",\n              lrc: "' + lrcPath + '"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>';        }    }]);    return APlayerTag;}(_base.BaseTag);exports.default = APlayerTag;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/error/is-error.js"/>
      <url>/node_modules/babel-runtime/core-js/error/is-error.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/error/is-error"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/entries.js"/>
      <url>/node_modules/babel-runtime/core-js/array/entries.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/entries"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/every.js"/>
      <url>/node_modules/babel-runtime/core-js/array/every.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/every"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/fill.js"/>
      <url>/node_modules/babel-runtime/core-js/array/fill.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/fill"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/find-index.js"/>
      <url>/node_modules/babel-runtime/core-js/array/find-index.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/find-index"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/filter.js"/>
      <url>/node_modules/babel-runtime/core-js/array/filter.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/filter"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/find.js"/>
      <url>/node_modules/babel-runtime/core-js/array/find.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/find"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/concat.js"/>
      <url>/node_modules/babel-runtime/core-js/array/concat.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/concat"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/for-each.js"/>
      <url>/node_modules/babel-runtime/core-js/array/for-each.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/for-each"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/from.js"/>
      <url>/node_modules/babel-runtime/core-js/array/from.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/includes.js"/>
      <url>/node_modules/babel-runtime/core-js/array/includes.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/includes"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/join.js"/>
      <url>/node_modules/babel-runtime/core-js/array/join.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/join"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/index-of.js"/>
      <url>/node_modules/babel-runtime/core-js/array/index-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/index-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/keys.js"/>
      <url>/node_modules/babel-runtime/core-js/array/keys.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/keys"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/last-index-of.js"/>
      <url>/node_modules/babel-runtime/core-js/array/last-index-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/last-index-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/map.js"/>
      <url>/node_modules/babel-runtime/core-js/array/map.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/map"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/json/stringify.js"/>
      <url>/node_modules/babel-runtime/core-js/json/stringify.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/of.js"/>
      <url>/node_modules/babel-runtime/core-js/array/of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/pop.js"/>
      <url>/node_modules/babel-runtime/core-js/array/pop.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/pop"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/push.js"/>
      <url>/node_modules/babel-runtime/core-js/array/push.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/push"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/reduce.js"/>
      <url>/node_modules/babel-runtime/core-js/array/reduce.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/reduce"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/reduce-right.js"/>
      <url>/node_modules/babel-runtime/core-js/array/reduce-right.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/reduce-right"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/slice.js"/>
      <url>/node_modules/babel-runtime/core-js/array/slice.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/slice"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/reverse.js"/>
      <url>/node_modules/babel-runtime/core-js/array/reverse.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/reverse"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/shift.js"/>
      <url>/node_modules/babel-runtime/core-js/array/shift.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/shift"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/some.js"/>
      <url>/node_modules/babel-runtime/core-js/array/some.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/some"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/sort.js"/>
      <url>/node_modules/babel-runtime/core-js/array/sort.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/sort"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/splice.js"/>
      <url>/node_modules/babel-runtime/core-js/array/splice.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/splice"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/unshift.js"/>
      <url>/node_modules/babel-runtime/core-js/array/unshift.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/unshift"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/values.js"/>
      <url>/node_modules/babel-runtime/core-js/array/values.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/values"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/array/copy-within.js"/>
      <url>/node_modules/babel-runtime/core-js/array/copy-within.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/array/copy-within"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/regexp/escape.js"/>
      <url>/node_modules/babel-runtime/core-js/regexp/escape.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/regexp/escape"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/assign.js"/>
      <url>/node_modules/babel-runtime/core-js/object/assign.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/create.js"/>
      <url>/node_modules/babel-runtime/core-js/object/create.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/define-properties.js"/>
      <url>/node_modules/babel-runtime/core-js/object/define-properties.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/define-properties"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/define-property.js"/>
      <url>/node_modules/babel-runtime/core-js/object/define-property.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/entries.js"/>
      <url>/node_modules/babel-runtime/core-js/object/entries.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/entries"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/freeze.js"/>
      <url>/node_modules/babel-runtime/core-js/object/freeze.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/freeze"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js"/>
      <url>/node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/get-own-property-descriptors.js"/>
      <url>/node_modules/babel-runtime/core-js/object/get-own-property-descriptors.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptors"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/get-own-property-names.js"/>
      <url>/node_modules/babel-runtime/core-js/object/get-own-property-names.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/get-own-property-names"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/get-own-property-symbols.js"/>
      <url>/node_modules/babel-runtime/core-js/object/get-own-property-symbols.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/get-own-property-symbols"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/get-prototype-of.js"/>
      <url>/node_modules/babel-runtime/core-js/object/get-prototype-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/is-extensible.js"/>
      <url>/node_modules/babel-runtime/core-js/object/is-extensible.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/is-extensible"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/is-frozen.js"/>
      <url>/node_modules/babel-runtime/core-js/object/is-frozen.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/is-sealed.js"/>
      <url>/node_modules/babel-runtime/core-js/object/is-sealed.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/is-sealed"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/is.js"/>
      <url>/node_modules/babel-runtime/core-js/object/is.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/is"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/keys.js"/>
      <url>/node_modules/babel-runtime/core-js/object/keys.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/prevent-extensions.js"/>
      <url>/node_modules/babel-runtime/core-js/object/prevent-extensions.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/prevent-extensions"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/seal.js"/>
      <url>/node_modules/babel-runtime/core-js/object/seal.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/seal"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/set-prototype-of.js"/>
      <url>/node_modules/babel-runtime/core-js/object/set-prototype-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/object/values.js"/>
      <url>/node_modules/babel-runtime/core-js/object/values.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/object/values"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/acosh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/acosh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/acosh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/asinh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/asinh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/asinh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/cbrt.js"/>
      <url>/node_modules/babel-runtime/core-js/math/cbrt.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/cbrt"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/atanh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/atanh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/atanh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/clz32.js"/>
      <url>/node_modules/babel-runtime/core-js/math/clz32.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/clz32"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/cosh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/cosh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/cosh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/fround.js"/>
      <url>/node_modules/babel-runtime/core-js/math/fround.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/fround"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/expm1.js"/>
      <url>/node_modules/babel-runtime/core-js/math/expm1.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/expm1"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/hypot.js"/>
      <url>/node_modules/babel-runtime/core-js/math/hypot.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/hypot"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/iaddh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/iaddh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/iaddh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/isubh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/isubh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/isubh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/imulh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/imulh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/imulh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/imul.js"/>
      <url>/node_modules/babel-runtime/core-js/math/imul.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/imul"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/log10.js"/>
      <url>/node_modules/babel-runtime/core-js/math/log10.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/log10"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/log1p.js"/>
      <url>/node_modules/babel-runtime/core-js/math/log1p.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/log1p"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/sign.js"/>
      <url>/node_modules/babel-runtime/core-js/math/sign.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/sign"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/sinh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/sinh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/sinh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/log2.js"/>
      <url>/node_modules/babel-runtime/core-js/math/log2.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/log2"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/tanh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/tanh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/tanh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/umulh.js"/>
      <url>/node_modules/babel-runtime/core-js/math/umulh.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/umulh"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/math/trunc.js"/>
      <url>/node_modules/babel-runtime/core-js/math/trunc.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/math/trunc"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/epsilon.js"/>
      <url>/node_modules/babel-runtime/core-js/number/epsilon.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/epsilon"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/is-integer.js"/>
      <url>/node_modules/babel-runtime/core-js/number/is-integer.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/is-integer"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/is-finite.js"/>
      <url>/node_modules/babel-runtime/core-js/number/is-finite.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/is-finite"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/is-safe-integer.js"/>
      <url>/node_modules/babel-runtime/core-js/number/is-safe-integer.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/is-safe-integer"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/is-nan.js"/>
      <url>/node_modules/babel-runtime/core-js/number/is-nan.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/is-nan"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/max-safe-integer.js"/>
      <url>/node_modules/babel-runtime/core-js/number/max-safe-integer.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/max-safe-integer"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/min-safe-integer.js"/>
      <url>/node_modules/babel-runtime/core-js/number/min-safe-integer.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/min-safe-integer"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/parse-float.js"/>
      <url>/node_modules/babel-runtime/core-js/number/parse-float.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/parse-float"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/number/parse-int.js"/>
      <url>/node_modules/babel-runtime/core-js/number/parse-int.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/number/parse-int"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/apply.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/apply.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/apply"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/construct.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/construct.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/construct"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/define-property.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/define-property.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/define-property"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/define-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/define-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/define-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/delete-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/delete-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/delete-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/delete-property.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/delete-property.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/delete-property"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-metadata-keys.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-metadata-keys.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-metadata-keys"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/enumerate.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/enumerate.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/enumerate"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-own-metadata-keys.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-own-metadata-keys.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-own-metadata-keys"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-own-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-own-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-own-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-prototype-of.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-prototype-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-prototype-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get-own-property-descriptor.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get-own-property-descriptor.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get-own-property-descriptor"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/get.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/get.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/get"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/has-own-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/has-own-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/has-own-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/has-metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/has-metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/has-metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/is-extensible.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/is-extensible.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/is-extensible"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/has.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/has.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/has"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/metadata.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/metadata.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/metadata"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/own-keys.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/own-keys.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/own-keys"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/prevent-extensions.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/prevent-extensions.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/prevent-extensions"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/set-prototype-of.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/set-prototype-of.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/set-prototype-of"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/reflect/set.js"/>
      <url>/node_modules/babel-runtime/core-js/reflect/set.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/reflect/set"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/system/global.js"/>
      <url>/node_modules/babel-runtime/core-js/system/global.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/system/global"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/ends-with.js"/>
      <url>/node_modules/babel-runtime/core-js/string/ends-with.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/ends-with"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/code-point-at.js"/>
      <url>/node_modules/babel-runtime/core-js/string/code-point-at.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/code-point-at"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/at.js"/>
      <url>/node_modules/babel-runtime/core-js/string/at.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/at"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/from-code-point.js"/>
      <url>/node_modules/babel-runtime/core-js/string/from-code-point.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/from-code-point"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/includes.js"/>
      <url>/node_modules/babel-runtime/core-js/string/includes.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/includes"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/match-all.js"/>
      <url>/node_modules/babel-runtime/core-js/string/match-all.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/match-all"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/pad-left.js"/>
      <url>/node_modules/babel-runtime/core-js/string/pad-left.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/pad-start"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/pad-end.js"/>
      <url>/node_modules/babel-runtime/core-js/string/pad-end.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/pad-end"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/pad-right.js"/>
      <url>/node_modules/babel-runtime/core-js/string/pad-right.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/pad-end"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/pad-start.js"/>
      <url>/node_modules/babel-runtime/core-js/string/pad-start.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/pad-start"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/repeat.js"/>
      <url>/node_modules/babel-runtime/core-js/string/repeat.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/repeat"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/starts-with.js"/>
      <url>/node_modules/babel-runtime/core-js/string/starts-with.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/starts-with"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/raw.js"/>
      <url>/node_modules/babel-runtime/core-js/string/raw.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/raw"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/trim-end.js"/>
      <url>/node_modules/babel-runtime/core-js/string/trim-end.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/trim-end"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/trim-left.js"/>
      <url>/node_modules/babel-runtime/core-js/string/trim-left.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/trim-left"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/trim-right.js"/>
      <url>/node_modules/babel-runtime/core-js/string/trim-right.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/trim-right"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/trim-start.js"/>
      <url>/node_modules/babel-runtime/core-js/string/trim-start.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/trim-start"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/string/trim.js"/>
      <url>/node_modules/babel-runtime/core-js/string/trim.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/string/trim"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/async-iterator.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/async-iterator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/async-iterator"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/has-instance.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/has-instance.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/has-instance"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/for.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/for.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/for"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/is-concat-spreadable.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/is-concat-spreadable.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/is-concat-spreadable"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/iterator.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/iterator.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/key-for.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/key-for.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/key-for"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/observable.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/observable.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/observable"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/match.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/match.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/match"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/replace.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/replace.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/replace"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/search.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/search.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/search"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/species.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/species.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/species"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/split.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/split.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/split"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/to-primitive.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/to-primitive.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/to-primitive"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/unscopables.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/unscopables.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/unscopables"), __esModule: true };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/node_modules/babel-runtime/core-js/symbol/to-string-tag.js"/>
      <url>/node_modules/babel-runtime/core-js/symbol/to-string-tag.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>module.exports = { "default": require("core-js/library/fn/symbol/to-string-tag"), __esModule: true };]]></content>
      
    </entry>
    
    
  
</search>
